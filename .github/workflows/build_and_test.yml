name: CI
on:
  push:
    # paths-ignore:
    #   - 'CHANGELOG.md'
  pull_request:
  # schedule:
  #   - cron: '0 11 * * 4'

jobs:
  skip_duplicate:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}



  test-pip:
    needs: skip_duplicate
    if: ${{ needs.skip_duplicate.outputs.should_skip == 'false' }}
    strategy:
      matrix:
        python-version: [ 3.7, 3.8 ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade numpy ipython scipy matplotlib astropy
          pip install --upgrade coverage pytest pytest-cov cython codecov
      - name: Install source
        run: |
          python setup.py install

      - name: Test pip on ${{ matrix.python-version }}
        run: |
          python -m pytest -vv --cov=threeml/ --cov-report=xml
        env:
          NUMBA_DISABLE_JIT: 1
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
           file: ./coverage.xml
           files: ./coverage1.xml,./coverage2.xml
           directory: ./coverage/reports/


  test-conda:
    needs: skip_duplicate
    if: ${{ needs.skip_duplicate.outputs.should_skip == 'false' }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest' ]
        python-version: [ 3.7 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache conda
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: conda-${{ matrix.os }}-python-${{ matrix.python-version }}-${{ hashFiles('environment-ci.yml') }}
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          auto-activate-base: false
          activate-environment: test_env
          python-version: ${{ matrix.python-version }}
          channels: conda-forge, xspecmodels, threeml
          environment-file: ci/environment.yml

      - name: Init Env
        run: |
          # Make sure we fail in case of error
          if [[ ${{matrix.os}} == ubuntu-latest ]];
          then
          miniconda_os=Linux
          compilers="gcc_linux-64 gxx_linux-64 gfortran_linux-64"
          else  # osx
          miniconda_os=MacOSX
          compilers="clang_osx-64 clangxx_osx-64 gfortran_osx-64"

          # On macOS we also need the conda libx11 libraries used to build xspec
          # We also need to pin down ncurses, for now only on macos.
          xorg="xorg-libx11"
          fi

          # Get the version in the __version__ environment variable
          #python ci/set_minor_version.py --patch $TRAVIS_BUILD_NUMBER --version_file threeML/version.py

          #export PKG_VERSION=$(cd threeML && python -c "import version;print(version.__version__)")

          export PKG_VERSION=$(python -c "import versioneer;print(versioneer.get_version())")

          echo "HOME= ${HOME}"
          echo "Building ${PKG_VERSION} ..."
          echo "Python version: ${{matrix.python-version}}"

          #libgfortranver="3.0"
          #NUMPYVER=1.15
          MATPLOTLIBVER=2
          XSPECVER="6.25"
          xspec_channel=xspecmodels

          # Figure out requested dependencies
          if [ -n "${MATPLOTLIBVER}" ]; then MATPLOTLIB="matplotlib=${MATPLOTLIBVER}"; fi
          if [ -n "${NUMPYVER}" ]; then NUMPY="numpy=${NUMPYVER}"; fi
          if [ -n "${XSPECVER}" ];
          then export XSPEC="xspec-modelsonly=${XSPECVER} ${xorg}";
          fi


          PKG="pytest>=3.6 pandas>=0.23 ultranest interpolation>=2.1.5"

          conda install ${PKG} codecov pytest-cov git ${MATPLOTLIB} ${NUMPY} ${XSPEC} astropy ${compilers} scipy astropy astromodels emcee pymultinest
      - name: Install on conda python ${{ matrix.python-version }}  os ${{ matrix.os }}
        run: |
           pip install .

        

        
  # build:
  #       runs-on: ${{ matrix.os }}
  #       strategy:
  #           matrix:
  #               os: [ubuntu-latest, macos-latest]
  #               python-version: [3.7]

  #       steps:
  #           - uses: actions/checkout@v2
  #           - name: Set up Python
  #             uses: actions/setup-python@v2
  #             with:
  #                 python-version: ${{ matrix.python-version }}

  #           - name: Add conda ${{ matrix.python-version }} to system path
  #             uses: conda-incubator/setup-miniconda@v2
  #             with:
  #                 activate-environment: "test_env"
  #                 auto-activate-base: false
  #                 architecture: "x64"
  #                 conda-build-version: 3.18
  #                 python-version: ${{ matrix.python-version }}
  #                 auto-update-conda: false
  #                 channels: conda-forge, xspecmodels, threeml

  #           - name: Init Env
  #             run: |
  #                 # Make sure we fail in case of errors
  #                 set -e

  #                 # Copy sources (we do not have write permission on the mounted $TRAVIS_BUILD_DIR),
  #                 # so let's make a copy of the source code
  #                 cd ~
  #                 rm -rf my_work_dir
  #                 mkdir my_work_dir
  #                 # Copy also dot files (.*)
  #                 shopt -s dotglob
  #                 cp -R ${GITHUB_WORKSPACE}/* my_work_dir/

  #                 cd my_work_dir

  #                 if [[ ${{matrix.os}} == ubuntu-latest ]];
  #                 then
  #                 miniconda_os=Linux
  #                 compilers="gcc_linux-64 gxx_linux-64 gfortran_linux-64"
  #                 else  # osx
  #                 miniconda_os=MacOSX
  #                 compilers="clang_osx-64 clangxx_osx-64 gfortran_osx-64"

  #                 # On macOS we also need the conda libx11 libraries used to build xspec
  #                 # We also need to pin down ncurses, for now only on macos.
  #                 xorg="xorg-libx11"
  #                 fi

  #                 # Get the version in the __version__ environment variable
  #                 #python ci/set_minor_version.py --patch $TRAVIS_BUILD_NUMBER --version_file threeML/version.py

  #                 #export PKG_VERSION=$(cd threeML && python -c "import version;print(version.__version__)")

  #                 export PKG_VERSION=$(python -c "import versioneer;print(versioneer.get_version())")

  #                 echo "HOME= ${HOME}"
  #                 echo "Building ${PKG_VERSION} ..."
  #                 echo "Python version: ${{matrix.python-version}}"

  #                 #libgfortranver="3.0"
  #                 #NUMPYVER=1.15
  #                 MATPLOTLIBVER=2
  #                 XSPECVER="6.25"
  #                 xspec_channel=xspecmodels

  #                 echo "Building ${PKG_VERSION} ..."
  #                 echo "Python version: ${{matrix.python-version}}"


  #                 # Figure out requested dependencies
  #                 if [ -n "${MATPLOTLIBVER}" ]; then MATPLOTLIB="matplotlib=${MATPLOTLIBVER}"; fi
  #                 if [ -n "${NUMPYVER}" ]; then NUMPY="numpy=${NUMPYVER}"; fi
  #                 if [ -n "${XSPECVER}" ];
  #                 then export XSPEC="xspec-modelsonly=${XSPECVER} ${xorg}";
  #                 fi


  #                 PKG="pytest>=3.6 pandas>=0.23 ultranest interpolation>=2.1.5"


  #                 echo "dependencies: ${MATPLOTLIB} ${NUMPY}  ${XSPEC}"

  #                 conda install ${PKG} codecov pytest-cov git ${MATPLOTLIB} ${NUMPY} ${XSPEC} astropy ${compilers} scipy

  #           - name: Build the Distribution
  #             run: |
  #                 # Build package

  #                 if [[ "${{matrix.os}}" == "ubuntu-latest" ]]; then
  #                 conda build --python=${{matrix.python-version}} conda-dist/recipes/threeml

  #                 else
  #                 # there is some strange error about the prefix length
  #                 conda build --no-build-id --python=${{matrix.python-version}} conda-dist/recipes/threeml
  #                 fi

  #           - name: Install the distribution
  #             run: |

  #               pip install .
