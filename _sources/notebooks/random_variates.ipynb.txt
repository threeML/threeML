{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c5754a42",
   "metadata": {},
   "source": [
    "# Random Variates\n",
    "\n",
    "When we perform a fit or load and analysis result, the parmeters of our model become distributions in the AnalysisResults object. These are actaully instantiactions of the RandomVaraiates class.\n",
    "\n",
    "While we have covered most of the functionality of RandomVariates in the AnalysisResults section, we want to highlight a few of the details here.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8af27105",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:02.948732Z",
     "iopub.status.busy": "2024-06-07T06:32:02.948537Z",
     "iopub.status.idle": "2024-06-07T06:32:03.005994Z",
     "shell.execute_reply": "2024-06-07T06:32:03.005348Z"
    },
    "lines_to_next_cell": 0
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ba1dd58",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "58515fbe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:03.008523Z",
     "iopub.status.busy": "2024-06-07T06:32:03.008121Z",
     "iopub.status.idle": "2024-06-07T06:32:05.997456Z",
     "shell.execute_reply": "2024-06-07T06:32:05.996816Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c1fd853d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:06.000058Z",
     "iopub.status.busy": "2024-06-07T06:32:05.999759Z",
     "iopub.status.idle": "2024-06-07T06:32:06.029473Z",
     "shell.execute_reply": "2024-06-07T06:32:06.028931Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a02a5a82",
   "metadata": {},
   "source": [
    "Let's load back our fit of the line + gaussian from the AnalysisResults section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cbd65ac0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:06.031632Z",
     "iopub.status.busy": "2024-06-07T06:32:06.031436Z",
     "iopub.status.idle": "2024-06-07T06:32:06.097765Z",
     "shell.execute_reply": "2024-06-07T06:32:06.097219Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d549f0dd",
   "metadata": {},
   "source": [
    "When we display our fit, we can see the **parameter paths** of the model. What if we want specific information on a parameter(s)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ec8094f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:06.100314Z",
     "iopub.status.busy": "2024-06-07T06:32:06.099932Z",
     "iopub.status.idle": "2024-06-07T06:32:06.135903Z",
     "shell.execute_reply": "2024-06-07T06:32:06.135367Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.04 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-1 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.3 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.480 +/- 0.011) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.0 +/- 1.0) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.04 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-1 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.3 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.480 +/- 0.011) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (9.0 +/- 1.0) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140015910005056\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>0.02</td><td>-0.08</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.01</td><td>0.01</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.23</td><td>-0.04</td></tr>\n",
       "<tr><td>0.02</td><td>-0.01</td><td>0.23</td><td>1.00</td><td>0.04</td></tr>\n",
       "<tr><td>-0.08</td><td>0.01</td><td>-0.04</td><td>0.04</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04  0.02 -0.08\n",
       "-0.85  1.00 -0.00 -0.01  0.01\n",
       "-0.04 -0.00  1.00  0.23 -0.04\n",
       " 0.02 -0.01  0.23  1.00  0.04\n",
       "-0.08  0.01 -0.04  0.04  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>27.011621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>27.011621</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         27.011621\n",
       "total            27.011621"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>65.386879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>73.583358</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             65.386879\n",
       "BIC             73.583358"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a64babb2",
   "metadata": {},
   "source": [
    "Let's take a look at the normalization of the gaussian. To access the parameter, we take the parameter path, and we want to get the variates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b764d42b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:06.138233Z",
     "iopub.status.busy": "2024-06-07T06:32:06.137869Z",
     "iopub.status.idle": "2024-06-07T06:32:06.140706Z",
     "shell.execute_reply": "2024-06-07T06:32:06.140190Z"
    }
   },
   "outputs": [],
   "source": [
    "norm = ar.get_variates(\"fake.spectrum.main.composite.F_2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8018be4",
   "metadata": {},
   "source": [
    "Now, norm is a RandomVariate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a7a98002",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:06.142905Z",
     "iopub.status.busy": "2024-06-07T06:32:06.142539Z",
     "iopub.status.idle": "2024-06-07T06:32:06.146388Z",
     "shell.execute_reply": "2024-06-07T06:32:06.145796Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "threeML.random_variates.RandomVariates"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ad03205",
   "metadata": {},
   "source": [
    "This is essentially a wrapper around numpy NDArray with a few added properties. It is an array of samples. In the MLE case, they are samples from the covariance matrix (this is not at all a marginal distribution, but the parameter \"knows\" about the entire fit, i.e., it is *not* a profile) and in the Bayesian case, these are samples from the posterior (this is a marginal).\n",
    "\n",
    "The output representation for an RV are its 68% equal-tail and HPD uncertainties."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "542b2a08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:06.148532Z",
     "iopub.status.busy": "2024-06-07T06:32:06.148231Z",
     "iopub.status.idle": "2024-06-07T06:32:06.153187Z",
     "shell.execute_reply": "2024-06-07T06:32:06.152631Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "equal-tail: (3.2 +/- 0.4) x 10, hpd: (3.2 +/- 0.4) x 10"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8c3dd3a",
   "metadata": {},
   "source": [
    "We can access these directly, and to any desired confidence level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d999d85a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:06.155402Z",
     "iopub.status.busy": "2024-06-07T06:32:06.155044Z",
     "iopub.status.idle": "2024-06-07T06:32:06.159415Z",
     "shell.execute_reply": "2024-06-07T06:32:06.158804Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(24.776286579915745, 40.464863825317366)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.equal_tail_interval(cl=0.95)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5a0ae0fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:06.161819Z",
     "iopub.status.busy": "2024-06-07T06:32:06.161357Z",
     "iopub.status.idle": "2024-06-07T06:32:06.165697Z",
     "shell.execute_reply": "2024-06-07T06:32:06.165066Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29.500813180766404, 34.99899870275552)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.highest_posterior_density_interval(cl=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8413ab6",
   "metadata": {},
   "source": [
    "As stated above, the RV is made from samples. We can histogram them to show this explicitly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7c7bfaa2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:06.168033Z",
     "iopub.status.busy": "2024-06-07T06:32:06.167683Z",
     "iopub.status.idle": "2024-06-07T06:32:06.349411Z",
     "shell.execute_reply": "2024-06-07T06:32:06.348765Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'norm')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.hist(norm.samples, bins=50, ec=\"k\", fc=\"w\", lw=1.2)\n",
    "ax.set_xlabel(\"norm\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e22e86a3",
   "metadata": {},
   "source": [
    "We can easily transform the RV through propagation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ace39bb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:06.351936Z",
     "iopub.status.busy": "2024-06-07T06:32:06.351461Z",
     "iopub.status.idle": "2024-06-07T06:32:06.356972Z",
     "shell.execute_reply": "2024-06-07T06:32:06.356338Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "equal-tail: 1.51 -0.06 +0.05, hpd: 1.51 -0.05 +0.06"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_norm = np.log10(norm)\n",
    "log_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "af7f4f01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-07T06:32:06.359307Z",
     "iopub.status.busy": "2024-06-07T06:32:06.358932Z",
     "iopub.status.idle": "2024-06-07T06:32:06.531781Z",
     "shell.execute_reply": "2024-06-07T06:32:06.531237Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'log norm')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA24AAAMQCAYAAABfeTbWAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAABH9klEQVR4nO3de5RddX3//1euI7lg4iRESpLhEgmDgNaC+QJREwI0CKSmXJQ29QqJAlFRfqhdYFtLtShWQeQSoI0KJaEXIP0Kg3wtAoECQqPwJYBB5Qw2AZIJhNwzSeb3hyvn6zjhMmcymc8kj8daXXb23p8974NnRZ7Z++zTp62trS0AAAAUq29PDwAAAMBrE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACF223DbcOGDXn66aezYcOGnh4FAADgNe224VapVHLWWWelUqn09CgAAACvabcNNwAAgN5CuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABSuf1dP8P3vfz/XXXdd9ttvv3zve99rt+/xxx/P1VdfnV/84hcZPHhwJk+enLPOOiuDBg1qd9ymTZty/fXX50c/+lFWr16dAw44IGeeeWaOOOKIro4HAADQ63XpituLL76YG264IXvssUeHfUuWLMl5552XDRs25Nxzz82JJ56Y//iP/8hf/dVfdTj2a1/7Wm6++eYcd9xx+fSnP52+ffvmggsuyGOPPdaV8QAAAHYJXbriduWVV+bggw/O1q1bs2rVqnb75syZk6FDh+byyy/P4MGDkyR77713vv71r+fhhx/Ou9/97iTJ4sWL8+Mf/zif+tSncsYZZyRJ/viP/zgf/ehHc9VVV+Wqq67qyogAAAC9Xs3h9rOf/Sz33HNPrrvuulx22WXt9q1duzaPPPJITj/99Gq0Jb8Nsu985zu5++67q+F2zz33pF+/fpk2bVr1uLq6upx44omZM2dOXnjhhYwaNarWMQEAut3MmTPT3Nxc8/qxY8dm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B6atrS0PPfRQbr311vzyl7/MZZddlv79f/trW1paMnz48PTp06fd+evr65MkK1asqOlFbbNixYq0tLRsd59H2QIAAL1FTeF22mmnZdKkSVmxYkXuvvvubNmypd2HY2fNmtXu+ClTpmTMmDG59tprc88991QfOrJx48YMGDCgw/kHDhxY3d8VCxYsyNy5c7t0DgAAgJ5WU7g1NDRUb2+cOnVqPve5z+WLX/xirrnmmg5Xz7Y5/fTTc/311+eRRx6phltdXd12n4a0adOm6v6umDZtWruvKfhdlUolF198cZfODwAAsDPskC/gnjRpUi699NI899xzGTt27HaPqaury5577plXXnmluq2+vj6LFi1KW1tbu+DbdnvjiBEjujTXiBEjunwOAACAntblp0om/++Wxu09WXKbdevWZdWqVRk2bFh127hx47Jhw4YOnzdbvHhxdT8AAMDurlPh9tJLL3XYtnnz5tx5552pq6vLvvvum40bN2bdunUdjvve976Xtra2TJgwobpt4sSJ6d+/f2655Zbqtra2ttx2220ZOXJkDjnkkM6MBwAAsEvq1K2Sl156adauXZt3vOMdGTlyZFpaWnLXXXelubk555xzTgYNGpRly5blE5/4RI499tjqbZMPP/xwHnzwwUyYMCETJ06snm+vvfbKaaedlptuuimbN29OY2Nj7rvvvjz22GO56KKLfPk2AABAOhluxxxzTH74wx/mtttuy6pVqzJo0KCMHz8+n/zkJ6tBNmTIkBx11FH56U9/mqampmzdujX77LNPZs6cmQ996EPp27f9Rb5Zs2Zl6NChWbBgQZqamjJ69OhceOGFOe6443bcqwQAAOjFOhVuU6ZMqT4R8tUMHTo0F1544Rs+Z9++fTNjxozMmDGjM6MAAADsNnbIw0kAAADoPsINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcP17egAAAHYPM2fOTHNzc01rx44dmzlz5uzgiaD3cMUNAICdorm5OZVKpdPrKpVKzcEHuwpX3AAA2GkaGhrS1NTUqTVTp07tpmmg93DFDQAAoHDCDQAAoHDCDQAAoHDCDQAAoHDCDQAAoHDCDQAAoHDCDQAAoHCd+h63X//61/mnf/qnPP3001m5cmXe9KY3paGhIWeccUaOPvrodsc+++yzueKKK/L444+nf//+OfLII3Puuedm2LBh7Y7bunVr5s2bl1tvvTUrV67M6NGjM2PGjBx77LFdfnEAwO5n5syZNX9Zc6VSSUNDww6eCKDrOhVuzz//fNatW5epU6dmxIgR2bBhQ+6555586Utfyvnnn59p06YlSV588cXMnj07Q4YMyVlnnZX169dn3rx5+dWvfpVrrrkmAwYMqJ7z2muvzY033piTTz45Bx10UBYuXJivfOUr6dOnT6ZMmbJjXy0AsMtrbm6uOcBaW1u7YSKArutUuB155JE58sgj22370z/905x11lm5+eabq+F2ww03ZMOGDbnuuusyatSoJEljY2M+97nP5Y477qget3z58syfPz/Tp0/PeeedlyQ56aSTMnv27Fx55ZWZNGlS+vXr1+UXCQDsXhoaGtLU1NTpdY2Njd0wDUDXdfkzbv369ctee+2VNWvWVLfdc889Oeqoo6rRliSHH354xowZk7vvvru6beHChdm8eXOmT59e3danT5984AMfyPLly/PEE090dTwAAIBer6ZwW79+fV5++eX8z//8T26++eY89NBDede73pXkt1fRXnrppYwfP77DusbGxixZsqT685IlS7LHHnt0uJVh2992/e6xAAAAu6tO3Sq5zXe/+90sWLAgSdK3b9+8973vrd7q2NLSkiSpr6/vsK6+vj6vvPJKNm3alIEDB6alpSXDhw9Pnz59OhyXJCtWrKhlvKoVK1ZU5/l9lUqlS+cGAADYWWoKt9NOOy2TJk3KihUrcvfdd2fLli3VD/Nu3LgxSdo9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77Pvvvu22z9y5MgMGzYsTz/9dIe1Tz75ZMaNG1f9edy4cdmwYUOHz5stXry4uh8AAGB316lw27JlS/76r/86TzzxRP7mb/4mhxxyyHaPe9/73pcHHnggL7zwQnXbo48+mueeey6TJ0+ubps4cWL69++fW265pbqtra0tt912W0aOHPmq5wcAANiddOpWye9+97u5//77c9RRR2X16tX50Y9+1G7/8ccfnySZMWNGfvKTn+Szn/1sTj311Kxfvz433XRT9t9//5xwwgnV4/faa6+cdtppuemmm7J58+Y0Njbmvvvuy2OPPZaLLrrIl28DAACkk+H2zDPPJEkeeOCBPPDAAx32bwu3UaNG5fLLL88VV1yRa665Jv3798+RRx6Zc845p/r5tm1mzZqVoUOHZsGCBWlqasro0aNz4YUX5rjjjqv1NQEAAOxSOhVul19++Rs+dr/99ss3v/nN1z2ub9++mTFjRmbMmNGZUQAAAHYbnX44CQAAADuXcAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAAChc/54eAADYOWbOnJnm5uZOr6tUKmloaOiGiQB4o1xxA4DdRHNzcyqVSqfXtba2dsM0AHSGK24AsBtpaGhIU1NTp9Y0NjZ20zQAvFGuuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABSuf08PAAAAJVq6dGlaW1szderUTq8dO3Zs5syZ0w1TsbsSbgAAsB2tra01ratUKjt4Eqgh3NatW5d58+Zl8eLFefLJJ7N69ep86UtfygknnNDuuK9+9atpamrqsH7s2LG54YYb2m3bunVr5s2bl1tvvTUrV67M6NGjM2PGjBx77LGdHQ8AAHaYhoaG7f477Wup5QodvJ5Oh9uqVasyd+7cjBo1KuPGjcuiRYte9diBAwfmggsuaLdt8ODBHY679tprc+ONN+bkk0/OQQcdlIULF+YrX/lK+vTpkylTpnR2RAAAgF1Kp8Otvr4+t9xyS+rr6/PUU09l5syZr3psv379cvzxx7/m+ZYvX5758+dn+vTpOe+885IkJ510UmbPnp0rr7wykyZNSr9+/To7JgAAwC6j00+VHDhwYOrr69/w8Vu2bMnatWtfdf/ChQuzefPmTJ8+vbqtT58++cAHPpDly5fniSee6OyIAAAAu5RufTjJhg0bcsIJJ2TDhg0ZOnRopkyZkk9+8pMZNGhQ9ZglS5Zkjz32SENDQ7u1jY2N1f2HHXZYd44JAABQtG4Lt/r6+pxxxhk58MAD09bWloceeii33nprfvnLX+ayyy5L//6//dUtLS0ZPnx4+vTp02F9kqxYsaLmGVasWJGWlpbt7vO0HwAAoLfotnCbNWtWu5+nTJmSMWPG5Nprr80999xTfejIxo0bM2DAgA7rBw4cWN1fqwULFmTu3Lk1rwcAACjBTv0et9NPPz3XX399HnnkkWq41dXVbfc7MjZt2lTdX6tp06bl6KOP3u6+SqWSiy++uOZzAwAA7Cw7Ndzq6uqy55575pVXXqluq6+vz6JFi9LW1tbudslttziOGDGi5t83YsSILq0HAAAoQaefKtkV69aty6pVqzJs2LDqtnHjxmXDhg0dPnO2ePHi6n4AAIDdWbeE28aNG7Nu3boO27/3ve+lra0tEyZMqG6bOHFi+vfvn1tuuaW6ra2tLbfddltGjhyZQw45pDtGBAAA6DVqulXy3/7t37JmzZrq7Yz3339/XnzxxSTJKaecktWrV+cTn/hEjj322IwdOzZJ8vDDD+fBBx/MhAkTMnHixOq59tprr5x22mm56aabsnnz5jQ2Nua+++7LY489losuusiXbwMAALu9msJt/vz5ef7556s/33vvvbn33nuTJMcff3yGDBmSo446Kj/96U/T1NSUrVu3Zp999snMmTPzoQ99KH37tr/QN2vWrAwdOjQLFixIU1NTRo8enQsvvDDHHXdcF14aAADArqGmcLv55ptf95gLL7zwDZ+vb9++mTFjRmbMmFHLOAAAALu0nfpwEgAAADpPuAEAABROuAEAABROuAEAABSupoeTAAA9Y+bMmWlubq5pbaVSSUNDww6eCICdwRU3AOhFmpubU6lUalrb2tq6g6cBYGdxxQ0AepmGhoY0NTV1el1jY2M3TAPAzuCKGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOGEGwAAQOH69/QAALC7mTlzZpqbm2taW6lU0tDQsIMnAqB0rrgBwE7W3NycSqVS09rW1tYdPA0AvYErbgDQAxoaGtLU1NTpdY2Njd0wDQClc8UNAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcP07u2DdunWZN29eFi9enCeffDKrV6/Ol770pZxwwgkdjn322WdzxRVX5PHHH0///v1z5JFH5txzz82wYcPaHbd169bMmzcvt956a1auXJnRo0dnxowZOfbYY2t+YQAAALuKTofbqlWrMnfu3IwaNSrjxo3LokWLtnvciy++mNmzZ2fIkCE566yzsn79+sybNy+/+tWvcs0112TAgAHVY6+99trceOONOfnkk3PQQQdl4cKF+cpXvpI+ffpkypQptb86AACAXUCnw62+vj633HJL6uvr89RTT2XmzJnbPe6GG27Ihg0bct1112XUqFFJksbGxnzuc5/LHXfckWnTpiVJli9fnvnz52f69Ok577zzkiQnnXRSZs+enSuvvDKTJk1Kv379an19AAAAvV6nP+M2cODA1NfXv+5x99xzT4466qhqtCXJ4YcfnjFjxuTuu++u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2Bl2+hdw77XXXmltbc2GDRuqt0hu73bGlpaWjBgxoku/a8SIEV0+BwAAQE/bKU+V/F1Lly7NwIEDs8cee2S//fZLv3798vTTT7c7prW1NUuWLMm4ceN29ngAAADF6bZwe/nllztse+aZZ3L//ffniCOOSN++fTNkyJAcfvjh+dGPfpR169ZVj7vzzjuzfv36TJ48ubvGAwAA6DW67VbJv/qrv0pdXV0OOeSQDB8+PM8++2z+4z/+I29605sya9as6nFnnnlmzjnnnMyePTvTpk3Liy++mPnz5+eII47IhAkTums8AACAXqPbwu0973lP7rrrrtx8881Zu3Zthg0blve+97356Ec/mtGjR1ePGz9+fP7hH/4hV199db7zne9k0KBBOfHEE9vFHQC8lpkzZ6a5ubmmtZVKJQ0NDTt4IgDYsbot3E499dSceuqpb+jYww47LFdeeWV3jQLALq65ubnmANvek40BoDQ7/amSANAdGhoa0tTU1Ol1jY2N3TANAOxYO/2pkgAAAHSOcAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAAChc/54eAAC2mTlzZpqbmzu9rlKppKGhoRsmAoAyuOIGQDGam5tTqVQ6va61tbUbpgGAcrjiBkBRGhoa0tTU1Kk1jY2N3TQNAJTBFTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDC9e/pAQAAgJ6zdOnStLa2ZurUqTWtHzt2bObMmbODp+L3CTcAANiNtba21ry2UqnswEl4LcINAAB2cw0NDWlqaur0ulqv0tF5PuMGAABQOFfcANihZs6cmebm5prWViqVNDQ07OCJAKD3c8UNgB2qubm55s88dOVzFgCwK3PFDYAdrtbPSjQ2NnbDNADQ+7niBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAULj+PT0AAADQOy1dujStra2ZOnVqTevHjh2bOXPm7OCpdk3CDQAAqElra2vN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dWs+8YlPJPnt+6itrW1Hjkcv4YobvdK6deuyfv36vPnNb+7pUehF1q5dm9bW1qxatar6L+F/8Rd/0dNj0QusW7cuV199dWbMmOH2bGrymc98JuvXr8+AAQNyxBFH5JxzzsmYMWN6eix6gUcffTRjx47Ngw8+mKuuuirLly/P0KFDM3369Hz84x/v8Jfb7LqEG73Sv/zLv6S1tTXHHHNMT49CL/JXf/VXefjhh5MkAwYMyLRp0/LhD3+4h6eiN5g7d27q6upy+umn9/Qo9DJ1dXU54YQT8od/+IcZPHhwnn766dx88805++yzc91112XUqFE9PSKF2/Y57b//+7/PGWeckQMOOCD33ntvvv/972fLli2ZNWtWT4/ITiLc6HV+9rOfZe7cuZk8eXL+6I/+qKfHoReZNWtWPvjBD+bFF19MU1NTNm/e7LYlXtdzzz2Xf/3Xf82Xv/xlDyWh04455ph2f8n4nve8J+9+97sze/bs/OAHP8j555/fg9PRG6xfvz5bt27NrFmz8ud//udJkkmTJmX16tX513/91/zFX/xFBg0a1MNTsjO4tkqvUqlUcuGFF2b//ffPF77whZ4eh17mbW97W4444oiceOKJ+Yd/+Ic8+eSTr/qYbtjm8ssvzyGHHJJJkyb19CjsIg477LAcfPDBefTRR3t6FHqBurq6JMmxxx7bbvuUKVOycePG/OIXv+iJsegBwo1e44UXXsjnP//5DB48OJdccom/XaJLBgwYkKOPPjr33ntvNm7c2NPjUKhHH300Dz30UE499dQsW7as+n9btmzJxo0bs2zZsqxdu7anx6QX2muvvfLKK6/09Bj0Ats+Vzt8+PB227f9vHr16p0+Ez3DrZL0CqtWrcrnP//5tLa25lvf+pYv3maH2LhxY9ra2rJu3brq32jC79r2HUkXXnhhh33Lly/PBz/4wZx77rk++0anLV26NMOGDevpMegFxo8fn9/85jdZsWJF/uAP/qC6fcWKFUnifbQbEW4UZcWKFVm7dm322Wef9O//27fn+vXrc8EFF2TFihW57LLLPIWL17S999BLL73U4W8qV69enXvuuSd77bVXh33svn7//fOud70rf/d3f9fhuG984xt561vfmr/4i7/I/vvv3wOTUqLt/fnz8ssvd/gX6//6r//K008/nVNOOaUHpqRk23sPHXPMMfnxj3+cH/7wh9WvI9m6dWvuuOOO7Lnnnhk/fnxPjsxOJNzYaf7t3/4ta9asSUtLS5Lk/vvvr/5t9imnnJIhQ4Zkzpw5aWpqyvz587P33nsnSf72b/82Tz75ZN7//venUqm0++62PfbYI+95z3t2/ouhR9T6Hvr//r//LyNHjszBBx+c4cOH54UXXsjtt9+elpaW/PVf/3VPvRx2slreP6NGjdruU/++853vZPjw4f782Y3U+ufPpz71qRx44IEZP358Bg8enF/84he5/fbbs9dee/k6kt1Mre+hiRMn5o/+6I9yww035OWXX864ceNy33335bHHHsv555/voUm7EeHGTjN//vw8//zz1Z/vvffe3HvvvUmS448/PkOGDNnuumeeeSZJcvvtt+f2229vt++tb32rf3HajdT6Hnr/+9+f//zP/8zNN9+cNWvWZOjQoTn44IPz5S9/Oe94xzt2yuz0vFrfP5DU/v455phj8uCDD+anP/1pNmzYkPr6+px88sn56Ec/mre85S07ZXbKUOt7qE+fPvm7v/u7XHfddfnP//zPNDU1ZcyYMbnwwgtz/PHH75TZKUOfNl+9DgAAUDRPlQQAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAMAACiccAOgOMuWLct73/vefPWrX+3pUQCgCMINAACgcMINAACgcMINAACgcP17egAA6Iznn38+c+fOzcMPP5yXX345w4cPzxFHHJGPfexjGTVqVIfjf/nLX+bqq6/OY489lr59++aQQw7Jpz71qcybNy9NTU2ZP39+9t5779f8ncuWLcsHP/jBTJ06NR/+8Idz1VVXZdGiRdm8eXPe/va355xzzsm4ceM6rPvVr36V733ve1m0aFHWrl2b+vr6TJw4MR/5yEfy5je/ud2xp59+epLk+uuvz3XXXZeFCxdm5cqVueCCC/LOd76z+vv/7M/+LFdddVUef/zxJMmECRPymc98JsOGDcv//b//N9ddd12eeuqp9O3bN+973/vy6U9/OnvssUet/7gBKIRwA6DXeO6553LOOefk5ZdfzlFHHZX99tsvv/71r3P77bfngQceyHe/+92MGTOmevwzzzyTc889Nxs2bMh73/vejB49Ok899VTOPffcHHDAAZ3+/c8//3w+9alPZd9998373//+LF26NAsXLsxnPvOZ/OAHP8hb3vKW6rGPPfZYzj///LS2tmbSpEl561vfmieeeCL/+q//mv/6r//KVVddlWHDhrU7/6ZNm/LZz34269evz9FHH51+/fpl+PDh1f3Lli3L2WefnYMOOignnnhinn766fz4xz/Oiy++mFmzZuXzn/98Dj/88Jx88sn52c9+lh/+8Idpa2vLF7/4xc7/wwagKMINgF7j0ksvzcsvv5zzzz8/06ZNq26/5ZZb8q1vfSvf/OY38+1vf7u6/dvf/nbWrVuXiy66KMcdd1x1+/XXX5/vfe97nf79P/vZzzJr1qz8+Z//eXXbddddl+9///u5/fbbM2PGjCTJ1q1b87WvfS0bNmzIpZdemne/+93V46+66qrcdNNNufrqqzsE1cqVKzNu3LhceeWVqaurq25ftmxZkuTnP/95Zs+endNOOy1J0tbWli984Qt58MEH88UvfjFf/vKX8573vCdJsnnz5px11lm58847M3PmzHZRCUDv4zNuAPQKL7zwQhYtWpR99903J598crt9f/Inf5KxY8fmv//7v/PCCy8k+e3Vscceeyzjxo1rF21J8md/9mcZOnRop2fYe++9c8YZZ7TbduKJJyZJnnrqqeq2xx9/PP/zP/+TCRMmtIu2JPnIRz6SPffcM//n//yftLa2dvgdn/rUp9pF2+/aZ599cuqpp1Z/7tOnT6ZMmZIkedvb3laNtiTp379/Jk2alC1btuTZZ5/t3AsFoDjCDYBeYcmSJUmSd77znenTp0+7fX379s073vGOJL+9PfJ3//OQQw7pcK499thju59Jez3jxo1L377t/6dz5MiRSZI1a9Z0mPUP//APO5xj0KBBGT9+fDZt2pTm5uZ2+wYOHJj999//VX///vvv3+G119fXJ/ltuP2+bftWrFjxqucEoHcQbgD0CuvWrUuSdp/5+l3bImXt2rVv6Phabh0cPHhwh239+//2Uwdbt26tbts2w+vNum3GbYYPH94hzF7v9/fr1y/Jb4Pw1fZt2bLlVc8JQO8g3ADoFbaFyUsvvbTd/StXrkzy/+LmjR7fHbbN8Hq/+/dj67WiDYDdm3ADoFfYdivgz3/+87S1tbXb19bWlp///OdJUr0Fctt/PvHEEx3OtWHDhvzyl7/s9lkXLVrUYd/69evz9NNPp66uLmPHju22GQDYtQg3AHqFUaNG5Q//8A/z61//Oj/84Q/b7VuwYEEqlUre9a53Vb/L7a1vfWsOPfTQLFmyJD/+8Y/bHX/TTTfllVde6bZZDz300Oyzzz556KGH8sgjj7Tb9/3vfz+rVq3KlClTMmDAgG6bAYBdi68DAKDX+PznP59zzjkn3/jGN/LAAw9k3333za9//evcf//9GTZsWD7/+c+3O/4zn/lMZs+enYsvvjj33ntv9tlnn/ziF7/I4sWL8453vCM///nPOzxsZEfo27dvvvSlL+X888/PBRdc0O573BYtWpR99tknn/zkJ3f47wVg1+WKGwC9xtixY3PttdfmhBNOyJNPPpmbbropTz31VN7//vdnzpw57b58O0kOPPDAXHHFFfmjP/qjPPjgg/n3f//39OnTJ1dccUWHz8LtaIcddliuuuqqTJw4MT/96U8zb968LFu2LKeeeup2v3wbAF5Ln7bf/6AAAOzitmzZkjPOOCMbN27Mbbfd1tPjAMDrcsUNgF3W5s2b8/LLL3fYfuONN+b555/PxIkTd/5QAFADn3EDYJe1fv36nHLKKTn88MMzZsyYbN68OYsXL85TTz2V+vr6fOxjH+vpEQHgDXGrJAC7rNbW1nznO9/Jf//3f2fFihXZtGlT6uvrM2HChHzkIx/JyJEje3pEAHhDhBsAAEDhfMYNAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcP8//C/Cir+9p8oAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.hist(log_norm.samples, bins=50, ec=\"k\", fc=\"w\", lw=1.2)\n",
    "ax.set_xlabel(\"log norm\")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "2a712545",
   "metadata": {},
   "source": [
    ".. note::\n",
    "    Some operations will destroy the RV by accessing only its NDArray substructure. For example, using an RV with astropy units will return an array of samples with the given units."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
