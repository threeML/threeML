{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5aea3975",
   "metadata": {},
   "source": [
    "# Random Variates\n",
    "\n",
    "When we perform a fit or load and analysis result, the parmeters of our model become distributions in the AnalysisResults object. These are actaully instantiactions of the RandomVaraiates class.\n",
    "\n",
    "While we have covered most of the functionality of RandomVariates in the AnalysisResults section, we want to highlight a few of the details here.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dba8a5a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:19.683569Z",
     "iopub.status.busy": "2024-09-09T18:58:19.683364Z",
     "iopub.status.idle": "2024-09-09T18:58:19.742932Z",
     "shell.execute_reply": "2024-09-09T18:58:19.742257Z"
    },
    "lines_to_next_cell": 0
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d07b2cf",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "705dbec8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:19.745965Z",
     "iopub.status.busy": "2024-09-09T18:58:19.745430Z",
     "iopub.status.idle": "2024-09-09T18:58:22.774985Z",
     "shell.execute_reply": "2024-09-09T18:58:22.774336Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2d0edf91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:22.777981Z",
     "iopub.status.busy": "2024-09-09T18:58:22.777470Z",
     "iopub.status.idle": "2024-09-09T18:58:22.807208Z",
     "shell.execute_reply": "2024-09-09T18:58:22.806620Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5e3349e",
   "metadata": {},
   "source": [
    "Let's load back our fit of the line + gaussian from the AnalysisResults section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bbdd4185",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:22.809564Z",
     "iopub.status.busy": "2024-09-09T18:58:22.809184Z",
     "iopub.status.idle": "2024-09-09T18:58:22.874498Z",
     "shell.execute_reply": "2024-09-09T18:58:22.873940Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a47f51a",
   "metadata": {},
   "source": [
    "When we display our fit, we can see the **parameter paths** of the model. What if we want specific information on a parameter(s)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c641e220",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:22.876801Z",
     "iopub.status.busy": "2024-09-09T18:58:22.876395Z",
     "iopub.status.idle": "2024-09-09T18:58:22.910145Z",
     "shell.execute_reply": "2024-09-09T18:58:22.909518Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.20 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-2 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.6 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.521 +/- 0.015) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.1 +/- 1.0) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.20 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-2 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.6 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.521 +/- 0.015) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (9.1 +/- 1.0) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140537637938896\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.05</td><td>0.03</td><td>-0.06</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>0.00</td><td>-0.01</td><td>0.00</td></tr>\n",
       "<tr><td>-0.05</td><td>0.00</td><td>1.00</td><td>-0.25</td><td>0.07</td></tr>\n",
       "<tr><td>0.03</td><td>-0.01</td><td>-0.25</td><td>1.00</td><td>-0.46</td></tr>\n",
       "<tr><td>-0.06</td><td>0.00</td><td>0.07</td><td>-0.46</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.05  0.03 -0.06\n",
       "-0.85  1.00  0.00 -0.01  0.00\n",
       "-0.05  0.00  1.00 -0.25  0.07\n",
       " 0.03 -0.01 -0.25  1.00 -0.46\n",
       "-0.06  0.00  0.07 -0.46  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>25.25929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>25.25929</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data          25.25929\n",
       "total             25.25929"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>61.882216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>70.078694</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             61.882216\n",
       "BIC             70.078694"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ce90f80",
   "metadata": {},
   "source": [
    "Let's take a look at the normalization of the gaussian. To access the parameter, we take the parameter path, and we want to get the variates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "07540e11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:22.912620Z",
     "iopub.status.busy": "2024-09-09T18:58:22.912229Z",
     "iopub.status.idle": "2024-09-09T18:58:22.915342Z",
     "shell.execute_reply": "2024-09-09T18:58:22.914708Z"
    }
   },
   "outputs": [],
   "source": [
    "norm = ar.get_variates(\"fake.spectrum.main.composite.F_2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c046e5a",
   "metadata": {},
   "source": [
    "Now, norm is a RandomVariate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ddeeef86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:22.917588Z",
     "iopub.status.busy": "2024-09-09T18:58:22.917287Z",
     "iopub.status.idle": "2024-09-09T18:58:22.921163Z",
     "shell.execute_reply": "2024-09-09T18:58:22.920628Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "threeML.random_variates.RandomVariates"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f7e5758",
   "metadata": {},
   "source": [
    "This is essentially a wrapper around numpy NDArray with a few added properties. It is an array of samples. In the MLE case, they are samples from the covariance matrix (this is not at all a marginal distribution, but the parameter \"knows\" about the entire fit, i.e., it is *not* a profile) and in the Bayesian case, these are samples from the posterior (this is a marginal).\n",
    "\n",
    "The output representation for an RV are its 68% equal-tail and HPD uncertainties."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "105d6812",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:22.923312Z",
     "iopub.status.busy": "2024-09-09T18:58:22.922962Z",
     "iopub.status.idle": "2024-09-09T18:58:22.927842Z",
     "shell.execute_reply": "2024-09-09T18:58:22.927232Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "equal-tail: (2.6 +/- 0.4) x 10, hpd: (2.6 +/- 0.4) x 10"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18b224ab",
   "metadata": {},
   "source": [
    "We can access these directly, and to any desired confidence level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7dd3cac0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:22.930393Z",
     "iopub.status.busy": "2024-09-09T18:58:22.929805Z",
     "iopub.status.idle": "2024-09-09T18:58:22.934521Z",
     "shell.execute_reply": "2024-09-09T18:58:22.934012Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(18.111515355269663, 34.10465792100629)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.equal_tail_interval(cl=0.95)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f17e29f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:22.936844Z",
     "iopub.status.busy": "2024-09-09T18:58:22.936375Z",
     "iopub.status.idle": "2024-09-09T18:58:22.940698Z",
     "shell.execute_reply": "2024-09-09T18:58:22.940067Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(23.536778839692055, 28.867276753488458)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.highest_posterior_density_interval(cl=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f555de9",
   "metadata": {},
   "source": [
    "As stated above, the RV is made from samples. We can histogram them to show this explicitly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "55ccb1ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:22.943104Z",
     "iopub.status.busy": "2024-09-09T18:58:22.942768Z",
     "iopub.status.idle": "2024-09-09T18:58:23.124863Z",
     "shell.execute_reply": "2024-09-09T18:58:23.124101Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'norm')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA24AAAMQCAYAAABfeTbWAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAA/vklEQVR4nO3df5TWdYH3/xcwQCCw2ICsBVymlE6atXssb5AKRGnYijtLvXNvzvZLsFZp03vX6j7atma1te22uqaJtku7GuB9Oih7dhv1dBuKblkeWjmIRJnX0KICg6H8voD5/tHNfKNBZa5hmDczj8df8fl83te8Z732I0/fnx8D2tvb2wMAAECxBvb2BAAAAHh5wg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBw/Tbcdu3albVr12bXrl29PRUAAICX1W/DrVqtZu7cualWq709FQAAgJfVb8MNAADgWCHcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACtfQlYN/+ctf5p/+6Z+ydu3abNmyJa961atSqVRyySWX5Jxzzjno2Keffjo33XRTVq1alYaGhkyePDlXXHFFRo8efdBx+/fvz+LFi3P33Xdny5YtGT9+fObMmZPzzjuv278cAABAX9ClcHv22WezY8eONDc3Z8yYMdm1a1eWL1+ez372s/nzP//zzJ49O0mycePGzJ8/PyNGjMjcuXOzc+fOLF68OE899VRuvfXWDB48uOMzb7vtttx5551573vfm9NOOy0rVqzIddddlwEDBmTGjBlH9rcFAAA4BnUp3CZPnpzJkycftO39739/5s6dm7vuuqsj3O64447s2rUrt99+e8aNG5ckaWpqylVXXZXvfe97Hcdt2rQpS5YsyQUXXJArr7wySfKe97wn8+fPz80335xp06Zl0KBB3f4lAQAAjmXdvsdt0KBBOeGEE7Jt27aObcuXL8+UKVM6oi1JzjrrrEyYMCEPPPBAx7YVK1Zk7969ueCCCzq2DRgwIO973/uyadOmrF69urvTAwAAOObVFW47d+7Mr3/96/zXf/1X7rrrrvzoRz/KH/7hHyb5zSra888/n1NPPbXTuKampqxbt67jz+vWrcuwYcNSqVQ6HXdgPwAAQH/XpUslD/jGN76RZcuWJUkGDhyYd7zjHR2XOra1tSVJGhsbO41rbGzMCy+8kD179mTIkCFpa2vL8ccfnwEDBnQ6Lkk2b95cz/Q6bN68uWM+v6tarXbrswEAAI6WusLtoosuyrRp07J58+Y88MAD2bdvX2q1WpJk9+7dSXLQA0gOGDJkSMcxQ4YMye7du1/xuO5YtmxZFi5c2K3PAAAA6G11hVulUum4vLG5uTlXXXVVPvOZz+TWW2/N0KFDk6Qj5H7bnj17kqTjmKFDhx7WcfWaPXt2p9cUHFCtVnP99dd36/MBAACOhrrC7XdNmzYtX/va17J+/fqOyxwPdYliW1tbRo0a1bGi1tjYmJUrV6a9vf2gyyUPjB0zZky35jVmzJhufwYAAEBv6/ZTJZP//5LGbdu2ZezYsRk9enTWrl3b6bg1a9Zk0qRJHX+eNGlSdu3a1el+syeeeKJjPwAAQH/XpXB7/vnnO23bu3dv7r333gwdOjQnnXRSkuSd73xnHnnkkTz33HMdxz322GNZv359pk+f3rFt6tSpaWhoyNKlSzu2tbe355577snYsWNzxhlndPX3AQAA6HO6dKnk1772tWzfvj1vfvObM3bs2LS1teX+++9Pa2trLr/88gwfPjxJMmfOnPzgBz/Ipz71qVx44YXZuXNnFi1alJNPPjmzZs3q+LwTTjghF110URYtWpS9e/emqakpDz30UB5//PFce+21Xr4NAACQZEB7e3v74R78/e9/P//2b/+Wp556Klu3bs3w4cNz6qmn5v3vf3+mTp160LG//OUvc9NNN2XVqlVpaGjI5MmTc/nll+fVr371Qcft378/3/nOd7Js2bK0tbVl/Pjx+Z//839m5syZR+Y3fAlr167N3Llzc9tttx3ynXMAAACl6FK49SXCDQAAOFYckYeTAAAA0HOEGwAAQOGEGwAAQOGEGwAAQOG69DoAACjRvHnz0traWvf4iRMnZsGCBUdwRgBwZFlxA+CY19rammq1WtfYarXaregDgKPBihsAfUKlUklLS0uXxzU3N/fAbADgyLLiBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAULiG3p4AABwwb968tLa2dnlctVpNpVLpgRkBQBmsuAFQjNbW1lSr1S6Pq9VqPTAbACiHFTcAilKpVNLS0tKlMU1NTT00GwAogxU3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwgk3AACAwjX09gQA6FvmzZuX1tbWusZWq9VUKpUjPCMAOPZZcQPgiGptbU21Wq1rbK1WO8KzAYC+wYobAEdcpVJJS0tLl8c1NTX1wGwA4NhnxQ0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwHk4CQCce6Q8AZbHiBkAnHukPAGWx4gbAIXmkPwCUw4obAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4bwOAIB+bcOGDanVamlubq5r/MSJE7NgwYIjPCsAOJhwA6Bf684Lw+t9STkAdJVwA6Dfq/dl4/Wu0gFAV7nHDQAAoHBW3ACgTt25P869cQB0hXADgDrVe3+ce+MA6CrhBgDdUM/9ce6NA6Cr3OMGAABQOOEGAABQOJdKAsBR5qXfAHSVcAOAo8xLvwHoKuEGAL3AS78B6Ar3uAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABSuoSsHr1mzJi0tLVm5cmWeffbZjBo1KqeffnouvfTSTJgwoeO4L33pS2lpaek0fuLEibnjjjsO2rZ///4sXrw4d999d7Zs2ZLx48dnzpw5Oe+88+r8lQAAAPqWLoXbd77znaxatSrTp0/PKaeckra2tixdujSXXnppbrnllpx88skdxw4ZMiRXX331QeOPO+64Tp9522235c4778x73/venHbaaVmxYkWuu+66DBgwIDNmzKjz1wIAAOg7uhRuF198cT73uc9l8ODBHdvOPffcfOQjH8mdd96Za6+9tmP7oEGDMnPmzJf9vE2bNmXJkiW54IILcuWV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k1WrVmX69Ok55ZRT0tbWlqVLl+bSSy/NLbfckpNPPjlJsnHjxsyfPz8jRozI3Llzs3PnzixevDhPPfVUbr311gwePLjjM2+77bbceeedee9735vTTjstK1asyHXXXZcBAwZkxowZR/a3BQAAOAZ1KdwuvvjifO5znzsovM4999x85CMfyZ133plrr702SXLHHXdk165duf322zNu3LgkSVNTU6666qp873vfy+zZs5MkmzZtypIlS3LBBRfkyiuvTJK85z3vyfz583PzzTdn2rRpGTRo0BH5RQEAAI5VXbrH7U1vetNB0ZYkEyZMyEknnZRqtdqxbfny5ZkyZUpHtCXJWWedlQkTJuSBBx7o2LZixYrs3bs3F1xwQce2AQMG5H3ve182bdqU1atXd/kXAgAA6Gu6/XCS9vb2PP/88/m93/u9JL9ZRXv++edz6qmndjq2qakp69at6/jzunXrMmzYsFQqlU7HHdgPAADQ33XpUslDuf/++7Np06Z89KMfTZK0tbUlSRobGzsd29jYmBdeeCF79uzJkCFD0tbWluOPPz4DBgzodFySbN68uVtz27x5c8d8ftdvrxAClGzDhg2p1Wppbm7u8thqtdrpP44BAMeeboVbtVrN17/+9Zx++ukdf6HYvXt3knS6pDJJhgwZ0nHMkCFDsnv37lc8rjuWLVuWhQsXduszAHpbrVbrlbEAQDnqDre2trZ8+tOfznHHHZcvfOELHQ8RGTp0aJJD/2Vhz549Bx0zdOjQwzquXrNnz84555xzyH3VajXXX399tz4f4GipVCppaWnp8rgDl54DAMe2usJt27Ztufrqq7Nt27bcdNNNGTNmTMe+A5c5HuoSxba2towaNapjRa2xsTErV65Me3v7QZdLHhj7259bjzFjxnT7MwAAAHpblx9Osnv37nzmM5/J+vXr89d//dc56aSTDto/duzYjB49OmvXru00ds2aNZk0aVLHnydNmpRdu3Z1ut/siSee6NgPAADQ33Up3Pbt25fPf/7zWb16df7qr/4qZ5xxxiGPe+c735lHHnkkzz33XMe2xx57LOvXr8/06dM7tk2dOjUNDQ1ZunRpx7b29vbcc889GTt27Et+PgAAQH/SpUslv/GNb+Thhx/OlClT8uKLL+a+++47aP/MmTOTJHPmzMkPfvCDfOpTn8qFF16YnTt3ZtGiRTn55JMza9asjuNPOOGEXHTRRVm0aFH27t2bpqamPPTQQ3n88cdz7bXXevk2AABAuhhuP//5z5MkjzzySB555JFO+w+E27hx43LjjTfmpptuyq233pqGhoZMnjw5l19+ecf9bQdcdtllGTlyZJYtW5aWlpaMHz8+11xzTc4///x6fycAAIA+pUvhduONNx72sa973evyt3/7t6943MCBAzNnzpzMmTOnK1MBAADoN7r8cBIAAACOLuEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQuIbengDAsWTevHlpbW3t8rhqtZpKpdIDMwIA+gMrbgBd0Nrammq12uVxtVqtB2YDAPQXVtwAuqhSqaSlpaVLY5qamnpoNgBAf2DFDQAAoHDCDQAAoHDCDQAAoHDCDQAAoHAeTgIA9Jh6X6FxwMSJE7NgwYIjOCOAY5MVNwCgx9T7Co3kN+8/7E70AfQlVtwAgB5Vzys0kqS5ubkHZgNwbLLiBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAULiG3p4AAFC2DRs2pFarpbm5uctjq9VqKpVKD8wKoH+x4gYAvKxardYrYwH4/1lxAwBeUaVSSUtLS5fHNTU19cBsAPofK24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFa+jtCQAcbfPmzUtra2tdY6vVaiqVyhGeEQDAy7PiBvQ7ra2tqVardY2t1WpHeDYAAK/MihvQL1UqlbS0tHR5XFNTUw/MBgDg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efPmpbW1tcvjqtVqKpVKD8wIAAB6nhU3jimtra11XW/enevbAQCgt1lx45hTz3XqTU1NPTQbAADoeVbcAAAACifcAAAACifcAAAACifcAAAACufhJAAAcAgbNmxIrVar60XcEydOzIIFC3pgVvRXwg0AAA6h3tcJ1fPqInglwg0AAF5CPa8hqmeFDl6Je9wAAAAKJ9wAAAAK51LJPmDevHlpbW2te7ybZwEAoGxW3PqA1tbWum+CrVar3Yo+AACg51lx6yPquXE2cfMsAAAcC6y4AQAAFM6KG3VxXx0AABw9Vtyoi/vqAADg6LHiRt3qva/uzDPPTLVarev+umq1mkql0uVxAABHy4YNG1Kr1ep+lkC9VyZ154ooV0OVT7hx1NVqtV4ZCwBwNHTn7yv1XtGU/P9XRHX1P3J352dy9Ag3ekW9q3VNTU09MBsAgCOrt574Xc/P9ZTxY4N73AAAAAon3AAAAApXxKWSe/bsybe+9a3cd999efHFF3PKKafk0ksvzVvf+tbentpR052bSbvzwI56b571kBAAAHpDf30tVRErbl/+8pdz11135fzzz88nP/nJDBw4MFdffXUef/zx3p7aUdOdx+v3xsM+PCQEAIDe0F9fS9XrK25PPPFEvv/97+cTn/hELrnkkiTJu971rnz4wx/OLbfckltuuaWXZ3j09NYDO+r5uR4SAgBw5HXnVQL1XhHVnZ+5YcOGJMlrXvOaLo9N6l/96q2Hv/SmXl9xW758eQYNGpTZs2d3bBs6dGje/e53Z/Xq1Xnuued6cXYAAHD0HGtXUu3YsaPu8cfy6ldvGNDe3t7emxO46qqrsmnTpvzLv/zLQdsfe+yxXHnllfnyl7+cc845p67P3rx5c9ra2g657+c//3m+8pWv5JprriniXq358+fnmWeeyYknntjlsevXr09DQ8NRHdsbP7M7Y/vLz+zOWPPt2bHm27Njzbdnx5pvmT+zO2PNt2fHmu/heeaZZ5Kky2PrHXdg7Iknnph/+Id/6PLYnlapVPKqV73qJff3erh96EMfyvHHH5+///u/P2j7008/nT/5kz/J//pf/yv//b//97o++x//8R+zcOHC7k8SAACgB91222059dRTX3J/r9/jtnv37gwePLjT9iFDhnTsr9fs2bNfcrXuxRdfTLVazRve8IaOn8XRUa1Wc/311xez2snR5Z8/vgP9m3/++A7gO3Bor/R/i14Pt6FDhx7yutg9e/Z07K/XmDFjMmbMmJfcf9ZZZ9X92XRfpVJ52f+qQN/mnz++A/2bf/74DuA70DW9/nCSxsbGQ96HdmDby4UXAABAf9Dr4TZp0qT86le/yvbt2w/a/sQTT3TsBwAA6M96PdymTZuWffv2ZdmyZR3b9uzZk3//93/PG9/4xowbN64XZwcAAND7ev0etze+8Y2ZPn16FixYkF//+td57Wtfm5aWljz77LP59Kc/3dvTAwAA6HW9Hm5J8r//9//OuHHjcu+992bbtm05+eST85WvfCVvectbentqAAAAva6IcBs6dGj+9E//NH/6p3/a21PhKGhsbMyHP/zhNDY29vZU6AX++eM70L/554/vAL4D9en1F3ADAADw8nr94SQAAAC8POEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQOOEGAABQuIbengB9z44dO7J48eI88cQTWbNmTV588cV89rOfzaxZsw467ktf+lJaWlo6jZ84cWLuuOOOozVdjrA1a9akpaUlK1euzLPPPptRo0bl9NNPz6WXXpoJEyYcdOzTTz+dm266KatWrUpDQ0MmT56cK664IqNHj+6dyXNEHO53wDmgb/rlL3+Zf/qnf8ratWuzZcuWvOpVr0qlUskll1ySc84556BjnQP6psP9DjgH9B///M//nNtvvz2ve93r8u1vf/ugfatWrco3v/nN/OxnP8txxx2X6dOnZ+7cuRk+fHgvzbZcwo0jbuvWrVm4cGHGjRuXSZMmZeXKlS957JAhQ3L11VcftO24447r6SnSg77zne9k1apVmT59ek455ZS0tbVl6dKlufTSS3PLLbfk5JNPTpJs3Lgx8+fPz4gRIzJ37tzs3LkzixcvzlNPPZVbb701gwcP7uXfhHod7ncgcQ7oi5599tns2LEjzc3NGTNmTHbt2pXly5fns5/9bP78z/88s2fPTuIc0Jcd7ncgcQ7oDzZu3Jg77rgjw4YN67Rv3bp1ufLKK1OpVHLFFVdk48aNWbJkSX71q1/lb/7mb3phtmUTbhxxjY2NWbp0aRobG/Pkk09m3rx5L3nsoEGDMnPmzKM4O3raxRdfnM997nMH/aXr3HPPzUc+8pHceeedufbaa5Mkd9xxR3bt2pXbb78948aNS5I0NTXlqquuyve+972D/sXOseVwvwOJc0BfNHny5EyePPmgbe9///szd+7c3HXXXR3/v+0c0Hcd7ncgcQ7oD26++ea88Y1vzP79+7N169aD9i1YsCAjR47MjTfe2BHsJ554Yr761a/m0Ucfzdve9rbemHKx3OPGETdkyJA0NjYe9vH79u3L9u3be3BGHE1vetObOv2X8gkTJuSkk05KtVrt2LZ8+fJMmTKl4y9sSXLWWWdlwoQJeeCBB47afDnyDvc7cIBzQN83aNCgnHDCCdm2bVvHNueA/uVQ34EDnAP6rp/+9KdZvnx55s+f32nf9u3b85Of/CQzZ848aJX1Xe96V4YNG+Y8cAhW3OhVu3btyqxZs7Jr166MHDkyM2bMyMc//nHXNfcx7e3tef7553PSSSclSTZt2pTnn38+p556aqdjm5qa8sMf/vAoz5Ce9rvfgQOcA/qunTt3Zvfu3dm+fXsefvjh/OhHP8r06dOTOAf0Fy/3HTjAOaDv2rdvX2644Ya8+93vzimnnNJp/1NPPZV9+/Z1Og8MHjw4r3/967Nu3bqjNdVjhnCj1zQ2NuaSSy7JG97whrS3t+dHP/pR7r777vziF7/IDTfckIYGX8++4v7778+mTZvy0Y9+NEnS1taWJIdcmW1sbMwLL7yQPXv2ZMiQIUd1nvSc3/0OJM4Bfd03vvGNLFu2LEkycODAvOMd78iVV16ZxDmgv3i570DiHNDX3XPPPXnuuefy9a9//ZD7X+k88J//+Z89Or9jkf+PoNdcdtllB/15xowZmTBhQm677bYsX748M2bM6KWZcSRVq9V8/etfz+mnn57m5uYkye7du5PkkA8fOPAXtd27d/tLWx9xqO9A4hzQ11100UWZNm1aNm/enAceeCD79u1LrVZL4hzQX7zcdyBxDujLtm7dmn/8x3/Mn/zJn7zkU2Jf6TywZ8+enpziMck9bhTl4osvzsCBA/OTn/ykt6fCEdDW1pZPf/rTOe644/KFL3whgwYNSpIMHTo0SQ76F/gBB07UB47h2PZS34GX4hzQd1QqlZx11llpbm7OV77ylezcuTOf+cxn0t7e7hzQT7zcd+ClOAf0DbfffntGjhyZD3zgAy95zCudB/yHm86EG0UZOnRoRo0alRdeeKG3p0I3bdu2LVdffXW2bduWr33taxkzZkzHvgOXRRy4TOK3tbW1ZdSoUU7YfcDLfQdeinNA3zVt2rQ8+eSTWb9+vXNAP/Xb34GX4hxw7Fu/fn3+9V//NRdeeGE2b96cZ555Js8880z27NmTvXv35plnnskLL7zwiueBw/l3Rn/jUkmKsmPHjmzdutXLV49xu3fvzmc+85msX78+f/d3f9fpgRRjx47N6NGjs3bt2k5j16xZk0mTJh2lmdJTXuk78FKcA/quA5dFbdu2LRMnTnQO6Id++zvwUpwDjn2bN2/O/v37c8MNN+SGG27otP9//I//kQsvvDAf/ehHM2jQoKxduzbnnntux/5arZZ169Z1epANwo1esnv37uzbt6/TU6O+/e1vp729PWeffXYvzYzu2rdvXz7/+c9n9erV+dKXvpQzzjjjkMe9853vTEtLS5577rmOx4E/9thjWb9+fS6++OKjOWWOsMP5DjgH9F3PP/98jj/++IO27d27N/fee2+GDh3aEfHOAX3X4XwHnAP6rte97nX54he/2Gn77bffnh07duSTn/xkXvOa12TEiBE566yzct999+VDH/pQx3fh3nvvzc6dO4XbIQg3esR3v/vdbNu2rWP5++GHH87GjRuTJB/4wAfy4osv5mMf+1jOO++8TJw4MUny6KOP5oc//GHOPvvsTJ06tdfmTvd84xvfyMMPP5wpU6bkxRdfzH333XfQ/gMvWp0zZ05+8IMf5FOf+lQuvPDC7Ny5M4sWLcrJJ5+cWbNm9cbUOUIO5zuwZcsW54A+6mtf+1q2b9+eN7/5zRk7dmza2tpy//33p7W1NZdffnnHX86cA/quw/kOPPPMM84BfdTo0aPz9re/vdP2//N//k+SHLTv0ksvzeWXX5758+dn9uzZ2bhxY5YsWZK3vvWt4v0QBrS/3B2iUKeLL744zz777CH3LVmyJCNGjMgNN9yQ1atXp62tLfv3789rX/vanH/++fngBz/oEcDHsE9+8pP56U9/+pL7H3zwwY7//ctf/jI33XRTVq1alYaGhkyePDmXX355Xv3qVx+FmdJTDuc78OKLLzoH9FHf//7382//9m956qmnsnXr1gwfPjynnnpq3v/+93f6y7hzQN90ON8B54D+55Of/GS2bt2ab3/72wdtf/zxx/PNb34zP/vZzzJ8+PBMnz49l112mXf5HYJwAwAAKJynSgIAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABSuobcnAAA9aeXKlfmzP/uzfPjDH86UKVOyYMGCrF69OgMHDswf/uEf5oorrsiJJ5540JhVq1blX/7lX7J69ers3r07v//7v59zzz03f/zHf5xXvepVBx37jne8I295y1ty7bXXZsGCBfnxj3+c559/Pn//93+fJB0/+61vfWtuv/32PPnkkxkyZEimT5+eyy+/PEOHDs1//Md/5J//+Z/zi1/8IsOGDUtzc3Pmzp2bhgb/mgbgN/wbAYB+4cknn8yiRYvyB3/wB5k9e3bWrVuXhx56KE899VQWLlyYoUOHJkkeeOCBXHfddRk8eHDOPffcjB49Oj/+8Y+zcOHCPProo7nhhhs6jj1g69at+cQnPpFRo0bl3HPPzZ49ezJ8+PDs2LEjSbJmzZp85zvfydve9rbMnj07K1euzN13353t27dnypQp+fKXv5ypU6fm9NNPz3/8x39k0aJFGTZsWD784Q8f7f8zAVCoAe3t7e29PQkA6CkHVtyS5C//8i8zY8aMjn1f/OIXc++993Zs3759ey666KLs2bMnt956a0455ZQkyf79+3Pdddfl//7f/5uPfexj+dCHPtTxGe94xzuSJH/0R3+Uv/iLv8igQYMO+bO/+MUv5u1vf3uSZO/evZk7d26eeuqpjBo1Kl/96lfT1NSUJNmxY0cuueSS7Nu3L3fffbdVNwCSuMcNgH7izW9+80HRlvwmtpLfrIglyYoVK7Jt27b80R/9UUe0JcnAgQPziU98IoMGDcr3vve9Tp89ePDgfPzjHz8o2n7bH/zBH3REW5I0NDRk2rRpaW9vzznnnNMRbUkyfPjwTJ48OS+88EI2btxY/y8MQJ8i3ADoF0499dRO28aOHZsk2bZtW5Jk3bp1SZK3vOUtnY4dN25cXvOa12TDhg0dl0AecOKJJ2b06NEv+bNf//rXd9rW2NiYJJk0adJL7mtra3vJzwSgfxFuAPQLw4cP77TtwArZ/v37kyTbt29Pkrz61a8+5GccCKoDxx1w/PHH1/2zjzvuuJfct3fv3pf9XAD6D+EGAP/PgYjasmXLIfcf2P67sTVgwICenRgA/Z5wA4D/58AljT/96U877XvuuefyX//1X3nNa15zyBU0AOhJwg0A/p+pU6dmxIgR+fd///f88pe/7Nje3t6eW2+9Nfv27cusWbN6cYYA9FeeMQwA/89xxx2Xv/iLv8h1112Xj3/845k+fXpGjx6dxx57LGvXrk1TU1M++MEP9vY0AeiHhBsA/Jbp06fn1a9+de644448+OCD2b17d37/938/H/rQh/LHf/zHnV6+DQBHgxdwAwAAFM49bgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIX7/wAuf3t9TDyJcAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.hist(norm.samples, bins=50, ec=\"k\", fc=\"w\", lw=1.2)\n",
    "ax.set_xlabel(\"norm\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5095c37",
   "metadata": {},
   "source": [
    "We can easily transform the RV through propagation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6655a1de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:23.127400Z",
     "iopub.status.busy": "2024-09-09T18:58:23.126972Z",
     "iopub.status.idle": "2024-09-09T18:58:23.132620Z",
     "shell.execute_reply": "2024-09-09T18:58:23.132082Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "equal-tail: 1.42 -0.07 +0.06, hpd: 1.42 -0.06 +0.07"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_norm = np.log10(norm)\n",
    "log_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "42fcca48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-09T18:58:23.134921Z",
     "iopub.status.busy": "2024-09-09T18:58:23.134527Z",
     "iopub.status.idle": "2024-09-09T18:58:23.309795Z",
     "shell.execute_reply": "2024-09-09T18:58:23.309046Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'log norm')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.hist(log_norm.samples, bins=50, ec=\"k\", fc=\"w\", lw=1.2)\n",
    "ax.set_xlabel(\"log norm\")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "31592084",
   "metadata": {},
   "source": [
    ".. note::\n",
    "    Some operations will destroy the RV by accessing only its NDArray substructure. For example, using an RV with astropy units will return an array of samples with the given units."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
