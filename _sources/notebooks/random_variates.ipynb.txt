{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f3f913b9",
   "metadata": {},
   "source": [
    "# Random Variates\n",
    "\n",
    "When we perform a fit or load and analysis result, the parmeters of our model become distributions in the AnalysisResults object. These are actaully instantiactions of the RandomVaraiates class.\n",
    "\n",
    "While we have covered most of the functionality of RandomVariates in the AnalysisResults section, we want to highlight a few of the details here.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "935b14a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:07.182039Z",
     "iopub.status.busy": "2024-09-23T20:11:07.181841Z",
     "iopub.status.idle": "2024-09-23T20:11:07.241903Z",
     "shell.execute_reply": "2024-09-23T20:11:07.241199Z"
    },
    "lines_to_next_cell": 0
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d4659b0",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d10103b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:07.244190Z",
     "iopub.status.busy": "2024-09-23T20:11:07.243729Z",
     "iopub.status.idle": "2024-09-23T20:11:10.286227Z",
     "shell.execute_reply": "2024-09-23T20:11:10.285566Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fe4479d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:10.288526Z",
     "iopub.status.busy": "2024-09-23T20:11:10.288205Z",
     "iopub.status.idle": "2024-09-23T20:11:10.318716Z",
     "shell.execute_reply": "2024-09-23T20:11:10.318168Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da056c4c",
   "metadata": {},
   "source": [
    "Let's load back our fit of the line + gaussian from the AnalysisResults section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c7d339fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:10.320958Z",
     "iopub.status.busy": "2024-09-23T20:11:10.320539Z",
     "iopub.status.idle": "2024-09-23T20:11:10.387632Z",
     "shell.execute_reply": "2024-09-23T20:11:10.387072Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e392664c",
   "metadata": {},
   "source": [
    "When we display our fit, we can see the **parameter paths** of the model. What if we want specific information on a parameter(s)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5f3fce16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:10.389961Z",
     "iopub.status.busy": "2024-09-23T20:11:10.389498Z",
     "iopub.status.idle": "2024-09-23T20:11:10.426268Z",
     "shell.execute_reply": "2024-09-23T20:11:10.425555Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.97 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(1 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.9 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.493 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.23 +/- 0.10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.97 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (1 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.9 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.493 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.23 +/- 0.10               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140547076187568\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.05</td><td>0.03</td><td>-0.09</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.03</td><td>0.00</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>1.00</td><td>0.11</td><td>-0.27</td></tr>\n",
       "<tr><td>0.03</td><td>-0.03</td><td>0.11</td><td>1.00</td><td>-0.07</td></tr>\n",
       "<tr><td>-0.09</td><td>0.00</td><td>-0.27</td><td>-0.07</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.05  0.03 -0.09\n",
       "-0.85  1.00 -0.00 -0.03  0.00\n",
       "-0.05 -0.00  1.00  0.11 -0.27\n",
       " 0.03 -0.03  0.11  1.00 -0.07\n",
       "-0.09  0.00 -0.27 -0.07  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>22.499997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.499997</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         22.499997\n",
       "total            22.499997"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>56.363631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>64.560110</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             56.363631\n",
       "BIC             64.560110"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee32e9df",
   "metadata": {},
   "source": [
    "Let's take a look at the normalization of the gaussian. To access the parameter, we take the parameter path, and we want to get the variates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "44cb7720",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:10.428399Z",
     "iopub.status.busy": "2024-09-23T20:11:10.428031Z",
     "iopub.status.idle": "2024-09-23T20:11:10.431317Z",
     "shell.execute_reply": "2024-09-23T20:11:10.430648Z"
    }
   },
   "outputs": [],
   "source": [
    "norm = ar.get_variates(\"fake.spectrum.main.composite.F_2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a8a919e",
   "metadata": {},
   "source": [
    "Now, norm is a RandomVariate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bb468651",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:10.433379Z",
     "iopub.status.busy": "2024-09-23T20:11:10.432931Z",
     "iopub.status.idle": "2024-09-23T20:11:10.436966Z",
     "shell.execute_reply": "2024-09-23T20:11:10.436437Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "threeML.random_variates.RandomVariates"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98f73205",
   "metadata": {},
   "source": [
    "This is essentially a wrapper around numpy NDArray with a few added properties. It is an array of samples. In the MLE case, they are samples from the covariance matrix (this is not at all a marginal distribution, but the parameter \"knows\" about the entire fit, i.e., it is *not* a profile) and in the Bayesian case, these are samples from the posterior (this is a marginal).\n",
    "\n",
    "The output representation for an RV are its 68% equal-tail and HPD uncertainties."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fdffb862",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:10.438925Z",
     "iopub.status.busy": "2024-09-23T20:11:10.438555Z",
     "iopub.status.idle": "2024-09-23T20:11:10.443574Z",
     "shell.execute_reply": "2024-09-23T20:11:10.442939Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "equal-tail: (2.9 +/- 0.4) x 10, hpd: (2.9 +/- 0.4) x 10"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e669e5b",
   "metadata": {},
   "source": [
    "We can access these directly, and to any desired confidence level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5e44bb48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:10.445729Z",
     "iopub.status.busy": "2024-09-23T20:11:10.445370Z",
     "iopub.status.idle": "2024-09-23T20:11:10.450117Z",
     "shell.execute_reply": "2024-09-23T20:11:10.449464Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(21.308282664920487, 36.361202217177116)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.equal_tail_interval(cl=0.95)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8179a338",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:10.452214Z",
     "iopub.status.busy": "2024-09-23T20:11:10.451834Z",
     "iopub.status.idle": "2024-09-23T20:11:10.456004Z",
     "shell.execute_reply": "2024-09-23T20:11:10.455453Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25.75979124133418, 30.887302549046883)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.highest_posterior_density_interval(cl=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "beb62994",
   "metadata": {},
   "source": [
    "As stated above, the RV is made from samples. We can histogram them to show this explicitly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "77a9f50a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:10.457875Z",
     "iopub.status.busy": "2024-09-23T20:11:10.457662Z",
     "iopub.status.idle": "2024-09-23T20:11:10.639489Z",
     "shell.execute_reply": "2024-09-23T20:11:10.638849Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'norm')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA24AAAMQCAYAAABfeTbWAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAA/xklEQVR4nO3df5RdZWHv/0+SYWJCkgYnIVWTOfyIwgii7UK5gagJAZxUzRUFrnRl1V8QsBAr3Bb1LrAWUavFWiiCDNjGFkzCXS4gXa0DrF4MBKooK5as8MMocgYbIMmAgfw+Seb7h818jRMgc2Ym82Tm9frL2Xs/Z57jyRzmPc/e+4zo6urqCgAAAMUaOdgTAAAA4JUJNwAAgMIJNwAAgMIJNwAAgMIJNwAAgMIJNwAAgMIJNwAAgMIJNwAAgMIN23Dbtm1bnnjiiWzbtm2wpwIAAPCKhm24VavVnH/++alWq4M9FQAAgFc0bMMNAADgYCHcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACtcw2BMAgL5asGBBOjo66h7f3Nyctra2fpwRAPQvK24AHPQ6OjpSrVbrGlutVvsUfQBwIFhxA2BIqFQqaW9v7/W41tbWAZgNAPQvK24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFa+jNwb/85S/zj//4j3niiSfy/PPP5zWveU0qlUrOPffcnHLKKXsd+9RTT+W6667LqlWr0tDQkBkzZuTiiy/OxIkT9zpu9+7dWbJkSe644448//zzmTp1aubPn5/TTjutz08OAABgKOhVuD377LPZsmVLWltbM2nSpGzbti3Lly/P5z73ufz5n/955s2blyRZt25dFi5cmHHjxuX888/P1q1bs2TJkjz55JO58cYbc8ghh3Q/5k033ZRbb70173//+3PsscdmxYoVufLKKzNixIjMmTOnf58tAADAQahX4TZjxozMmDFjr20f/OAHc/755+e2227rDrdbbrkl27Zty80335wpU6YkSVpaWnLppZfm+9//fvdx69evz9KlS3PmmWfmkksuSZK8733vy8KFC3P99ddn1qxZGTVqVJ+fJAAAwMGsz9e4jRo1Kocffng2bdrUvW358uU5+eSTu6MtSU488cRMmzYt9957b/e2FStWZOfOnTnzzDO7t40YMSIf+MAHsn79+qxevbqv0wMAADjo1RVuW7duza9//ev813/9V2677bb86Ec/yh/+4R8m+c0q2gsvvJBjjjmmx7iWlpasWbOm++s1a9ZkzJgxqVQqPY7bsx8AAGC469Wpknt885vfzLJly5IkI0eOzLve9a7uUx07OzuTJE1NTT3GNTU15cUXX8yOHTvS2NiYzs7OHHbYYRkxYkSP45Jkw4YN9Uyv24YNG7rn87uq1WqfHhsAAOBAqSvczj777MyaNSsbNmzIvffem127dqVWqyVJtm/fniR73YBkj8bGxu5jGhsbs3379lc9ri+WLVuWRYsW9ekxAAAABltd4VapVLpPb2xtbc2ll16az372s7nxxhszevToJOkOud+2Y8eOJOk+ZvTo0ft1XL3mzZvX42MK9qhWq7nqqqv69PgAAAAHQl3h9rtmzZqVq6++Ok8//XT3aY77OkWxs7MzEyZM6F5Ra2pqysqVK9PV1bXX6ZJ7xk6aNKlP85o0aVKfHwMAAGCw9fmuksn/f0rjpk2bMnny5EycODFPPPFEj+Mee+yxTJ8+vfvr6dOnZ9u2bT2uN3v00Ue79wMAAAx3vQq3F154oce2nTt35q677sro0aNzxBFHJEne/e5358EHH8xzzz3XfdzDDz+cp59+OrNnz+7eNnPmzDQ0NOT222/v3tbV1ZU777wzkydPzvHHH9/b5wMAADDk9OpUyauvvjqbN2/OW9/61kyePDmdnZ2555570tHRkYsuuihjx45NksyfPz8/+MEP8ulPfzpnnXVWtm7dmsWLF+eoo47K3Llzux/v8MMPz9lnn53Fixdn586daWlpyf33359HHnkkV1xxhQ/fBmDArV27NrVaLa2trXWNb25uTltbWz/PCgD21qtwO/XUU/Ov//qvufPOO7Nx48aMHTs2xxxzTC688MLMnDmz+7gpU6bk2muvzXXXXZcbb7wxDQ0NmTFjRi666KLu69v2uOCCCzJ+/PgsW7Ys7e3tmTp1ai6//PKcfvrp/fMMAeAV7OsmWfvLR8sAcKD0KtzmzJmTOXPm7NexRx55ZL7+9a+/6nEjR47M/PnzM3/+/N5MBQD6TaVSSXt7e6/H1btKBwC91S83JwEAAGDgCDcAAIDC9cvnuAEA+2/BggXp6Oioe7wbogAMP1bcAOAA6+joqPvGJtVqtU/RB8DByYobAAwCN0QBoDesuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABSuYbAnAAAHq7Vr16ZWq6W1tbVX46rVaiqVygDNCoChyIobANSpVqsd0HEADF9W3ACgDyqVStrb23s1pqWlZYBmA8BQZcUNAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcMINAACgcA2DPQEAYP+tXbs2tVotra2tdY1vbm5OW1tbP88KgIEm3ADgIFKr1eoeW61W+3EmABxIwg0ADjKVSiXt7e29HlfvKh0Ag881bgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIXzOW4AFGPBggXp6Ojo9bhqtZpKpTIAMwKAMlhxA6AYHR0dqVarvR5Xq9UGYDYAUA4rbgAUpVKppL29vVdjWlpaBmg2AFAGK24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACFE24AAACF8wHcADBMrF27NrVaLa2trb0e29zcnLa2tgGYFQD7Q7gBwDBRq9XqGletVvt5JgD0lnADgGGkUqmkvb29V2PqWaEDoH+5xg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwwg0AAKBwDb05+LHHHkt7e3tWrlyZZ599NhMmTMhxxx2X8847L9OmTes+7stf/nLa29t7jG9ubs4tt9yy17bdu3dnyZIlueOOO/L8889n6tSpmT9/fk477bQ6nxIAg2nBggXp6Oioa2y1Wk2lUunnGQHAwa9X4fbd7343q1atyuzZs3P00Uens7Mzt99+e84777zccMMNOeqoo7qPbWxszGWXXbbX+EMPPbTHY95000259dZb8/73vz/HHntsVqxYkSuvvDIjRozInDlz6nxaAAyWjo6OugOsVqsNwIwA4ODXq3A755xz8vnPfz6HHHJI97ZTTz01H/vYx3Lrrbfmiiuu6N4+atSonHHGGa/4eOvXr8/SpUtz5pln5pJLLkmSvO9978vChQtz/fXXZ9asWRk1alRvpghAASqVyj7PvHg1LS0tAzAbADj49eoat7e85S17RVuSTJs2LUcccUSq1WqP43ft2pXNmze/7OOtWLEiO3fuzJlnntm9bcSIEfnABz6Q9evXZ/Xq1b2ZHgAAwJDUqxW3fenq6soLL7yQI444Yq/t27Zty9y5c7Nt27aMHz8+c+bMyYUXXpixY8d2H7NmzZqMGTOmx+k0e/7iumbNmpxwwgl9nSIAAMBBrc/hds8992T9+vX5+Mc/3r2tqakp5557bt70pjelq6srP/rRj3LHHXfkF7/4Ra655po0NPzm23Z2duawww7LiBEj9nrMpqamJMmGDRv6NLcNGzaks7Nzn/v2tUIIAABQoj6FW7VazTe+8Y0cd9xxaW1t7d5+wQUX7HXcnDlzMm3atNx0001Zvnx5901Htm/f3uPUy+Q3NzbZs78vli1blkWLFvXpMQAAAAZb3eHW2dmZz3zmMzn00EPzxS9+8VVvInLOOefk29/+dn7yk590h9vo0aP3eQexHTt2dO/vi3nz5uWUU07Z575qtZqrrrqqT48PAABwINQVbps2bcpll12WTZs25brrrsukSZNedczo0aMzYcKEvPjii93bmpqasnLlynR1de11uuSe0xv353FfyaRJk/r8GAAAAIOtV3eVTH5z+uJnP/vZPP300/nrv/7rHjcleTlbtmzJxo0bM3HixO5t06dPz7Zt23pcb/boo4927wcAABjuehVu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AMBwNiDhtn379mzZsqXH9u985zvp6urKSSed1L1t5syZaWhoyO233969raurK3feeWcmT56c448/fiCmCAAAcNCo61TJ733ve9m0aVP36YwPPPBA1q1blyT50Ic+lJdeeimf+MQnctppp6W5uTlJ8tBDD+WHP/xhTjrppMycObP7sQ4//PCcffbZWbx4cXbu3JmWlpbcf//9eeSRR3LFFVf48G0AAGDYqyvcli5dmmeffbb76/vuuy/33XdfkuSMM87IuHHjcvLJJ+fHP/5x2tvbs3v37rzhDW/IggUL8uEPfzgjR+690HfBBRdk/PjxWbZsWdrb2zN16tRcfvnlOf300/vw1AAAAIaGusLttttue9VjLr/88v1+vJEjR2b+/PmZP39+PdMBAAAY0g7ozUkAAADovQP6cQAAw9WCBQvS0dFR19hqtZpKpdLPMwIADiZW3AAOgI6Ojh4fe7K/arVaP88GADjYWHEDOEAqlUra29t7Pa6lpWUAZgMAHEysuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABSuYbAnAHAwWbBgQTo6Ono9rlqtplKpDMCMAIDhwIobQC90dHSkWq32elytVhuA2QAAw4UVN4BeqlQqaW9v79WYlpaWAZoNADAcWHEDAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAoXMNgTwAA4GC3du3a1Gq1tLa21jW+ubk5bW1t/TwrYCgRbgAAfVSr1eoeW61W+3EmwFAl3AAA+kGlUkl7e3uvx51wwgmpVqtW64BXJNwAAAaR1Tpgfwg3AIBBVu9qXb2rdMDBx10lAQAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACifcAAAACtfQ2wFbtmzJkiVL8uijj+axxx7LSy+9lM997nOZO3duj2OfeuqpXHfddVm1alUaGhoyY8aMXHzxxZk4ceJex+3evTtLlizJHXfckeeffz5Tp07N/Pnzc9ppp9X9xAAAAIaKXofbxo0bs2jRokyZMiXTp0/PypUr93ncunXrsnDhwowbNy7nn39+tm7dmiVLluTJJ5/MjTfemEMOOaT72Jtuuim33npr3v/+9+fYY4/NihUrcuWVV2bEiBGZM2dO/c8OAABgCOh1uDU1NeX2229PU1NTHn/88SxYsGCfx91yyy3Ztm1bbr755kyZMiVJ0tLSkksvvTTf//73M2/evCTJ+vXrs3Tp0px55pm55JJLkiTve9/7snDhwlx//fWZNWtWRo0aVe/zAwAAOOj1+hq3xsbGNDU1vepxy5cvz8knn9wdbUly4oknZtq0abn33nu7t61YsSI7d+7MmWee2b1txIgR+cAHPpD169dn9erVvZ0iAADAkDIgNydZv359XnjhhRxzzDE99rW0tGTNmjXdX69ZsyZjxoxJpVLpcdye/QAAAMNZr0+V3B+dnZ1Jss+Vuaamprz44ovZsWNHGhsb09nZmcMOOywjRozocVySbNiwoe55bNiwoXsuv6tardb9uAAAAAfSgITb9u3bk2SvG5Ds0djY2H1MY2Njtm/f/qrH1WvZsmVZtGhR3eMBAABKMCDhNnr06CRJrVbrsW/Hjh17HTN69Oj9Oq4e8+bNyymnnLLPfdVqNVdddVXdjw0AAHCgDEi47TnNcV+nKXZ2dmbChAndK2pNTU1ZuXJlurq69jpdcs/YSZMm1T2PSZMm9Wk8AABACQbk5iSTJ0/OxIkT88QTT/TY99hjj2X69OndX0+fPj3btm3rcc3Zo48+2r0fAABgOBuQcEuSd7/73XnwwQfz3HPPdW97+OGH8/TTT2f27Nnd22bOnJmGhobcfvvt3du6urpy5513ZvLkyTn++OMHaooAAAAHhbpOlfze976X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z3+P61mhg1djxQ0AAKBwVtxggLhODQCA/mLFDQaI69QAAOgvVtxgALlODQCA/mDFDQAAoHDCDQAAoHDCDQAAoHDCDQAAoHDCDQAAoHDCDQAAoHDCDQAAoHDCDQAAoHA+gBtexYIFC9LR0dHrcdVqNZVKZQBmBADQU72/syRJc3Nz2tra+nlG9CcrbvAqOjo6Uq1Wez2uVqsNwGwAAPat3t9ZqtVq3cHHgWPFDfZDpVJJe3t7r8a0tLQM0GwAAPatnt9ZWltbB2g29CcrbgAAAIWz4gYAAP1o7dq1qdVqda9kud6MfRFuAADQj/pynXs916gxPAg3AADoZ/Vca5a43oyX5xo3AACAwllxAwCAYcw1eQcH4QYAAMOYa/IODkWE244dO/Ltb387d999d1566aUcffTROe+88/L2t799sKfGy1iwYEHdH9S4du3aJMnrX//6usbX81edvsy3Wq2mUqnUNRYAoDf6svrVl99Z6r0m74QTTki1WrVadwAUcY3bV77yldx22205/fTT86lPfSojR47MZZddlkceeWSwp8bL6OjoqPsvLFu2bKn7LzvVarWuAOvLfPvyVygAgN7oy+8dg/E7S19X6+r9w/pwNOgrbo8++mj+/d//PZ/85Cdz7rnnJkne85735KMf/WhuuOGG3HDDDYM8wwOjLytCSf1/raj3++75i049f5lpaWk54H/V6et8AQAOlIPtd5YD/XvdYJy9VYJBX3Fbvnx5Ro0alXnz5nVvGz16dN773vdm9erVee655wZxdgdOX1aE+vLXinq/72CtQtX7fa2aAQCUpd7fzwbj7K0SjOjq6uoazAlceumlWb9+ff75n/95r+0PP/xwLrnkknzlK1/JKaecUtdjb9iwIZ2dnfvc9/Of/zxf/epXc/nllxdx/dLChQvzzDPP5HWve12vxz7zzDNJckDHPv3002loaKjrew7G2OHyPfsy1nwHdqz5DuxY8x3YseZb5vfsy1jzHdix5juwY/vyPff8vv33f//3vR470CqVSl7zmte87P5BD7ePfOQjOeyww/J3f/d3e21/6qmn8id/8if53//7f+d//s//Wddj/8M//EMWLVrU90kCAAAMoJtuuinHHHPMy+4f9Gvctm/fnkMOOaTH9sbGxu799Zo3b97Lrta99NJLqVaredOb3tT9vYayarWaq666qpgVRg4srz/+DQxvXn/8GxjevP4Hh1d7bQY93EaPHr3Pc1R37NjRvb9ekyZNyqRJk152/4knnlj3Yx+sKpXKK5Y8Q5vXH/8GhjevP/4NDG9e/4PboN+cpKmpaZ/Xoe3Z9krhBQAAMBwMerhNnz49v/rVr7J58+a9tj/66KPd+wEAAIazQQ+3WbNmZdeuXVm2bFn3th07duTf/u3f8uY3vzlTpkwZxNkBAAAMvkG/xu3Nb35zZs+enba2tvz617/OG97whrS3t+fZZ5/NZz7zmcGeHgAAwKAb9HBLkv/zf/5PpkyZkrvuuiubNm3KUUcdla9+9at529veNthTAwAAGHRFhNvo0aPzp3/6p/nTP/3TwZ7KkNXU1JSPfvSjaWpqGuypMAi8/vg3MLx5/fFvYHjz+g8Ng/4B3AAAALyyQb85CQAAAK9MuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABROuAEAABSuYbAnQP/YsmVLlixZkkcffTSPPfZYXnrppXzuc5/L3Llz9zruy1/+ctrb23uMb25uzi233HKgpks/e+yxx9Le3p6VK1fm2WefzYQJE3LcccflvPPOy7Rp0/Y69qmnnsp1112XVatWpaGhITNmzMjFF1+ciRMnDs7k6bP9ff39/A9dv/zlL/OP//iPeeKJJ/L888/nNa95TSqVSs4999yccsopex3rPWDo2d/X33vA8PFP//RPufnmm3PkkUfmO9/5zl77Vq1alW9961v52c9+lkMPPTSzZ8/O+eefn7Fjxw7SbNlfwm2I2LhxYxYtWpQpU6Zk+vTpWbly5cse29jYmMsuu2yvbYceeuhAT5EB9N3vfjerVq3K7Nmzc/TRR6ezszO33357zjvvvNxwww056qijkiTr1q3LwoULM27cuJx//vnZunVrlixZkieffDI33nhjDjnkkEF+JtRjf1//xM//UPXss89my5YtaW1tzaRJk7Jt27YsX748n/vc5/Lnf/7nmTdvXhLvAUPV/r7+ifeA4WDdunW55ZZbMmbMmB771qxZk0suuSSVSiUXX3xx1q1bl6VLl+ZXv/pV/uZv/mYQZktvCLchoqmpKbfffnuampry+OOPZ8GCBS977KhRo3LGGWccwNkx0M4555x8/vOf3+uXrlNPPTUf+9jHcuutt+aKK65Iktxyyy3Ztm1bbr755kyZMiVJ0tLSkksvvTTf//739/qPOweP/X39Ez//Q9WMGTMyY8aMvbZ98IMfzPnnn5/bbrut+2fbe8DQtL+vf+I9YDi4/vrr8+Y3vzm7d+/Oxo0b99rX1taW8ePH59prr+0O9te97nX52te+loceeijveMc7BmPK7CfXuA0RjY2NaWpq2u/jd+3alc2bNw/gjDiQ3vKWt/T4S/m0adNyxBFHpFqtdm9bvnx5Tj755O5f2JLkxBNPzLRp03LvvfcesPnSv/b39d/Dz//wMGrUqBx++OHZtGlT9zbvAcPHvl7/PbwHDF0//elPs3z58ixcuLDHvs2bN+cnP/lJzjjjjL1WWd/znvdkzJgx3gMOAlbchqFt27Zl7ty52bZtW8aPH585c+bkwgsvdG7zENPV1ZUXXnghRxxxRJJk/fr1eeGFF3LMMcf0OLalpSU//OEPD/AMGUi/+/rv4ed/aNu6dWu2b9+ezZs354EHHsiPfvSjzJ49O4n3gOHglV7/PbwHDF27du3KNddck/e+9705+uije+x/8skns2vXrh7vAYccckje+MY3Zs2aNQdqqtRJuA0zTU1NOffcc/OmN70pXV1d+dGPfpQ77rgjv/jFL3LNNdekocE/iaHinnvuyfr16/Pxj388SdLZ2Zkk+1yZbWpqyosvvpgdO3aksbHxgM6TgfG7r3/i5384+OY3v5lly5YlSUaOHJl3vetdueSSS5J4DxgOXun1T7wHDHV33nlnnnvuuXzjG9/Y5/5Xew/4z//8zwGdH33nJ3SYueCCC/b6es6cOZk2bVpuuummLF++PHPmzBmkmdGfqtVqvvGNb+S4445La2trkmT79u1Jss+bD+z5RW379u1+aRsC9vX6J37+h4Ozzz47s2bNyoYNG3Lvvfdm165dqdVqSbwHDAev9Pon3gOGso0bN+Yf/uEf8id/8icve4fYV3sP2LFjx0BOkX7gGjdyzjnnZOTIkfnJT34y2FOhH3R2duYzn/lMDj300Hzxi1/MqFGjkiSjR49Okr3+I77HnjfrPcdw8Hq51//l+PkfWiqVSk488cS0trbmq1/9arZu3ZrPfvaz6erq8h4wDLzS6/9yvAcMDTfffHPGjx+fD33oQy97zKu9B/ijTfmEGxk9enQmTJiQF198cbCnQh9t2rQpl112WTZt2pSrr746kyZN6t6359SIPadK/LbOzs5MmDDBm/ZB7pVe/5fj539omzVrVh5//PE8/fTT3gOGod9+/V+O94CD39NPP51/+Zd/yVlnnZUNGzbkmWeeyTPPPJMdO3Zk586deeaZZ/Liiy++6nvA/vw3g8HlVEmyZcuWbNy40YevHuS2b9+ez372s3n66afzt3/7tz1uSjF58uRMnDgxTzzxRI+xjz32WKZPn36AZspAeLXX/+X4+R/a9pwatWnTpjQ3N3sPGGZ++/V/Od4DDn4bNmzI7t27c8011+Saa67psf9//a//lbPOOisf//jHM2rUqDzxxBM59dRTu/fXarWsWbOmx41sKI9wG0a2b9+eXbt29bhz1He+8510dXXlpJNOGqSZ0Ve7du3KF77whaxevTpf/vKXc/zxx+/zuHe/+91pb2/Pc88913078IcffjhPP/10zjnnnAM5ZfrR/rz+fv6HthdeeCGHHXbYXtt27tyZu+66K6NHj+4Oee8BQ9P+vP7eA4auI488Ml/60pd6bL/55puzZcuWfOpTn8rrX//6jBs3LieeeGLuvvvufOQjH+n+t3DXXXdl69atwu0gINyGkO9973vZtGlT9xL4Aw88kHXr1iVJPvShD+Wll17KJz7xiZx22mlpbm5Okjz00EP54Q9/mJNOOikzZ84ctLnTN9/85jfzwAMP5OSTT85LL72Uu+++e6/9ez5sdf78+fnBD36QT3/60znrrLOydevWLF68OEcddVTmzp07GFOnH+zP6//888/7+R/Crr766mzevDlvfetbM3ny5HR2duaee+5JR0dHLrroou5f0LwHDE378/o/88wz3gOGqIkTJ+ad73xnj+3/9//+3yTZa995552Xiy66KAsXLsy8efOybt26LF26NG9/+9vF+0FgRNcrXbHKQeWcc87Js88+u899S5cuzbhx43LNNddk9erV6ezszO7du/OGN7whp59+ej784Q+7DfBB7FOf+lR++tOfvuz+++67r/t///KXv8x1112XVatWpaGhITNmzMhFF12U1772tQdgpgyE/Xn9X3rpJT//Q9i///u/51//9V/z5JNPZuPGjRk7dmyOOeaYfPCDH+zxC7n3gKFnf15/7wHDz6c+9als3Lgx3/nOd/ba/sgjj+Rb3/pWfvazn2Xs2LGZPXt2LrjgAp/ldxAQbgAAAIVzV0kAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCCTcAAIDCNQz2BABgIK1cuTJ/9md/lo9+9KM5+eST09bWltWrV2fkyJH5wz/8w1x88cV53etet9eYVatW5Z//+Z+zevXqbN++Pb//+7+fU089NX/8x3+c17zmNXsd+653vStve9vbcsUVV6StrS0//vGP88ILL+Tv/u7vkqT7e7/97W/PzTffnMcffzyNjY2ZPXt2LrrooowePTr/8R//kX/6p3/KL37xi4wZMyatra05//zz09DgP9MA/Ib/IgAwLDz++ONZvHhx/uAP/iDz5s3LmjVrcv/99+fJJ5/MokWLMnr06CTJvffemyuvvDKHHHJITj311EycODE//vGPs2jRojz00EO55ppruo/dY+PGjfnkJz+ZCRMm5NRTT82OHTsyduzYbNmyJUny2GOP5bvf/W7e8Y53ZN68eVm5cmXuuOOObN68OSeffHK+8pWvZObMmTnuuOPyH//xH1m8eHHGjBmTj370owf6/yYACjWiq6ura7AnAQADZc+KW5L85V/+ZebMmdO970tf+lLuuuuu7u2bN2/O2WefnR07duTGG2/M0UcfnSTZvXt3rrzyyvy///f/8olPfCIf+chHuh/jXe96V5Lkj/7oj/IXf/EXGTVq1D6/95e+9KW8853vTJLs3Lkz559/fp588slMmDAhX/va19LS0pIk2bJlS84999zs2rUrd9xxh1U3AJK4xg2AYeKtb33rXtGW/Ca2kt+siCXJihUrsmnTpvzRH/1Rd7QlyciRI/PJT34yo0aNyve///0ej33IIYfkwgsv3Cvaftsf/MEfdEdbkjQ0NGTWrFnp6urKKaec0h1tSTJ27NjMmDEjL774YtatW1f/EwZgSBFuAAwLxxxzTI9tkydPTpJs2rQpSbJmzZokydve9rYex06ZMiWvf/3rs3bt2u5TIPd43etel4kTJ77s937jG9/YY1tTU1OSZPr06S+7r7Oz82UfE4DhRbgBMCyMHTu2x7Y9K2S7d+9OkmzevDlJ8trXvnafj7EnqPYct8dhhx1W9/c+9NBDX3bfzp07X/FxARg+hBsA/Lc9EfX888/vc/+e7b8bWyNGjBjYiQEw7Ak3APhve05p/OlPf9pj33PPPZf/+q//yutf//p9rqABwEASbgDw32bOnJlx48bl3/7t3/LLX/6ye3tXV1duvPHG7Nq1K3Pnzh3EGQIwXLnHMAD8t0MPPTR/8Rd/kSuvvDIXXnhhZs+enYkTJ+bhhx/OE088kZaWlnz4wx8e7GkCMAwJNwD4LbNnz85rX/va3HLLLbnvvvuyffv2/P7v/34+8pGP5I//+I97fPg2ABwIPoAbAACgcK5xAwAAKJxwAwAAKJxwAwAAKJxwAwAAKJxwAwAAKJxwAwAAKJxwAwAAKJxwAwAAKJxwAwAAKJxwAwAAKJxwAwAAKJxwAwAAKJxwAwAAKNz/B3J/SpwbpvYGAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.hist(norm.samples, bins=50, ec=\"k\", fc=\"w\", lw=1.2)\n",
    "ax.set_xlabel(\"norm\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45c0487b",
   "metadata": {},
   "source": [
    "We can easily transform the RV through propagation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d773a18b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:10.641515Z",
     "iopub.status.busy": "2024-09-23T20:11:10.641302Z",
     "iopub.status.idle": "2024-09-23T20:11:10.646890Z",
     "shell.execute_reply": "2024-09-23T20:11:10.646207Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "equal-tail: 1.46 +/- 0.06, hpd: 1.46 -0.05 +0.06"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_norm = np.log10(norm)\n",
    "log_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8c9cf3f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-23T20:11:10.648650Z",
     "iopub.status.busy": "2024-09-23T20:11:10.648470Z",
     "iopub.status.idle": "2024-09-23T20:11:10.826000Z",
     "shell.execute_reply": "2024-09-23T20:11:10.825266Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'log norm')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.hist(log_norm.samples, bins=50, ec=\"k\", fc=\"w\", lw=1.2)\n",
    "ax.set_xlabel(\"log norm\")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "e857eed5",
   "metadata": {},
   "source": [
    ".. note::\n",
    "    Some operations will destroy the RV by accessing only its NDArray substructure. For example, using an RV with astropy units will return an array of samples with the given units."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.20"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
