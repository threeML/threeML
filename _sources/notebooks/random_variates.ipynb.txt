{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "73f4232b",
   "metadata": {},
   "source": [
    "# Random Variates\n",
    "\n",
    "When we perform a fit or load and analysis result, the parmeters of our model become distributions in the AnalysisResults object. These are actaully instantiactions of the RandomVaraiates class.\n",
    "\n",
    "While we have covered most of the functionality of RandomVariates in the AnalysisResults section, we want to highlight a few of the details here.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "72d2b23e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:11.062896Z",
     "iopub.status.busy": "2024-08-13T22:15:11.062698Z",
     "iopub.status.idle": "2024-08-13T22:15:11.120993Z",
     "shell.execute_reply": "2024-08-13T22:15:11.120290Z"
    },
    "lines_to_next_cell": 0
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbd47a51",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ba3aad40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:11.123471Z",
     "iopub.status.busy": "2024-08-13T22:15:11.123230Z",
     "iopub.status.idle": "2024-08-13T22:15:14.083108Z",
     "shell.execute_reply": "2024-08-13T22:15:14.082446Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "caa04944",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:14.086031Z",
     "iopub.status.busy": "2024-08-13T22:15:14.085483Z",
     "iopub.status.idle": "2024-08-13T22:15:14.115521Z",
     "shell.execute_reply": "2024-08-13T22:15:14.114895Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41a083d3",
   "metadata": {},
   "source": [
    "Let's load back our fit of the line + gaussian from the AnalysisResults section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ba6a4eb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:14.118077Z",
     "iopub.status.busy": "2024-08-13T22:15:14.117691Z",
     "iopub.status.idle": "2024-08-13T22:15:14.183700Z",
     "shell.execute_reply": "2024-08-13T22:15:14.183114Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed383154",
   "metadata": {},
   "source": [
    "When we display our fit, we can see the **parameter paths** of the model. What if we want specific information on a parameter(s)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f6cd99e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:14.185951Z",
     "iopub.status.busy": "2024-08-13T22:15:14.185759Z",
     "iopub.status.idle": "2024-08-13T22:15:14.220810Z",
     "shell.execute_reply": "2024-08-13T22:15:14.220231Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.08 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-3 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.7 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.503 +/- 0.014) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.15 +/- 0.12</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.08 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-3 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.7 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.503 +/- 0.014) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.15 +/- 0.12               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139870459852352\">\n",
       "<tr><td>1.00</td><td>-0.84</td><td>-0.04</td><td>0.01</td><td>-0.10</td></tr>\n",
       "<tr><td>-0.84</td><td>1.00</td><td>0.00</td><td>-0.03</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>0.00</td><td>1.00</td><td>-0.06</td><td>-0.26</td></tr>\n",
       "<tr><td>0.01</td><td>-0.03</td><td>-0.06</td><td>1.00</td><td>0.08</td></tr>\n",
       "<tr><td>-0.10</td><td>-0.00</td><td>-0.26</td><td>0.08</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.84 -0.04  0.01 -0.10\n",
       "-0.84  1.00  0.00 -0.03 -0.00\n",
       "-0.04  0.00  1.00 -0.06 -0.26\n",
       " 0.01 -0.03 -0.06  1.00  0.08\n",
       "-0.10 -0.00 -0.26  0.08  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>16.457396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>16.457396</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         16.457396\n",
       "total            16.457396"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>44.278428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>52.474907</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             44.278428\n",
       "BIC             52.474907"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daf62c8f",
   "metadata": {},
   "source": [
    "Let's take a look at the normalization of the gaussian. To access the parameter, we take the parameter path, and we want to get the variates:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "920aebad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:14.223075Z",
     "iopub.status.busy": "2024-08-13T22:15:14.222690Z",
     "iopub.status.idle": "2024-08-13T22:15:14.225708Z",
     "shell.execute_reply": "2024-08-13T22:15:14.225106Z"
    }
   },
   "outputs": [],
   "source": [
    "norm = ar.get_variates(\"fake.spectrum.main.composite.F_2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75d5b728",
   "metadata": {},
   "source": [
    "Now, norm is a RandomVariate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "84d8c2be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:14.228025Z",
     "iopub.status.busy": "2024-08-13T22:15:14.227652Z",
     "iopub.status.idle": "2024-08-13T22:15:14.231512Z",
     "shell.execute_reply": "2024-08-13T22:15:14.230883Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "threeML.random_variates.RandomVariates"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59c5f2e0",
   "metadata": {},
   "source": [
    "This is essentially a wrapper around numpy NDArray with a few added properties. It is an array of samples. In the MLE case, they are samples from the covariance matrix (this is not at all a marginal distribution, but the parameter \"knows\" about the entire fit, i.e., it is *not* a profile) and in the Bayesian case, these are samples from the posterior (this is a marginal).\n",
    "\n",
    "The output representation for an RV are its 68% equal-tail and HPD uncertainties."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "24d0a214",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:14.233810Z",
     "iopub.status.busy": "2024-08-13T22:15:14.233434Z",
     "iopub.status.idle": "2024-08-13T22:15:14.238128Z",
     "shell.execute_reply": "2024-08-13T22:15:14.237534Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "equal-tail: (2.7 +/- 0.4) x 10, hpd: (2.7 +/- 0.4) x 10"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "061e3919",
   "metadata": {},
   "source": [
    "We can access these directly, and to any desired confidence level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "594a9b84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:14.240513Z",
     "iopub.status.busy": "2024-08-13T22:15:14.240119Z",
     "iopub.status.idle": "2024-08-13T22:15:14.244541Z",
     "shell.execute_reply": "2024-08-13T22:15:14.243897Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(19.759038027590574, 35.1850217218721)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.equal_tail_interval(cl=0.95)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a72bb348",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:14.246987Z",
     "iopub.status.busy": "2024-08-13T22:15:14.246621Z",
     "iopub.status.idle": "2024-08-13T22:15:14.250943Z",
     "shell.execute_reply": "2024-08-13T22:15:14.250345Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(24.968048669176703, 30.259599917080855)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm.highest_posterior_density_interval(cl=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb0ff602",
   "metadata": {},
   "source": [
    "As stated above, the RV is made from samples. We can histogram them to show this explicitly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f76d97fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:14.253257Z",
     "iopub.status.busy": "2024-08-13T22:15:14.252892Z",
     "iopub.status.idle": "2024-08-13T22:15:14.430704Z",
     "shell.execute_reply": "2024-08-13T22:15:14.430069Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'norm')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA24AAAMQCAYAAABfeTbWAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAA/tklEQVR4nO3dfZRdZWHv8V+SIZGQ5AYnIVWTObxEYQTRdqHcQNSEAA5Vc0WBK11Z9Q0CFmKF26LeBdYi6tX6UiiCDNjGFkzCXa5AelsHWL0YCBRRVixZIWAUOYMNkGSCIe+ZJHP/8ObUdAJkzsxknsx8Pn8xe+9nzzOu48585zl7n2FdXV1dAQAAoFjDB3oCAAAAvDLhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAULghG27bt2/PU089le3btw/0VAAAAF7RkA23arWaiy++ONVqdaCnAgAA8IqGbLgBAAAcKoQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4YQbAABA4RoGegIAMNTMnTs37e3tdY9vampKa2trH84IgNJZcQOAg6y9vT3VarWusdVqtVfRB8ChyYobAEPaQK1+VSqVtLW19XhcS0tLj8cAcOiz4gbAkGb1C4BDgRU3AIY8q18AlM6KGwAAQOGEGwAAQOGEGwAAQOF6dI/br371q/zd3/1dnnrqqWzYsCGvec1rUqlUcuGFF+b000/f59hnnnkmN954Y1asWJGGhoZMmzYtl19+ecaPH7/PcXv27MnChQtz1113ZcOGDZk8eXLmzJmTM888s9c/HAAAwGDQo3B7/vnns3Xr1rS0tGTChAnZvn17li5dms997nP5sz/7s8yePTtJsnbt2sybNy9jxozJxRdfnG3btmXhwoV5+umnc8stt+Swww6rnfPWW2/NHXfckfe///054YQTsmzZslx77bUZNmxYZs2a1bc/LQAAwCGoR+E2bdq0TJs2bZ9tH/zgB3PxxRfnzjvvrIXb7bffnu3bt+e2227LpEmTkiTNzc258sor88Mf/rB23Lp167Jo0aKce+65ueKKK5Ik73vf+zJv3rzcdNNNmTFjRkaMGNHrHxIAAOBQ1ut73EaMGJGjjjoqmzdvrm1bunRpTjvttFq0Jckpp5ySKVOm5P77769tW7ZsWXbt2pVzzz23tm3YsGH5wAc+kHXr1mXlypW9nR4AAMAhr65w27ZtW37zm9/k3//933PnnXfmxz/+cf7gD/4gyW9X0V588cUcf/zx3cY1Nzdn9erVta9Xr16dww8/PJVKpdtxe/cDAAAMdXV9APe3v/3tLFmyJEkyfPjwvOtd76q91bGjoyNJ0tjY2G1cY2NjXnrppezcuTMjR45MR0dHjjzyyAwbNqzbcUmyfv36eqZXs379+tp8/rNqtdqrcwMAABwsdYXb+eefnxkzZmT9+vW5//77s3v37nR2diZJduzYkST7PIBkr5EjR9aOGTlyZHbs2PGqx/XGkiVLMn/+/F6dAwAAYKDVFW6VSqX29saWlpZceeWV+exnP5tbbrklo0aNSpJayP2unTt3JkntmFGjRh3QcfWaPXt2t48p2Ktarea6667r1fkBAAAOhrrC7T+bMWNGvv71r+fZZ5+tvc1xf29R7OjoyLhx42orao2NjVm+fHm6urr2ebvk3rETJkzo1bwmTJjQ63MAAAAMtF4/VTL5j7c0bt68ORMnTsz48ePz1FNPdTtu1apVmTp1au3rqVOnZvv27d3uN3viiSdq+wEAAIa6HoXbiy++2G3brl27cs8992TUqFE5+uijkyTvfve78/DDD+eFF16oHffYY4/l2WefzcyZM2vbpk+fnoaGhixevLi2raurK3fffXcmTpyYk046qac/DwAAwKDTo7dKfv3rX8+WLVvy1re+NRMnTkxHR0fuu+++tLe357LLLsvo0aOTJHPmzMmPfvSjfPrTn855552Xbdu2ZcGCBTn22GNzzjnn1M531FFH5fzzz8+CBQuya9euNDc358EHH8zjjz+ea665xodvAwAApIfhdsYZZ+Sf/umfcvfdd2fjxo0ZPXp0jj/++Fx66aWZPn167bhJkyblhhtuyI033phbbrklDQ0NmTZtWi677LLa/W17XXLJJRk7dmyWLFmStra2TJ48OVdffXXOOuusvvkJAQAADnE9CrdZs2Zl1qxZB3TsMccck2984xuvetzw4cMzZ86czJkzpydTAQAAGDL65OEkAAAA9B/hBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAUDjhBgAAULiGgZ4AAHBwzJ07N+3t7XWNbWpqSmtrax/PCIADZcUNAIaI9vb2VKvVHo+rVqt1Bx8AfcOKGwAMIZVKJW1tbT0a09LS0k+zAeBAWXEDAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAoXMNATwAADlVr1qxJZ2dnWlpaejSuWq2mUqn006wAGIysuAFAnTo7Ow/qOACGLituANALlUolbW1tPRrT3NzcT7MBYLCy4gYAAFA44QYAAFA44QYAAFA44QYAAFA44QYAAFA44QYAAFA44QYAAFA44QYAAFA44QYAAFA44QYAAFC4hoGeAABw4NasWZPOzs60tLT0eGy1Wk2lUumHWQHQ36y4AcAhpLOzc0DGAjCwrLgBwCGmUqmkra2tx+Oam5v7YTYAHAxW3AAAAAon3AAAAAon3AAAAAon3AAAAAon3AAAAAon3AAAAAon3AAAAAon3AAAAAon3AAAAArX0JODV61alba2tixfvjzPP/98xo0blxNPPDEXXXRRpkyZUjvuy1/+ctra2rqNb2pqyu23377Ptj179mThwoW56667smHDhkyePDlz5szJmWeeWeePBAAAMLj0KNy+//3vZ8WKFZk5c2aOO+64dHR0ZPHixbnoooty880359hjj60dO3LkyFx11VX7jD/iiCO6nfPWW2/NHXfckfe///054YQTsmzZslx77bUZNmxYZs2aVeePBQAAMHj0KNwuuOCCfP7zn89hhx1W23bGGWfkYx/7WO64445cc801te0jRozI2Wef/YrnW7duXRYtWpRzzz03V1xxRZLkfe97X+bNm5ebbropM2bMyIgRI3oyRQAAgEGnR/e4veUtb9kn2pJkypQpOfroo1OtVrsdv3v37mzZsuVlz7ds2bLs2rUr5557bm3bsGHD8oEPfCDr1q3LypUrezI9AACAQalHK27709XVlRdffDFHH330Ptu3b9+ec845J9u3b8/YsWMza9asXHrppRk9enTtmNWrV+fwww9PpVLZZ2xzc3Nt/8knn9zbKQIAABzSeh1u9913X9atW5ePf/zjtW2NjY258MIL86Y3vSldXV358Y9/nLvuuiu//OUvc/3116eh4bfftqOjI0ceeWSGDRu2zzkbGxuTJOvXr+/V3NavX5+Ojo797tvfCiEAAECJehVu1Wo13/rWt3LiiSempaWltv2SSy7Z57hZs2ZlypQpufXWW7N06dLaQ0d27NjR7a2XyW8fbLJ3f28sWbIk8+fP79U5AAAABlrd4dbR0ZHPfOYzOeKII/LFL37xVR8icsEFF+S73/1ufvrTn9bCbdSoUens7Ox27M6dO2v7e2P27Nk5/fTT97uvWq3muuuu69X5Aehbc+fOTXt7e4/HrVmzJkny+te/vsdjq9Vqt7fsA0Bp6gq3zZs356qrrsrmzZtz4403ZsKECa86ZtSoURk3blxeeuml2rbGxsYsX748XV1d+7xdcu/bGw/kvK9kwoQJvT4HAAdPe3t7XSG1devW/b6D40Ds7w+IAFCaHofbjh078tnPfjbPPvtsvvnNb3Z7KMnL2bp1azZu3Jjx48fXtk2dOjX/5//8n1Sr1X3O88QTT9T2AzC0VCqVtLW19WhMc3NzXeP2jgWA0vXo4wB2796dL3zhC1m5cmX+8i//MieddFK3Y3bs2JGtW7d22/69730vXV1dOfXUU2vbpk+fnoaGhixevLi2raurK3fffXcmTpy43/MDAAAMNT1acfv2t7+dhx56KKeddlo2bdqUe++9d5/9Z599djZs2JBPfOITOfPMM9PU1JQkefTRR/PII4/k1FNPzfTp02vHH3XUUTn//POzYMGC7Nq1K83NzXnwwQfz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AEDhhBsAAEDhGgZ6AgAApVizZk06OzvT0tLS47FNTU1pbW3th1kBCDcAgJrOzs66xlWr1T6eCcC+hBsAwO+oVCppa2vr0Zh6VugAesI9bgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIVr6OmArVu3ZuHChXniiSeyatWqbNq0KZ/73Odyzjnn7HPcl7/85bS1tXUb39TUlNtvv32fbXv27MnChQtz1113ZcOGDZk8eXLmzJmTM888s6fTAwAAGHR6HG4bN27M/PnzM2nSpEydOjXLly9/2WNHjhyZq666ap9tRxxxRLfjbr311txxxx15//vfnxNOOCHLli3Ltddem2HDhmXWrFk9nSIAAMCg0uNwa2xszOLFi9PY2Jgnn3wyc+fOfdljR4wYkbPPPvsVz7du3bosWrQo5557bq644ookyfve977MmzcvN910U2bMmJERI0b0dJoAAACDRo/vcRs5cmQaGxsP+Pjdu3dny5YtL7t/2bJl2bVrV84999zatmHDhuUDH/hA1q1bl5UrV/Z0igAAAINKj1fcemL79u0555xzsn379owdOzazZs3KpZdemtGjR9eOWb16dQ4//PBUKpV9xjY3N9f2n3zyyXV9//Xr16ejo2O/+6rVal3nBAAAONj6LdwaGxtz4YUX5k1velO6urry4x//OHfddVd++ctf5vrrr09Dw2+/dUdHR4488sgMGzas2/jkt/FVryVLlmT+/Pl1jwcAAChBv4XbJZdcss/Xs2bNypQpU3Lrrbdm6dKltYeO7NixI4cddli38SNHjqztr9fs2bNz+umn73dftVrNddddV/e5AQAADpZ+favkf3bBBRfku9/9bn7605/Wwm3UqFHp7OzsduzOnTtr++s1YcKETJgwoe7xAAAAJTioH8A9atSojBs3Li+99FJtW2NjYzZs2JCurq59jt17b5rwAgAAhrqDGm5bt27Nxo0bM378+Nq2qVOnZvv27d0eFvLEE0/U9gMAAAxl/RJuO3bsyNatW7tt/973vpeurq6ceuqptW3Tp09PQ0NDFi9eXNvW1dWVu+++OxMnTsxJJ53UH1MEAAA4ZNR1j9sPfvCDbN68ufZ2xoceeihr165NknzoQx/Kpk2b8olPfCJnnnlmmpqakiSPPvpoHnnkkZx66qmZPn167VxHHXVUzj///CxYsCC7du1Kc3NzHnzwwTz++OO55pprfPg2AAAw5NUVbosWLcrzzz9f+/qBBx7IAw88kCQ5++yzM2bMmJx22mn5yU9+kra2tuzZsydveMMbMnfu3Hz4wx/O8OH7LvRdcsklGTt2bJYsWZK2trZMnjw5V199dc4666xe/GgAAACDQ13hduedd77qMVdfffUBn2/48OGZM2dO5syZU890AAAABrWD+nASAAAAek64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFK5hoCcAMBTMnTs37e3tdY2tVqupVCp9PCMA4FBixQ3gIGhvb0+1Wq1rbGdnZx/PBgA41FhxAzhIKpVK2traejyuubm5H2YDABxKrLgBAAAUTrgBAAAUTrgBAAAUTrgBAAAUzsNJAAB6ac2aNens7ExLS0td45uamtLa2trHswIGE+EGANBLvfnYjno/KgQYWoQbAEAfqPcjP+pdpQOGFve4AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFE64AQAAFK5hoCcAcCiZO3du2tvbezyuWq2mUqn0w4wAgKHAihtAD7S3t6darfZ4XGdnZz/MBgAYKqy4AfRQpVJJW1tbj8Y0Nzf302wAgKHAihsAAEDhhBsAAEDhhBsAAEDhhBsAAEDhhBsAAEDhhBsAAEDhhBsAAEDhhBsAAEDhfAA3MOTMnTs37e3tdY2tVqupVCp9PCMAgFdmxQ0Yctrb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+5kHPNxGjRq13/ep7ty5s7a/XhMmTMiECRNedv8pp5xS97mpT6VSecW/JDA0eB2QeB3wH7wWSLwO+A9eC/s34A8naWxs3O99aHu3vVJ4AQAADAUDHm5Tp07Nr3/962zZsmWf7U888URtPwAAwFA24OE2Y8aM7N69O0uWLKlt27lzZ/75n/85b37zmzNp0qQBnB0AAMDAG/B73N785jdn5syZaW1tzW9+85u84Q1vSFtbW55//vl85jOfGejpAQAADLgBD7ck+Z//839m0qRJueeee7J58+Yce+yx+epXv5q3ve1tAz01AACAAVdEuI0aNSp/8id/kj/5kz8Z6KnQTxobG/PRj340jY2NAz0VBpDXAYnXAf/Ba4HE64D/4LXwygb8A7gBAAB4ZQP+cBIAAABemXADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAonHADAAAoXMNAT4DBYevWrVm4cGGeeOKJrFq1Kps2bcrnPve5nHPOOfsc9+UvfzltbW3dxjc1NeX2228/WNOln6xatSptbW1Zvnx5nn/++YwbNy4nnnhiLrrookyZMmWfY5955pnceOONWbFiRRoaGjJt2rRcfvnlGT9+/MBMnj5zoK8D14PB71e/+lX+7u/+Lk899VQ2bNiQ17zmNalUKrnwwgtz+umn73Osa8LgdaCvA9eEoefv//7vc9ttt+WYY47J9773vX32rVixIt/5znfy85//PEcccURmzpyZiy++OKNHjx6g2Q484Uaf2LhxY+bPn59JkyZl6tSpWb58+cseO3LkyFx11VX7bDviiCP6e4ocBN///vezYsWKzJw5M8cdd1w6OjqyePHiXHTRRbn55ptz7LHHJknWrl2befPmZcyYMbn44ouzbdu2LFy4ME8//XRuueWWHHbYYQP8k9AbB/o6SFwPBrvnn38+W7duTUtLSyZMmJDt27dn6dKl+dznPpc/+7M/y+zZs5O4Jgx2B/o6SFwThpK1a9fm9ttvz+GHH95t3+rVq3PFFVekUqnk8ssvz9q1a7No0aL8+te/zl/91V8NwGzLINzoE42NjVm8eHEaGxvz5JNPZu7cuS977IgRI3L22WcfxNlxsFxwwQX5/Oc/v88vWWeccUY+9rGP5Y477sg111yTJLn99tuzffv23HbbbZk0aVKSpLm5OVdeeWV++MMf7vOPOIeeA30dJK4Hg920adMybdq0fbZ98IMfzMUXX5w777yz9v9114TB7UBfB4lrwlBy00035c1vfnP27NmTjRs37rOvtbU1Y8eOzQ033FAL99e97nX52te+lkcffTTveMc7BmLKA849bvSJkSNHprGx8YCP3717d7Zs2dKPM2IgvOUtb+n2l/EpU6bk6KOPTrVarW1bunRpTjvttNovaElyyimnZMqUKbn//vsP2nzpHwf6OtjL9WBoGTFiRI466qhs3ry5ts01YejZ3+tgL9eEwe9nP/tZli5dmnnz5nXbt2XLlvz0pz/N2Wefvc9q63ve854cfvjhQ/qaYMWNg2779u0555xzsn379owdOzazZs3KpZdeOqTfszyYdXV15cUXX8zRRx+dJFm3bl1efPHFHH/88d2ObW5uziOPPHKQZ8jB8J9fB3u5HgwN27Zty44dO7Jly5Y89NBD+fGPf5yZM2cmcU0YSl7pdbCXa8Lgt3v37lx//fV573vfm+OOO67b/qeffjq7d+/udk047LDD8sY3vjGrV68+WFMtjnDjoGpsbMyFF16YN73pTenq6sqPf/zj3HXXXfnlL3+Z66+/Pg0NXpKDzX333Zd169bl4x//eJKko6MjSfa7QtvY2JiXXnopO3fuzMiRIw/qPOlf//l1kLgeDCXf/va3s2TJkiTJ8OHD8653vStXXHFFEteEoeSVXgeJa8JQcffdd+eFF17It771rf3uf7Vrwr/927/16/xK5v8BHFSXXHLJPl/PmjUrU6ZMya233pqlS5dm1qxZAzQz+kO1Ws23vvWtnHjiiWlpaUmS7NixI0n2+7CBvb+Y7dixwy9pg8j+XgeJ68FQcv7552fGjBlZv3597r///uzevTudnZ1JXBOGkld6HSSuCUPBxo0b87d/+7f54z/+45d9YuyrXRN27tzZn1MsmnvcGHAXXHBBhg8fnp/+9KcDPRX6UEdHRz7zmc/kiCOOyBe/+MWMGDEiSTJq1Kgk2ecf6732Xoz3HsOh7+VeBy/H9WBwqlQqOeWUU9LS0pKvfvWr2bZtWz772c+mq6vLNWEIeaXXwctxTRhcbrvttowdOzYf+tCHXvaYV7smDOU/4gg3BtyoUaMybty4vPTSSwM9FfrI5s2bc9VVV2Xz5s35+te/ngkTJtT27X3rw963Qvyujo6OjBs3bkhflAeTV3odvBzXg6FhxowZefLJJ/Pss8+6Jgxhv/s6eDmuCYPHs88+m3/8x3/Meeedl/Xr1+e5557Lc889l507d2bXrl157rnn8tJLL73qNeFA/i0ZrLxVkgG3devWbNy40YesDhI7duzIZz/72Tz77LP55je/2e1hFBMnTsz48ePz1FNPdRu7atWqTJ069SDNlP70aq+Dl+N6MDTsfSvU5s2b09TU5JowRP3u6+DluCYMHuvXr8+ePXty/fXX5/rrr++2/7//9/+e8847Lx//+MczYsSIPPXUUznjjDNq+zs7O7N69epuD7QZSoQbB82OHTuye/fubk+G+t73vpeurq6ceuqpAzQz+sru3bvzhS98IStXrsyXv/zlnHTSSfs97t3vfnfa2trywgsv1B7//dhjj+XZZ5/NBRdccDCnTD84kNeB68HQ8OKLL+bII4/cZ9uuXbtyzz33ZNSoUbWgd00Y3A7kdeCaMPgdc8wx+dKXvtRt+2233ZatW7fmU5/6VF7/+tdnzJgxOeWUU3LvvffmIx/5SO01cc8992Tbtm3CDfrCD37wg2zevLm2tP3QQw9l7dq1SZIPfehD2bRpUz7xiU/kzDPPTFNTU5Lk0UcfzSOPPJJTTz0106dPH7C50ze+/e1v56GHHsppp52WTZs25d57791n/94PVZ0zZ05+9KMf5dOf/nTOO++8bNu2LQsWLMixxx6bc845ZyCmTh86kNfBhg0bXA+GgK9//evZsmVL3vrWt2bixInp6OjIfffdl/b29lx22WW1X8hcEwa3A3kdPPfcc64Jg9z48ePzzne+s9v2//2//3eS7LPvoosuymWXXZZ58+Zl9uzZWbt2bRYtWpS3v/3tQzrih3W90h2h0AMXXHBBnn/++f3uW7RoUcaMGZPrr78+K1euTEdHR/bs2ZM3vOENOeuss/LhD3/YY34HgU996lP52c9+9rL7H3jggdp//+pXv8qNN96YFStWpKGhIdOmTctll12W1772tQdhpvSnA3kdbNq0yfVgCPiXf/mX/NM//VOefvrpbNy4MaNHj87xxx+fD37wg91+EXdNGLwO5HXgmjB0fepTn8rGjRvzve99b5/tjz/+eL7zne/k5z//eUaPHp2ZM2fmkksuGdKf6SfcAAAACuepkgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIUTbgAAAIVrGOgJAEB/Wr58ef70T/80H/3oR3PaaaeltbU1K1euzPDhw/MHf/AHufzyy/O6171unzErVqzIP/zDP2TlypXZsWNHfu/3fi9nnHFG/uiP/iivec1r9jn2Xe96V972trflmmuuSWtra37yk5/kxRdfzF//9V8nSe17v/3tb89tt92WJ598MiNHjszMmTNz2WWXZdSoUfnXf/3X/P3f/31++ctf5vDDD09LS0suvvjiNDT4ZxqA3/IvAgBDwpNPPpkFCxbk93//9zN79uysXr06Dz74YJ5++unMnz8/o0aNSpLcf//9ufbaa3PYYYfljDPOyPjx4/OTn/wk8+fPz6OPPprrr7++duxeGzduzCc/+cmMGzcuZ5xxRnbu3JnRo0dn69atSZJVq1bl+9//ft7xjndk9uzZWb58ee66665s2bIlp512Wr7yla9k+vTpOfHEE/Ov//qvWbBgQQ4//PB89KMfPdj/MwFQqGFdXV1dAz0JAOgve1fckuQv/uIvMmvWrNq+L33pS7nnnntq27ds2ZLzzz8/O3fuzC233JLjjjsuSbJnz55ce+21+b//9//mE5/4RD7ykY/UzvGud70rSfKHf/iH+fM///OMGDFiv9/7S1/6Ut75zncmSXbt2pWLL744Tz/9dMaNG5evfe1raW5uTpJs3bo1F154YXbv3p277rrLqhsASdzjBsAQ8da3vnWfaEt+G1vJb1fEkmTZsmXZvHlz/vAP/7AWbUkyfPjwfPKTn8yIESPywx/+sNu5DzvssFx66aX7RNvv+v3f//1atCVJQ0NDZsyYka6urpx++um1aEuS0aNHZ9q0aXnppZeydu3a+n9gAAYV4QbAkHD88cd32zZx4sQkyebNm5Mkq1evTpK87W1v63bspEmT8vrXvz5r1qypvQVyr9e97nUZP378y37vN77xjd22NTY2JkmmTp36svs6Ojpe9pwADC3CDYAhYfTo0d227V0h27NnT5Jky5YtSZLXvva1+z3H3qDae9xeRx55ZN3f+4gjjnjZfbt27XrF8wIwdAg3APj/9kbUhg0b9rt/7/b/HFvDhg3r34kBMOQJNwD4//a+pfFnP/tZt30vvPBC/v3f/z2vf/3r97uCBgD9SbgBwP83ffr0jBkzJv/8z/+cX/3qV7XtXV1dueWWW7J79+6cc845AzhDAIYqzxgGgP/viCOOyJ//+Z/n2muvzaWXXpqZM2dm/Pjxeeyxx/LUU0+lubk5H/7whwd6mgAMQcINAH7HzJkz89rXvja33357HnjggezYsSO/93u/l4985CP5oz/6o24fvg0AB4MP4AYAACice9wAAAAKJ9wAAAAKJ9wAAAAKJ9wAAAAKJ9wAAAAKJ9wAAAAKJ9wAAAAKJ9wAAAAKJ9wAAAAKJ9wAAAAKJ9wAAAAKJ9wAAAAKJ9wAAAAK9/8AiTVWMCi/rJQAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.hist(norm.samples, bins=50, ec=\"k\", fc=\"w\", lw=1.2)\n",
    "ax.set_xlabel(\"norm\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf00f904",
   "metadata": {},
   "source": [
    "We can easily transform the RV through propagation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "aac87a3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:14.433308Z",
     "iopub.status.busy": "2024-08-13T22:15:14.432915Z",
     "iopub.status.idle": "2024-08-13T22:15:14.438348Z",
     "shell.execute_reply": "2024-08-13T22:15:14.437727Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "equal-tail: 1.44 -0.07 +0.06, hpd: 1.44 -0.06 +0.07"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_norm = np.log10(norm)\n",
    "log_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f88a80d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:14.440652Z",
     "iopub.status.busy": "2024-08-13T22:15:14.440265Z",
     "iopub.status.idle": "2024-08-13T22:15:14.611194Z",
     "shell.execute_reply": "2024-08-13T22:15:14.610626Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'log norm')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.hist(log_norm.samples, bins=50, ec=\"k\", fc=\"w\", lw=1.2)\n",
    "ax.set_xlabel(\"log norm\")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "baca1997",
   "metadata": {},
   "source": [
    ".. note::\n",
    "    Some operations will destroy the RV by accessing only its NDArray substructure. For example, using an RV with astropy units will return an array of samples with the given units."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
