{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8e16b3ea",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "989e14c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:15:08.938044Z",
     "iopub.status.busy": "2025-02-06T00:15:08.937532Z",
     "iopub.status.idle": "2025-02-06T00:15:08.997923Z",
     "shell.execute_reply": "2025-02-06T00:15:08.997241Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "65d2c93b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:15:09.000128Z",
     "iopub.status.busy": "2025-02-06T00:15:08.999872Z",
     "iopub.status.idle": "2025-02-06T00:15:12.076644Z",
     "shell.execute_reply": "2025-02-06T00:15:12.075838Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bcd3f1ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:15:12.079213Z",
     "iopub.status.busy": "2025-02-06T00:15:12.078656Z",
     "iopub.status.idle": "2025-02-06T00:15:12.109615Z",
     "shell.execute_reply": "2025-02-06T00:15:12.109060Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b8a3698",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3e927c07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:15:12.111608Z",
     "iopub.status.busy": "2025-02-06T00:15:12.111420Z",
     "iopub.status.idle": "2025-02-06T00:15:14.120350Z",
     "shell.execute_reply": "2025-02-06T00:15:14.119664Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">00:15:12 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m00:15:12\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=467238;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=867594;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">00:15:13 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m00:15:13\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=793132;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=307147;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82eb8df2",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9f235225",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:15:14.122605Z",
     "iopub.status.busy": "2025-02-06T00:15:14.122188Z",
     "iopub.status.idle": "2025-02-06T00:15:15.260630Z",
     "shell.execute_reply": "2025-02-06T00:15:15.259982Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">00:15:14 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m00:15:14\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=423347;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=615213;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1046</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=506265;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=333756;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\u001b\\\u001b[2m1046\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>(8.0 +/- 0.8) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(1.4 +/- 0.7) x 10^-1</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         result              unit\n",
       "parameter                                                        \n",
       "xyl.spectrum.main.Line.a  (8.0 +/- 0.8) x 10^-1   1 / (keV s cm2)\n",
       "xyl.spectrum.main.Line.b  (1.4 +/- 0.7) x 10^-1  1 / (s cm2 keV2)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140594003261712\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>22.252435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.252435</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          22.252435\n",
       "total         22.252435"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>48.760189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>52.328915</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             48.760189\n",
       "BIC             52.328915"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "866d65d2",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "34024006",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:15:15.262790Z",
     "iopub.status.busy": "2025-02-06T00:15:15.262369Z",
     "iopub.status.idle": "2025-02-06T00:15:15.268605Z",
     "shell.execute_reply": "2025-02-06T00:15:15.268005Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "094d202b",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a8a05157",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:15:15.270503Z",
     "iopub.status.busy": "2025-02-06T00:15:15.270312Z",
     "iopub.status.idle": "2025-02-06T00:16:08.469202Z",
     "shell.execute_reply": "2025-02-06T00:16:08.468422Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c7c85d75780a4a0c869db1c845a21ab0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dacd5b0d",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8101bce2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:16:08.471594Z",
     "iopub.status.busy": "2025-02-06T00:16:08.471373Z",
     "iopub.status.idle": "2025-02-06T00:16:08.475970Z",
     "shell.execute_reply": "2025-02-06T00:16:08.475313Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.627), ('data', 0.627)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d3abf78",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5cc5c31d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:16:08.478076Z",
     "iopub.status.busy": "2025-02-06T00:16:08.477737Z",
     "iopub.status.idle": "2025-02-06T00:16:09.270767Z",
     "shell.execute_reply": "2025-02-06T00:16:09.270108Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">00:16:08 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m00:16:08\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=548071;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=339720;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=111170;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=144596;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=900385;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=695590;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=363360;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=924826;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=855011;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=624082;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=268463;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=64023;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=978885;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=607006;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=963757;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=782598;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=626339;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=976703;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">00:16:09 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m00:16:09\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=459292;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=949540;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=146869;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=280277;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=921053;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=794777;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "87ad273f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:16:09.273040Z",
     "iopub.status.busy": "2025-02-06T00:16:09.272809Z",
     "iopub.status.idle": "2025-02-06T00:16:09.807460Z",
     "shell.execute_reply": "2025-02-06T00:16:09.806728Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "718c12d7",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f9d24c2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:16:09.809646Z",
     "iopub.status.busy": "2025-02-06T00:16:09.809273Z",
     "iopub.status.idle": "2025-02-06T00:16:09.815700Z",
     "shell.execute_reply": "2025-02-06T00:16:09.815126Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a4b9884f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:16:09.817600Z",
     "iopub.status.busy": "2025-02-06T00:16:09.817401Z",
     "iopub.status.idle": "2025-02-06T00:16:09.820687Z",
     "shell.execute_reply": "2025-02-06T00:16:09.819984Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3422c1d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:16:09.822746Z",
     "iopub.status.busy": "2025-02-06T00:16:09.822549Z",
     "iopub.status.idle": "2025-02-06T00:16:09.907933Z",
     "shell.execute_reply": "2025-02-06T00:16:09.907239Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1046</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=295625;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=899930;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\u001b\\\u001b[2m1046\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(5.5 -0.6 +0.7) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.58 +/- 0.08</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       result             unit\n",
       "parameter                                                                     \n",
       "test_pl.spectrum.main.Powerlaw.K      (5.5 -0.6 +0.7) x 10^-1  1 / (keV s cm2)\n",
       "test_pl.spectrum.main.Powerlaw.index           -1.58 +/- 0.08                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140593872235008\">\n",
       "<tr><td>1.00</td><td>0.41</td></tr>\n",
       "<tr><td>0.41</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.41\n",
       "0.41 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>212.385326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>212.385326</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         212.385326\n",
       "total        212.385326"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>429.025972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>432.594699</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            429.025972\n",
       "BIC            432.594699"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cc87a32f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:16:09.910277Z",
     "iopub.status.busy": "2025-02-06T00:16:09.909863Z",
     "iopub.status.idle": "2025-02-06T00:16:10.013629Z",
     "shell.execute_reply": "2025-02-06T00:16:10.013048Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1046</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=799824;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=120446;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\u001b\\\u001b[2m1046\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>1.2 -0.6 +1.1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>-1.1 +/- 0.4</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(2.2 -1.4 +4) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                            result  \\\n",
       "parameter                                                            \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K             1.2 -0.6 +1.1   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index          -1.1 +/- 0.4   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc     (2.2 -1.4 +4) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (keV s cm2)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140593872002496\">\n",
       "<tr><td>1.00</td><td>0.97</td><td>-0.98</td></tr>\n",
       "<tr><td>0.97</td><td>1.00</td><td>-0.96</td></tr>\n",
       "<tr><td>-0.98</td><td>-0.96</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.97 -0.98\n",
       " 0.97  1.00 -0.96\n",
       "-0.98 -0.96  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>208.733612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>208.733612</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         208.733612\n",
       "total        208.733612"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>423.988964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>429.203294</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            423.988964\n",
       "BIC            429.203294"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c9eb000",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "75afb655",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:16:10.015811Z",
     "iopub.status.busy": "2025-02-06T00:16:10.015618Z",
     "iopub.status.idle": "2025-02-06T00:16:10.020741Z",
     "shell.execute_reply": "2025-02-06T00:16:10.020193Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 0.003830252820367078\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c3e59ce",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "79e7ba1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:16:10.022771Z",
     "iopub.status.busy": "2025-02-06T00:16:10.022557Z",
     "iopub.status.idle": "2025-02-06T00:16:10.026320Z",
     "shell.execute_reply": "2025-02-06T00:16:10.025755Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7e45a8e",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "47179763",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:16:10.028406Z",
     "iopub.status.busy": "2025-02-06T00:16:10.027928Z",
     "iopub.status.idle": "2025-02-06T00:18:17.815603Z",
     "shell.execute_reply": "2025-02-06T00:18:17.815002Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "69f1dc29bea24ccfbcf607d149cf0999",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c4b4623",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "25e41274",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:18:17.818056Z",
     "iopub.status.busy": "2025-02-06T00:18:17.817629Z",
     "iopub.status.idle": "2025-02-06T00:18:17.821892Z",
     "shell.execute_reply": "2025-02-06T00:18:17.821368Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.007"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3288e69f",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a9517a2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:18:17.823855Z",
     "iopub.status.busy": "2025-02-06T00:18:17.823544Z",
     "iopub.status.idle": "2025-02-06T00:18:18.364663Z",
     "shell.execute_reply": "2025-02-06T00:18:18.363916Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c841264f",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "17b301d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T00:18:18.366973Z",
     "iopub.status.busy": "2025-02-06T00:18:18.366543Z",
     "iopub.status.idle": "2025-02-06T00:18:18.922903Z",
     "shell.execute_reply": "2025-02-06T00:18:18.922202Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "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6fPPP9eTTz55TOdavny5Jk2apODgYHk8HvXu3Vu33XabP9+OaSiPAAAAAJqUzz///JDlli1b6vvvv69anjRpUrWvmzhxYtXXF110kS666KKjnueP+//uueeeO5aojQqXrQIAAAAAakR5BAAAAADUiPIIAAAAAKgR9zwCAAAgIPrNmmF2BAB+xMgjAAAAAKBGlEcAAAAAQI0ojwAAAACAGnHPIwAAAAIia94CuUtKZI2IUOK1V5sdB0AdUR4BAAAQELnLP1VlXr6CY6Ipj2hSfvrpJz377LOyWCzq37+/Ro4caXakesFlqwAAAABwDDp27Kg333xT8+bN0xdffKGysjKzI9ULRh4BAAAA4BjExsZWfW21WmWxNI8xOcojAAAAgCZn+/btuv/++1VQUKDIyEhNnDhR3bp1O2y/Cy+8UEFBQQoNDZUkjR49WhdffHGtzrFq1SolJiYqJCTEr9kbKsojAAAAgCbnH//4h66++mpdfvnlWrZsme6//34tXLiw2n0nT56snj17HtPxc3Jy9Oqrr2ratGn+iNsoNI/xVQAAAADNRl5entavX6+hQ4dKkgYMGKCcnBxlZmYe03GGDBmia6+9Vk6nU5J0zz33aNKkSaqsrNT999+vxx57TBEREX7P31Ax8liPHA6HHA6HJKm4uNjkNAAAAID/Xbfxee1zFgXs+G2CWuidnncddZ/du3erbdu2stkO1h3DMNS+fXtlZ2crKSnpsP3vvfdeSdKJJ56oe+65R9HR0ZKkDz/8UJdccok2btyodevWae/evXrmmWe0aNEiZWRk6NFHH5UkTZo06ZD7IJsqymM9stvtstvtkqT09HSlpKSYnAgAAADwr33OIu1x7jc7Rq29+eab6tChg5xOpyZPnqz77rtPM2bMkHSwdJ566ql666239NNPP+ndd9+V1WrVRRddpLfeekvr16/XmjVrTH4H9YfyCAAAAMBv2gS1MP347du31969e+VyuWSz2eT1erV792516NDhsH1/XxcUFKThw4drwIABh2w/4YQT9Nhjj+nNN9+sGpGMiIjQrFmzdMcdd9T9DTUilEcAAAAERNTxx8t14IBsUVFmR0E9qumS0voQExOj448/XosXL9bll1+uTz75RLGxsYddslpaWiqXy6Wo//4d/eijj9SrV6+q7S6XS4sWLVJycrL69u1btT4oKEitWrWq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/Z+6dOlyRbcVDwgIUN++fRUfH69NmzbJZrMpJCREjz76qMaMGVPhIe0N3eDBg7Vr1y7Fx8eroKBAQUFBuuuuuxQVFVWt51QFBwfrjTfeUHR0tJYsWSIvLy/dcsstmjp1qtt+37Gmjh07JknasGGDNmzYUG5Zq1atypXHygwdOlQHDx7U9u3bVVRUpODgYD3wwAN68MEHK32nvKF45plnFBwcrC+++EI5OTkKCwvTggUL1LNnzyq3a9SokV5//XVFR0dr5cqVstls6tWrl6ZNm1ZvL78x06X995tvvtE333xTYfml8lgZR48zDU1ERIS2bNmi1atXKzc3V4GBgerfv7+ioqLUtm3bKrdlv66ZuLg4NWvWrFp3vr6EY7J9q1atUlpaWtnPO3bsKCvgw4YNU0BAgMPnEX379tW8efMUGxur119/XU2bNtXYsWMVFRVVV39WvWRvriWVlcklS5ZU2P7222+/7BUl0q/ne9dff7127Nih8+fPy8PDQ6GhoZo5c2a9frPEYhiGYXYIAAAAAED9xkdGAAAAAAC7KI8AAAAAALsojwAAAAAAuyiPAAAAAAC7KI8AAAAAALsojwAAAAAAuyiPAAAAAAC7KI8AAAAAALsojwAAAAAAu7zMDgAAAP6jf//+V7T+jh07JEn5+fn65JNPtG3bNp0+fVolJSUKDAxU69at1aNHD40YMUIhISF1ERkA0EBQHgEAqEeioqIqjH3yySfKycmpdJkk5eXlaerUqfrpp58UEhKioUOHqmnTpsrMzNThw4f1/vvvKyQkhPIIAHCIxTAMw+wQAADg8u677z6lpaWVfcr4e++8846WLVumESNG6H/+539ksVjKLU9NTVVxcbFCQ0OdERcA4Kb45BEAABd38OBBSdLdd99doThKUps2bZwdCQDghrhhDgAALq5p06aSpFOnTpmcBADgziiPAAC4uIEDB0qSXn75ZS1cuFDff/+9srKyzA0FAHA7fOcRAIB6zt53HiVp1apVWr58ufLz88vGQkJC1KdPH917771q166dM6ICANwY5REAgHquOuVR+vWuq999950OHjyopKQkJSQkqKSkRFarVc8995z69evnpMQAAHdEeQQAoJ6rbnn8vZycHMXExGjt2rVq2rSpPvvsM3l7e9dRSgCAu+M7jwAAuKmAgAA98cQTatWqlbKysnT8+HGzIwEAXBjlEQAAN2axWOTr62t2DACAG6A8AgDg4j7//HMlJiZWuuyrr75SSkqKAgIC1LFjRycnAwC4Ey+zAwAAAMd89913euWVVxQSEqIePXqoefPmys/P19GjR7V//355eHjoySeflNVqNTsqAMCFUR4BAHBxkyZNUo8ePRQfH68ff/xRGRkZkqQWLVro9ttv16hRoxQeHm5ySgCAq+NuqwAAAAAAu/jOIwAAAADALsojAAAAAMAuyiMAAAAAwC7KIwAAAADALsojAAAAAMAuyiMAAAAAwC7KIwAAAADALsojAAAAAMAuyiMAAAAAwC7KIwAAAADALsojAAAAAMAuyiMAAAAAwC7KIwAAAADArv8Hszs3sq9pvzwAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56f25a19",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.21"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0454f62d3ee44fdbba224a701f41d976": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_92cebe4d221744e5b6cef84d5eb9df68",
       "placeholder": "​",
       "style": "IPY_MODEL_eaec33ac4be9495f90023e13ed4608a6",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [02:07&lt;00:00,  7.94it/s]"
      }
     },
     "3c4a18953ab84165b105f95b2f093ec5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b4a601f33a654f5f896943eb9245716d",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_56bbf8fe59dd4d01b58d4d149defc0f1",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "43b3945c8ccc4d848e77a5df266ffcc0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bcbbb8a0b1aa431d8a92ccad8a8c05fa",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_967a0c5a052e44a48ba50d094f8d94d7",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "54abf508fe9540b6899cf236961903d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8b47e1c16a994ebba2fee953e525b009",
       "placeholder": "​",
       "style": "IPY_MODEL_80b419c3836e44df85d2dd034b8e7df6",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "56bbf8fe59dd4d01b58d4d149defc0f1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "625798caa5e34043a66f7e7a9297ce67": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f7d2049f44b84419bfbc33b467010e57",
       "placeholder": "​",
       "style": "IPY_MODEL_caa50e99759549b7a704ba1bb8624b2b",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "69f1dc29bea24ccfbcf607d149cf0999": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_54abf508fe9540b6899cf236961903d5",
        "IPY_MODEL_3c4a18953ab84165b105f95b2f093ec5",
        "IPY_MODEL_0454f62d3ee44fdbba224a701f41d976"
       ],
       "layout": "IPY_MODEL_e357604d61604e5a9087307a38e5a801",
       "tabbable": null,
       "tooltip": null
      }
     },
     "80b419c3836e44df85d2dd034b8e7df6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8b47e1c16a994ebba2fee953e525b009": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "92cebe4d221744e5b6cef84d5eb9df68": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "967a0c5a052e44a48ba50d094f8d94d7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "a45fbfb08d494515aa1d1841f6285ae5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f6ca264751c341258ffca1fd340706d4",
       "placeholder": "​",
       "style": "IPY_MODEL_d0735095a2a641589cb2ba73d9d10a9c",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:53&lt;00:00, 19.09it/s]"
      }
     },
     "b4a601f33a654f5f896943eb9245716d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bcbbb8a0b1aa431d8a92ccad8a8c05fa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c7c85d75780a4a0c869db1c845a21ab0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_625798caa5e34043a66f7e7a9297ce67",
        "IPY_MODEL_43b3945c8ccc4d848e77a5df266ffcc0",
        "IPY_MODEL_a45fbfb08d494515aa1d1841f6285ae5"
       ],
       "layout": "IPY_MODEL_c8b3cc434d83472f839d9e790d03bf46",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c8b3cc434d83472f839d9e790d03bf46": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "caa50e99759549b7a704ba1bb8624b2b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d0735095a2a641589cb2ba73d9d10a9c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e357604d61604e5a9087307a38e5a801": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "eaec33ac4be9495f90023e13ed4608a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f6ca264751c341258ffca1fd340706d4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f7d2049f44b84419bfbc33b467010e57": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
