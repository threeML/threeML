{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "89d8b9e1",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af3a59d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:55:56.195180Z",
     "iopub.status.busy": "2025-02-06T02:55:56.194979Z",
     "iopub.status.idle": "2025-02-06T02:55:56.253005Z",
     "shell.execute_reply": "2025-02-06T02:55:56.252378Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "11f34ced",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:55:56.255240Z",
     "iopub.status.busy": "2025-02-06T02:55:56.254841Z",
     "iopub.status.idle": "2025-02-06T02:55:59.232098Z",
     "shell.execute_reply": "2025-02-06T02:55:59.231344Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b43714e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:55:59.234855Z",
     "iopub.status.busy": "2025-02-06T02:55:59.234299Z",
     "iopub.status.idle": "2025-02-06T02:55:59.264382Z",
     "shell.execute_reply": "2025-02-06T02:55:59.263698Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d50661c9",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3ce14b6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:55:59.266440Z",
     "iopub.status.busy": "2025-02-06T02:55:59.266058Z",
     "iopub.status.idle": "2025-02-06T02:56:01.229375Z",
     "shell.execute_reply": "2025-02-06T02:56:01.228704Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">02:55:59 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m02:55:59\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=278845;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=830456;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">02:56:01 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m02:56:01\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=966903;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=5427;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca17f43c",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1c32cb7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:01.231559Z",
     "iopub.status.busy": "2025-02-06T02:56:01.231156Z",
     "iopub.status.idle": "2025-02-06T02:56:02.359812Z",
     "shell.execute_reply": "2025-02-06T02:56:02.359058Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=423427;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=472626;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1046</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=752309;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=287215;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\u001b\\\u001b[2m1046\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>(9.2 +/- 0.8) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(8 +/- 7) x 10^-2</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         result              unit\n",
       "parameter                                                        \n",
       "xyl.spectrum.main.Line.a  (9.2 +/- 0.8) x 10^-1   1 / (keV s cm2)\n",
       "xyl.spectrum.main.Line.b      (8 +/- 7) x 10^-2  1 / (s cm2 keV2)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140666676624976\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>26.722573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>26.722573</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          26.722573\n",
       "total         26.722573"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>57.700466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>61.269193</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             57.700466\n",
       "BIC             61.269193"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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e/dWUpJx36aBAwdKkvbs2aOMjIwWPdeuXbtUUlKi2267Lejx1atXa9myZfL5fOrbt69uv/32oD2fAFquaMU+1TvcikuwKm98v1A3BwAAAG0QMUGzrKxMaWlpAeWNZaWlpS1+rrVr10oKPmz2oosu0tixY5WZmamysjItWbJEc+bMUU1Nja677rrWNf5E+8rKyoIeKykpafXzAuGiaNU+1R5zKrG7naAJAAAQ5iImaDqdTtlsgXPY4uLi/Mdbwuv1av369crJydF5550XcPyZZ54xPL7mmmt01113af78+SooKJDdbj/7xktavny5FixY0Kq6AAAAANCZREzQtNvtcrlcAeX19fX+4y2xdetWHT16VJMnT27R+TabTddff72efPJJFRcXn3F12zMpLCzU5ZdfHvRYSUmJ5s6d26rnBQCgM8sr6OcfNg8AiBwR86melpamo0ePBpQ3DkdNT09v0fOsXbtWsbGx+tGPftTia/fs2VOSVFlZ2eI6p0tPT29xGwEAiBQMlUek4JcmgFHE/E8YMGCAtmzZopqaGsOCQNu3b/cfb059fb02btyoIUOGnFXoO3jwoCSpa9euZ9doAAA6Cb4kA23DL00Ao4jZ3mTMmDHyeDxavny5v6y+vl4rV67UoEGD/CvOHjlypMnFdT766CNVV1c3uYJseXl5QFltba1ef/11paamKjc3t+0vBACAEMgb30+X3JDDl2UAgCki5teWgwYN0tixYzV//nyVl5erV69eWr16tQ4fPqzp06f7z/v1r3+trVu3atOmTQHPsXbtWsXFxWn06NFBr7FkyRK9//77GjlypDIyMlRWVqaVK1fqyJEjeuSRR4IuRgQAQEehVxIAgnPWuORyuCVJLodbzhqX7El8d29PEfWTaObMmcrIyNA777yj6upqZWdna968eRoyZEizdWtqarR582Z9//vfV5cuXYKek5eXpy+//FJvv/22KisrFR8fr4EDB2r69Om65JJLTH41AACcHXojASCQs8al5bM2y+XwSJJcDo+Wz9qswtkjCJvtKKKCpt1u19SpUzV16tQmz/n9738ftDwpKUnvvvvuGZ9/2LBhGjZsWJvaCAAAAKDjFK8/oIpDNYayikM1Kl5/QIMnZIeoVZEvYuZoAgAAAMDpykqC7wxR9nVVB7ckuhA0AQAAAESstL4pwcv7JHdwS6ILQRMAAABAxMrNz1JqZpKhLDUzSbn5WSFqUXSIqDmaAEKLFS8BAEBnY0+yqXD2CL16/3tyOTyyJVhYCKgD8G0QgGlY8RIAAHRG9iSbbAnWE0HTSsjsAAydBQAAAACYiqAJAAAAADAVQRMAAAAAYCrmaAIA2pWzxiWXwy1Jcjnccta4mBsDoFNiUTvAPPwvAgC0G2eNS8tnbZbL4ZEkuRweLZ+1mdX+AHRKLGoHmIegCQBoN8XrD6jiUI2hrOJQjYrXH9DgCdkhahUQfuhpAxBu+LQCALSbspLK4OVfV3VwS4DwRk8bgHDDYkAAgHaT1jcleHmf5A5uCQAA6EgETQBAu8nNz1JqZpKhLDUzSbn5We1+7WCLEAEAwhef6+GFoAkAaDf2JJsKZ4+QLcEiSbIlWDpkIaCmFiHiSwkAmCOvoJ+GXj9AeQUdM6ybz/XwQ9AEALQre5JNthMLmNgSrB2y2uyZFiECALRd3vh+uuSGnA6bP8znevghaAIAIg6LEAFAZOFzPfyw6iyAsMey/zhdWt8U7f3wUGA5ixABQFjicz388K0MQNhj2X+cLjc/S8UbvjEMs+qoRYgAAObjcz38MHQWABBxQrUIEQCgffC5Hn4ImgCATqstS9mHYhEiAED74XM9vBA0AQCdEkvZAwAQvpijCQDolM60lP3gCdkhahUiBYuIAUD74tMVANApsZQ92lM0LSJGqAYQCnziAAA6JZayB8wRTaEaQOfBHE0AQKeUm5+l1MwkQxlL2QMAEB4ImgCAToml7AEACF8ETQBAp8VS9gAAhCfmaAIAAAAhxIJNiES8m9EqfCACAACYgwWbEIlICWgVPhABAAAANIU5mgAAAAAAUxE0AQAAAACmImgCAJrlrHHJ5XBLklwOt5w1rhC3CAAAdGYETQDAGTlrXFo+a7NcDo8kyeXwaPmszYRNAADQJIImAOCMitcfUMWhGkNZxaEaFa8/EKIWAQCAzo6gCQA4o7KSyuDlX1d1cEsAAEC4YHsTAIgirdkDN61vivZ+eCiwvE+ymU0D0MkEm5ttT7KFuFUAwgU9mgAQRfLG99MlN+Sc1V64uflZSs1MMpSlZiYpNz/L7OYB6CSYmw2grQiaAIAzsifZVDh7hGwJFkmSLcGiwtkj6NkAIhhzswG0FUETANAse5JNthPDbW0JVkImEOGYmw2grQiaAAAAMEjrmxK8nLnZAFqIoAkAAAAD5mYDaCuCJgAAAAyYmw2grQiaAAAACMDcbABtQdAEAAAAAJiKoImwEWzjaAAAAACdD0ETYYGNowEAAIDwYQ11A4CWONPG0YMnZIeoVQAiWV5BP9U73IpL4EclAABni5+eCAtsHA2go+WN7xea6xJwAQARgJ9iCAtpfVO098NDgeVsHA0gwoQq4AIAYCbmaCIssHE0AAAAED4ImggLbBwNAAAAhA+CJsIGG0cDAAAA4YE5muhwRSv2+Re6YC4SAAAAEHkImuhwRav2qfaYU4nd7QRNAAAAIAIRNAEAQJuwJQsA4HT8RAAAAG3C6BQAwOlYDAgAAAAAYCqCJgAAAADAVARNAAAAAICpCJoAAAAAAFMRNAEAAAAApiJoAgAAAABMRdAEAAAAAJgqovbRrK+v1wsvvKA1a9aoqqpK/fv311133aVhw4adsd5f//pXLViwIKA8Li5O7777bkD522+/rVdffVWHDx9Wjx49dMMNN2jSpElmvQwAAAAACGsRFTQfe+wxbdiwQZMnT1bv3r21atUqPfzww3r66ac1ePDgZutPmzZNCQkJ/sexsYEdvm+++aaefPJJjR49WjfeeKO++OILPf3006qrq9OPf/xjU18PAAAAAISjiAma27dv17p163Tvvffq5ptvliRdddVVuuOOO/Tss8/q2WefbfY5Ro8era5duzZ53Ol06vnnn9eIESM0Z84cSdKECRPk9Xq1cOFCFRYWKjk52ZTXAwAAAADhKmLmaG7cuFEWi0WFhYX+MrvdrvHjx2vbtm06cuRIi56npqZGPp8v6LHPPvtMFRUVuu666wzlEydOlMPh0ObNm1vdfgAAAACIFBETNHfv3q3evXsrKSnJUD5w4EBJ0p49e5p9jhtvvFEFBQW6+uqrNWfOHB07dizgGpJ0wQUXGMpzc3MVGxurXbt2teUlAAAAAEBEiJihs2VlZUpLSwsobywrLS1tsm5ycrKuv/56XXjhhbLZbPriiy+0dOlS7dixQ88995w/vJaVlclisahbt26G+jabTSkpKSorK2t1+0tLS5usX1JS0urnBQAAAICOFjFB0+l0ymazBZTHxcX5jzdl8uTJhsdjxozRwIEDNWfOHC1dulS33nqr/zms1uC3LC4u7ozXaM7y5cuDrnwLAAAAAOEmYoKm3W6Xy+UKKK+vr/cfPxtXXnml/vSnP+nTTz/1B0273S632x30/Pr6+rO+xqkKCwt1+eWXBz1WUlKiuXPntvq5AQAAAKAjRUzQTEtL09GjRwPKG4ejpqenn/Vz9uzZU5WVlYZreDweHT9+3DB81uVyqbKyMujQ3ZZKT09vVRsBAAAAoLOJmMWABgwYoG+++UY1NTWG8u3bt/uPnw2fz6fDhw8btjvJycmRJO3cudNw7s6dO+X1ev3HAQAAACCaRUzQHDNmjDwej5YvX+4vq6+v18qVKzVo0CBlZGRIko4cORKwuE55eXnA8y1btkzl5eW67LLL/GUXX3yxUlJS9OabbxrOffPNNxUfH68RI0aY+IoAAADCV15BPw29foDyCvqFuikAQiBihs4OGjRIY8eO1fz581VeXq5evXpp9erVOnz4sKZPn+4/79e//rW2bt2qTZs2+csmT56s/Px8ZWdnKy4uTkVFRVq3bp1ycnIC9uW888479dRTT2nWrFkaPny4Pv/8c61Zs0Z33323UlJSOvQ1AwAAdFZ54wmYQDSLmKApSTNnzlRGRobeeecdVVdXKzs7W/PmzdOQIUPOWO/KK6/Ul19+qY0bN6q+vl4ZGRm6+eabdfvttys+Pt5w7sSJE2W1WrVo0SJ98MEH6tmzp37+858HrFwLAAAAANEqooKm3W7X1KlTNXXq1CbP+f3vfx9Q9vDDD5/VdSZMmKAJEyacdfuAs5VX0E/1DrfiEiLqvyoAAAAiHN9egU6MYUcAAAAIRxGzGBAAAAAAoHMgaAIIOWeNSy6HW5LkcrjlrHGFuEUAAABoC4ImgJBy1ri0fNZmuRweSZLL4dHyWZsJmwAAAGGMoAkgpIrXH1DFoRpDWcWhGhWvPxCiFgEAAKCtCJoAQqqspDJ4+ddVHdwSAAAAmIWgCSCk0vqmBC/vk9zBLQEAAIBZCJoAQio3P0upmUmGstTMJOXmZ4WoRQAAAGgrgiaAkLIn2VQ4e4RsCRZJki3BosLZI2RPsoW4ZQAAAGgta6gbAAD2JJtsCVa5HB7ZEqyETAAAIljRin2qd7gVl2BV3vh+oW4O2glBEwAAAECHKVq1T7XHnErsbidoRjCGzgIAAAAATEXQBAAAAACYiqAJAAAAADAVQRMAAAAAYCoWAwIAAAAQ8fIK+vlXu0X74y4DAAAAiHiscNuxGDoLAAAAADAVQRMAAAAAYCqCJgAAAADAVARNAAAAAICpCJoAAAAAAFMRNAEAAAAApiJoAgAAAABMRdAEAAAAAJiKoAkAAAAAMJU11A0AAES+vIJ+qne4FZfAjx0AAKIBP/EBAO0ub3y/UDcBAAB0IIbOAgAAAABMRdAEAAAAAJiKoAkAAAAAMBVzNAEAEYtFiAAgsvC5Hj74FwIARCwWIQKAyMLnevhg6CwAAAAAwFQETQAAAACAqQiaAAAAAABTETQBAAAAAKYiaAIAAAAATEXQBAAAAACYiu1NAACdGnumAQAQfvipDQDo1NgzDQCA8MPQWQAAAACAqQiaAAAAAABTETQBAAAAAKYiaAIAAAAATEXQBAAAAACYiqAJAAAAADAVQRMAAAAAYCqCJgAAAADAVARNAAAAAICpCJoAAAAAAFMRNAEAAAAAprKGugEAgPCQV9BP9Q634hL40QEAAM6MbwsAgBbJG98v1E0AAABhgqGzAAAAAABT0aMJAACAoBgyD6C1+NQAAABAUAyZB9BaDJ0FAAAAAJiKoAkAAAAAMBVBEwAAAABgKoImAAAAAMBUBE0AAAAAgKkImgAAAAAAUxE0AQAAAACmYh9NhBU2jgYAAAA6v4j6tl5fX68XXnhBa9asUVVVlfr376+77rpLw4YNO2O9jRs3av369dq5c6eOHTumnj17asSIEfrJT36i5ORkw7lTpkzR4cOHA56jsLBQDz74oKmvB4HYOBoAAADo/CIqaD722GPasGGDJk+erN69e2vVqlV6+OGH9fTTT2vw4MFN1nviiSeUlpamcePGKSMjQ3v37tXSpUv10Ucf6YUXXpDdbjecn5OToxtvvNFQ1rt373Z5TQAAAAAQbiImaG7fvl3r1q3Tvffeq5tvvlmSdNVVV+mOO+7Qs88+q2effbbJurNnz9bQoUMNZbm5ufqf//kfrV27Vtdee63hWHp6usaNG2f+i4gCzhqXXA63JMnlcMtZ45I9yRbiVgEAAAAwU8QsBrRx40ZZLBYVFhb6y+x2u8aPH69t27bpyJEjTdY9PWRK0hVXXCFJ2r9/f9A6LpdLDoejbY2OMs4al5bP2iyXwyNJcjk8Wj5rs5w1rhC3DAAAAICZIqZHc/fu3erdu7eSkpIM5QMHDpQk7dmzRxkZGS1+vrKyMklS165dA4599tlnGjdunDwej8455xxNnjxZkydPbn3jJZWWlvqvebqSkpI2PXdnUbz+gCoO1RjKKg7VqHj9AQ2ekB2iVgEAAAAwW8QEzbKyMqWlpQWUN5aVlpae1fO9/PLLslgsGj16tKE8OztbgwcPVlZWliorK7Vq1Sr94Q9/UGlpqe69995Wt3/58uVasGBBq+uHg7KSyuDlX1d1cEsAAAAAtKeICZpOp1M2W+Bcv7i4OP/xllq7dq1WrFihm2++WVlZWYZjv/nNbwyPr7nmGj300ENavHixJk2apJ49e7ai9Q2r1l5++eVBj5WUlGju3Lmtet7OJK1vivZ+eCiwvE9ykLMBAAAAhKuICZp2u10uV+Bcv/r6ev/xlvj88881b948DR8+XHfffXez58fExGjKlCn65z//qa1bt7Z6kaD09HSlp6e3qm64yM3PUvGGbwzDZ1Mzk5Sbn3WGWgAAAADCTcQsBpSWlhZ0jmNjWUtC3J49ezRjxgxlZ2dr9uzZslpblsMbezErK4MPDUUDe5JNhbNHyJZgkSTZEiwqnD2CVWcBAACACBMxQXPAgAH65ptvVFNjXGxm+/bt/uNn8u233+rBBx9Ut27d9PjjjysxMbHF1z548KCk4AsHwcieZJMtoSHA2xKshEwAAAAgAkVM0BwzZow8Ho+WL1/uL6uvr9fKlSs1aNAg/4qzR44cCVjFtaysTNOmTVNsbKyeeOKJJgNjZWWlPB6Pocztduull16SzWYLuk0KAAAAAESbiJmjOWjQII0dO1bz589XeXm5evXqpdWrV+vw4cOaPn26/7xf//rX2rp1qzZt2uQve+ihh3Tw4EHdfPPNKioqUlFRkf9Yt27dNGzYMEnSBx98oIULF2r06NHKzMxUVVWV1q5dq3379umee+4JuuotAAAAAESbiAmakjRz5kxlZGTonXfeUXV1tbKzszVv3jwNGTLkjPX27NkjSXrllVcCjg0ZMsQfNLOzs9W3b1+tXbtW5eXlslqtysnJ0aOPPqqxY8ea/noAAAAAIBxFVNC02+2aOnWqpk6d2uQ5v//97wPKTu3dPJPc3NyA7U0AAAAAAEYRM0cTAAAAANA5EDQBAAAAAKYiaAIAAAAATEXQBAAAAACYiqAJAAAAADAVQRMAAAAAYCqCJgAAAADAVARNAAAAAICpCJoAAAAAAFMRNAEAAAAApiJoAgAAAABMRdAEAAAAAJiKoAkAAAAAMBVBEwAAAABgKoImAAAAAMBUBE0AAAAAgKkImgAAAAAAUxE0AQAAAACmImgCAAAAAExF0AQAAAAAmIqgCQAAAAAwlTXUDQAAScor6Kd6h1txCXwsAQAQqZw1LrkcbkmSy+GWs8Yle5ItxK1Ce+AbHYBOIW98v1A3AQAAtCNnjUvLZ22Wy+GRJLkcHi2ftVmFs0cQNiMQQ2cBAAAAtLvi9QdUcajGUFZxqEbF6w+EqEVoTwRNAAAAAO2urKQyePnXVR3cEnQEgiYAAACAdpfWNyV4eZ/kDm4JOgJBEwAAAEC7y83PUmpmkqEsNTNJuflZIWoR2hNBEwAAAEC7syfZVDh7hGwJFkmSLcHCQkARjKAJAAAAoEPYk2yyndjKzJZgJWRGMIImAAAAAMBUBE0AAAAAgKkImgAAAAAAUxE0AQAAAACmImgCAAAAAExF0AQAAAAAmIqgCQAAAAAwFUETAAAAAGAqgiYAAAAAwFQETQAAAACAqQiaAAAAAABTETQBAAAAAKYiaAIAAAAATEXQBAAAAACYiqAJAAAAADAVQRMAAAAAYCqCJgAAAADAVARNAAAAAICpCJoAAAAAAFMRNAEAAAAApiJoAgAAAABMRdAEAAAAAJiKoAkAAAAAMBVBEwAAAABgKoImAAAAAMBUBE0AAAAAgKkImgAAAAAAUxE0AQAAAACmImgCAAAAAExF0AQAAAAAmIqgCQAAAAAwFUETAAAAAGAqgiYAAAAAwFQETQAAAACAqQiaAAAAAABTWUPdADPV19frhRde0Jo1a1RVVaX+/fvrrrvu0rBhw5qte/ToUf3xj3/Uxx9/LK/Xq6FDh+q+++7TueeeG3Du22+/rVdffVWHDx9Wjx49dMMNN2jSpEnt8ZIAAAAAIOxEVI/mY489psWLF+vKK6/U/fffr9jYWD388MP64osvzlivtrZWDzzwgLZu3apbb71VP/3pT7V7927dd999qqioMJz75ptv6vHHH1e/fv30wAMP6KKLLtLTTz+tl156qT1fGgAAAACEjYjp0dy+fbvWrVune++9VzfffLMk6aqrrtIdd9yhZ599Vs8++2yTdZctW6ZvvvlGf/nLXzRw4EBJ0mWXXaY77rhDixYt0j333CNJcjqdev755zVixAjNmTNHkjRhwgR5vV4tXLhQhYWFSk5ObudXCgAAAACdW8T0aG7cuFEWi0WFhYX+MrvdrvHjx2vbtm06cuRIk3U3bNigCy64wB8yJalv3766+OKL9d577/nLPvvsM1VUVOi6664z1J84caIcDoc2b95s3gsCAAAAgDAVMUFz9+7d6t27t5KSkgzljeFxz549Qet5vV599dVXuuCCCwKODRw4UN9++61qa2v915AUcG5ubq5iY2O1a9euNr8OAAAAAAh3ETN0tqysTGlpaQHljWWlpaVB61VWVqq+vr7Zun369FFZWZksFou6detmOM9msyklJUVlZWWtbn9paWmT9UtKSlr9vAAAAADQ0SImaDqdTtlstoDyuLg4//Gm6klqUV2n0ymrNfgti4uLa/IaLbF8+XItWLCg1fUBAAAAoLOImKBpt9vlcrkCyuvr6/3Hm6onqUV17Xa73G530Oepr69v8hotUVhYqMsvvzzosZKSEs2dO7fVzw0AAAAAHSligmZaWpqOHj0aUN44HDU9PT1ovZSUFMXFxQUdtnp63bS0NHk8Hh0/ftwwfNblcqmysjLo8NuWSk9Pb7KNAAAAABBOImYxoAEDBuibb75RTU2NoXz79u3+48HExsYqOztbO3fuDDi2fft2nXvuuUpMTJQk5eTkSFLAuTt37pTX6/UfBwAAAIBoFjFBc8yYMfJ4PFq+fLm/rL6+XitXrtSgQYOUkZEhSTpy5EjA4jqjR4/Wzp07DQHy66+/1pYtWzRmzBh/2cUXX6yUlBS9+eabhvpvvvmm4uPjNWLEiHZ4ZQAAAAAQXiJm6OygQYM0duxYzZ8/X+Xl5erVq5dWr16tw4cPa/r06f7zfv3rX2vr1q3atGmTv2zixIl6++23NX36dN10002yWCxavHixunXrpptuusl/nt1u15133qmnnnpKs2bN0vDhw/X5559rzZo1uvvuu5WSktKhrxkAAAAAOqOICZqSNHPmTGVkZOidd95RdXW1srOzNW/ePA0ZMuSM9RITE/X000/rj3/8oxYuXCiv16uhQ4fq5z//ubp27Wo4d+LEibJarVq0aJE++OAD9ezZUz//+c81efLk9nthAAAAABBGIipo2u12TZ06VVOnTm3ynN///vdBy3v27KnZs2e36DoTJkzQhAkTWtVGAAAAAIh0ETNHEwAAAADQORA0AQAAAACmImgCAAAAAExF0AQAAAAAmIqgCQAAAAAwFUETAAAAAGAqgiYAAAAAwFQRtY8mwkNeQT/VO9yKS+DtBwAAAEQivumjw+WN7xfqJgAAAABoRwydBQAAAACYiqAJAAAAADAVQRMAAAAAYCqCJgAAAADAVARNAAAAAICpCJoAAAAAAFMRNAEAAAAApiJoAgAAAABMRdAEAAAAAJiKoAkAAAAAMBVBEwAAAABgKoImAAAAAMBUBE0AAAAAgKkImgAAAAAAUxE0AQAAAACmImgCAAAAAExF0AQAAAAAmIqgCQAAAAAwFUETAAAAAGAqgiYAAAAAwFQETQAAAACAqQiaAAAAAABTETQBAAAAAKYiaAIAAAAATEXQBAAAAACYiqAJAAAAADAVQRMAAAAAYCqCJgAAAADAVARNAAAAAICpCJoAAAAAAFMRNAEAAAAApiJoAgAAAABMZQ11AwAAAABEj7yCfqp3uBWXQBSJZPzrAgAAAOgweeP7hboJ6AAMnQUAAAAAmIqgCQAAAAAwFUETAAAAAGAqgiYAAAAAwFQETQAAAACAqQiaAAAAAABTETQBAAAAAKYiaAIAAAAATEXQBAAAAACYiqAJAAAAADAVQRMAAAAAYCqCJgAAAADAVARNAAAAAICpCJoAAAAAAFMRNAEAAAAApiJoAgAAAABMRdAEAAAAAJiKoAkAAAAAMBVBEwAAAABgKoImAAAAAMBUBE0AAAAAgKkImgAAAAAAU1lD3QCzVFVV6c9//rM2bdokp9OpgQMHaurUqcrNzT1jPa/Xq3feeUcbN27U7t27VVVVpczMTOXn5+umm26S3W43nH/FFVcEfZ577rlHt956q2mvBwAAAADCVUQETa/Xq+nTp2vv3r266aablJqaqmXLlumBBx7Qc889p6ysrCbr1tXV6bHHHtOFF16of/mXf1G3bt20bds2vfjii/rss8/0v//7v4qJiTHUufTSS3X11VcbynJyctrltQEAAABAuImIoLlhwwZ9+eWXmj17tsaMGSNJys/P1y233KIXX3xRs2bNarKuzWbTn/70J+Xl5fnLJkyYoHPOOUd//etf9emnn+rSSy811MnKytK4cePa5bUAAAAAQLiLiDmaGzduVPfu3Q3DWrt27aqxY8fq/fffV319fZN1bTabIWQ2GjVqlCSppKQkaD2n0ymn09nGlgMAAABA5ImIHs1du3YpJydHsbHG3Dxw4EC99dZbOnDggPr3739Wz3ns2DFJUmpqasCx1atXa9myZfL5fOrbt69uv/12XXnlla1/AZJKS0tVVlYW9FhTYRcAAAAAOqOICJrHjh3T9773vYDytLQ0SVJZWdlZB81XXnlFSUlJuuyyywzlF110kcaOHavMzEyVlZVpyZIlmjNnjmpqanTddde1+jUsX75cCxYsaHV9AAAAAOgsOl3Q9Hq9crlcLTo3Li5OMTExcjqdiouLC3pc0lkPcf3b3/6mTz75RL/4xS+UnJxsOPbMM88YHl9zzTW66667NH/+fBUUFASsUttShYWFuvzyy4Me27Nnj+bNm0fPJgAAAICQ69u3r+Lj4894TqcLmp9//rkeeOCBFp37t7/9TX379pXdbg86D7Ox7GzC37p16/T8889r/PjxLeqhtNlsuv766/Xkk0+quLhYgwcPbvG1TpWenq709PSgxxoD5ty5c1v13AAAAABglueee67ZbSQ7XdDs06ePZsyY0aJzG4fGdu/ePej8xsayxvOa8/HHH+t//ud/NGLECE2bNq2FLZZ69uwpSaqsrGxxnbMxfPhw/epXv1JmZmbQnttQKCkp0dy5c/WrX/1Kffv2DXVzIh73u+NwrzsW97vjcK87Fve743CvOxb3u2N11vvdkrZ0uqCZlpamgoKCs6qTk5OjL774Ql6v17Ag0I4dOxQfH3/GfTQbbd++Xb/61a+Um5urRx99VFZry2/NwYMHJTWsdNseunbt2mm3U+nbt2+zv82AebjfHYd73bG43x2He92xuN8dh3vdsbjfHSsc73dEbG8yevRoHTt2TJs2bfKXlZeX67333tPIkSMNvYDffvutvv32W0P9/fv3a/r06TrnnHM0b968JofalpeXB5TV1tbq9ddfV2pqatj94wMAAABAe+h0PZqtMWbMGL3++ut67LHHtH//fqWmpmrZsmXyer366U9/ajj3P//zPyVJixcvltQQFB988EFVVVXppptu0ubNmw3nn3vuubroooskSUuWLNH777+vkSNHKiMjQ2VlZVq5cqWOHDmiRx55RDabrQNeLQAAAAB0bhERNC0Wix5//HE988wzeuONN+R0OnXBBRdoxowZ6tOnzxnrVlRU6LvvvpMk/eUvfwk4fvXVV/uDZl5enr788ku9/fbbqqysVHx8vAYOHKjp06frkksuMf+FAQAAAEAYioigKUnJycmaPn26pk+ffsbzGnsyG2VmZhqG3J7JsGHDNGzYsFa3EQAAAACiQUTM0QQAAAAAdB4ETbRKWlqa7rjjjhZvHYO24X53HO51x+J+dxzudcfifncc7nXH4n53rHC+3zE+n88X6kYAAAAAACIHPZoAAAAAAFMRNAEAAAAApiJoAgAAAABMRdAEAAAAAJiKoAkAAAAAMBVBEwAAAABgKoImAAAAAMBUBE0AAAAAgKkImgAAAAAAUxE0AQAAAACmImgCAAAAAExF0AQAAAAAmIqgCQAAAAAwlTXUDUDo1NfX64UXXtCaNWtUVVWl/v3766677tKwYcOarXv06FH98Y9/1Mcffyyv16uhQ4fqvvvu07nnnhtw7ttvv61XX31Vhw8fVo8ePXTDDTdo0qRJ7fGSOq3W3uuNGzdq/fr12rlzp44dO6aePXtqxIgR+slPfqLk5GTDuVOmTNHhw4cDnqOwsFAPPvigqa+ns2vt/f7rX/+qBQsWBJTHxcXp3XffDSjnvd36e93U+1WSevXqpVdeecX/+Iorrgh63j333KNbb7219Y0PQ7W1tXr11Ve1fft27dixQ1VVVZoxY4YKCgpaVL+qqkp//vOftWnTJjmdTg0cOFBTp05Vbm5uwLnvv/++XnzxRZWUlKhr16665pprdPvtt8tqjY6vDm25159++qnWrl2rL774QkePHlX37t118cUX684771R6errh3Pvvv19bt24NeI7hw4friSeeMOvldHptud+rVq3SY489FvTY0qVLlZaWZijjvd36e93U+1WSLBaL3nvvPf9jvpdIO3bs0OrVq7VlyxYdPnxYKSkpuvDCC3XXXXcpKyur2frh/pkdHf+jENRjjz2mDRs2aPLkyerdu7dWrVqlhx9+WE8//bQGDx7cZL3a2lo98MADqqmp0a233iqr1arFixfrvvvu01//+lelpqb6z33zzTf15JNPavTo0brxxhv1xRdf6Omnn1ZdXZ1+/OMfd8TL7BRae6+feOIJpaWlady4ccrIyNDevXu1dOlSffTRR3rhhRdkt9sN5+fk5OjGG280lPXu3btdXlNn1tr73WjatGlKSEjwP46NDRz8wXu7QWvv9X333SeHw2EoO3z4sJ5//vmgIfXSSy/V1VdfbSjLyckx50WEkYqKCi1YsEAZGRkaMGCAtmzZ0uK6Xq9X06dP1969e3XTTTcpNTVVy5Yt0wMPPKDnnnvO8KXno48+0iOPPKIhQ4bogQce0FdffaWFCxfq+PHjmjZtWnu8tE6nLff6z3/+syorKzVmzBhlZWXp4MGDWrJkiTZv3qwXXnghIPj06NFDP/vZzwxlp58T6dpyvxvdeeedyszMNJR16dLF8Jj3dtvu9W233aZrr73WUOZwOPTkk08G/eyO9u8lL7/8soqKijR27Fj1799fZWVlWrp0qe666y49++yzys7ObrJuRHxm+xCVtm3b5hs1apTv5Zdf9pfV1dX5brrpJt+//du/nbHuSy+95Bs1apRv+/bt/rL9+/f7xowZ4/vLX/5ieL5rr73W9/DDDxvqz5492zdu3DhfZWWlSa+mc2vLvf7ss88CylatWuUbNWqU76233jKUT548OeBeR6O23O8XXnjBN2rUKN/x48fPeB7v7QZtudfBLFiwwDdq1CjfF198YSgfNWqU73e/+12b2xsJnE6nr7S01Ofz+Xw7duzwjRo1yrdy5coW1V23bp1v1KhRvvfee89fdvz4cV9BQYHv0UcfNZx72223+f71X//V53K5/GXz58/3XXHFFb79+/e3/YWEgbbc6y1btvg8Hk9A2ahRo3zz5883lN93332+22+/3ZxGh7G23O+VK1f6Ro0a5duxY0ez5/Lebtu9Duadd97xjRo1yrdmzRpDOd9LfL4vvvjCV19fbyj7+uuvfT/84Q99s2fPPmPdSPjMZo5mlNq4caMsFosKCwv9ZXa7XePHj9e2bdt05MiRJutu2LBBF1xwgQYOHOgv69u3ry6++GLDkInPPvtMFRUVuu666wz1J06cKIfDoc2bN5v3gjqxttzroUOHBpQ1DiPcv39/0DoulyugpyiatOV+n6qmpkY+ny/oMd7bDcy6143effddZWZmKi8vL+hxp9Mpp9PZpjaHu7i4uFb3dG3cuFHdu3c3DEXu2rWrxo4dq/fff1/19fWSGj5b9u/frwkTJhiGXE2cOFE+n08bNmxo02sIF22510OGDAkYCTFkyBClpKSopKQkaB23263a2tpWXS8StOV+n6q2tlYejyfoMd7bDcy6143Wrl2rhIQE/eAHPwh6PJq/l+Tl5clmsxnKsrKydN555zX5WdAoEj6zCZpRavfu3erdu7eSkpIM5Y3hcc+ePUHreb1effXVV7rgggsCjg0cOFDffvut/wfl7t27JSng3NzcXMXGxmrXrl1tfh3hoLX3uillZWWSGj5sTvfZZ59p3LhxuuqqqzRlyhS99tprrWt0GDPjft94440qKCjQ1VdfrTlz5ujYsWMB15B4b5v53t61a5dKSkr0ox/9KOjx1atXa9y4cbryyit12223ae3ata1veJTatWuXcnJyAgLQwIEDVVdXpwMHDvjPkxQwByg9PV09evTwv/9xdmpra+VwOAzTSxodOHBAV111la6++mpdd911ev755+V2u0PQyvD2wAMP6Oqrr9a4ceP0y1/+0v+ebsR723zl5eX65JNP9IMf/MAw5aQR30sC+Xw+HT9+POhnwaki4TObOZpRqqysLOhvsxrLSktLg9arrKxUfX19s3X79OmjsrIyWSwWdevWzXCezWZTSkqKPzBFutbe66a8/PLLslgsGj16tKE8OztbgwcPVlZWliorK7Vq1Sr94Q9/UGlpqe69997Wv4Aw05b7nZycrOuvv14XXnihbDabvvjiCy1dulQ7duzQc8895w9UvLcbmPnebgyOV155ZcCxiy66SGPHjlVmZqbKysq0ZMkSzZkzRzU1NQG9ymjasWPH9L3vfS+gvPHfq6yszD+H6NTy08+Nlve32V577TW5XC7l5+cbys8991wNHTpU2dnZqqur04YNG7Rw4UIdOHBAjz76aIhaG17sdrsKCgo0dOhQJSUlqbi4WIsXL9bUqVP1/PPPKyMjQ5J4b7eDdevWyePxBP3s5ntJcGvXrtXRo0f105/+9IznRcJnNkEzSjmdzoCufKlhOEXj8abqSWpRXafT2eRKV3FxcVEzBK619zqYtWvXasWKFbr55psDViv7zW9+Y3h8zTXX6KGHHtLixYs1adIk9ezZsxWtDz9tud+TJ082PB4zZowGDhyoOXPmaOnSpf4VTnlvNzDrve31erV+/Xrl5OTovPPOCzj+zDPPGB5fc801uuuuuzR//nwVFBQELIqF4JxOp//f5lSn/3s1Dsdq6txoHt7ZWlu3btWCBQs0duxYXXLJJYZjv/zlLw2Pr7rqKv32t7/VW2+9pSlTpujCCy/syKaGpfz8fEOAHzVqlIYPH6777rtPf/vb3/wrnPLeNt+7776rrl276tJLLw04xveSQCUlJXrqqad04YUXBixwd7pI+Mxm6GyUstvtcrlcAeWNb9amvrg1lrekrt1ub3LoT319fdR8OWztvT7d559/rnnz5mn48OG6++67mz0/JiZGU6ZMkcfjaXIp8khk1v1udOWVV6p79+769NNPDdfgvW3evd66dauOHj0a9DfiwdhsNl1//fWqrq5WcXFxyxsc5ex2u//f5lSn/3s1fllp6txoeX+bpaSkRL/61a+UnZ2t6dOnt6hO4yqdn3zySXs2LaINHjxYgwYNMnx2894218GDB7Vt2zbl5+e3aAuNaP1e0qisrEzTp09XUlKS5syZI4vFcsbzI+Ezm6AZpZrqSm8sO32fr0YpKSmKi4trUd20tDR5PB4dP37ccJ7L5VJlZWXULN3e2nt9qj179mjGjBnKzs7W7NmzW7wnUuNvCysrK8+ixeHNjPt9up49exruIe/tBmbd67Vr1yo2NrbJ+ZnBRON7u626d+9+xn+vxvftqcOygp0bLe9vMxw5ckTTpk1TUlKS5s2bp8TExBbVa3x/V1VVtWfzIl6wz26J97ZZzjTloSnR+tldXV2thx9+WNXV1XriiSda9PMxEj6zCZpRasCAAfrmm29UU1NjKN++fbv/eDCxsbHKzs7Wzp07A45t375d5557rv8HaeMed6efu3PnTnm93qjZA6+197rRt99+qwcffFDdunXT448/3uIvKlLDbxul4AsHRaq23u/T+Xw+HT582HAPeW83MONe19fXa+PGjRoyZMhZ/RIgGt/bbZWTk6Pdu3fL6/Uaynfs2KH4+Hj/cPzG9+/pvcWlpaU6evRo1Ly/26qiokLTpk2Ty+Vq8RfLRry/zXHw4MGgn928t83x7rvvqlevXmc1vDsa39tOp9O/ONVvfvOboFNEgomEz2yCZpQaM2aMPB6Pli9f7i+rr6/XypUrNWjQIP/E+SNHjgQsvzx69Gjt3LnT8CX766+/1pYtWzRmzBh/2cUXX6yUlBS9+eabhvpvvvmm4uPjNWLEiHZ4ZZ1PW+51WVmZpk2bptjYWD3xxBNNfjBXVlYGLOfudrv10ksvyWazBd0mJVK15X6Xl5cHPN+yZctUXl6uyy67zF/Ge7tBW+51o48++kjV1dVN/kY82L9JbW2tXn/9daWmpgassocGpaWlKikpMQzxHj16tI4dO6ZNmzb5y8rLy/Xee+9p5MiR/uFX/fr1U58+ffTWW28ZPleWLVummJiYgIXIol2we+1wOPTwww+rtLRUjz/+eMCc+kY1NTUBw918Pp8WLlwoSRo2bFj7NTxMBbvfwT4nNm/erOLiYg0fPtxfxnv77AS7142aWymc7yUNPB6P/vu//1vbtm3To48+qosuuijoeZH6mc1iQFFq0KBBGjt2rObPn6/y8nL16tVLq1ev1uHDhw1zSH79619r69athjf5xIkT9fbbb2v69Om66aabZLFYtHjxYnXr1k033XST/zy73a4777xTTz31lGbNmqXhw4fr888/15o1a3T33XcrJSWlQ19zqLTlXj/00EM6ePCgbr75ZhUVFamoqMh/rFu3bv4vIR988IEWLlyo0aNHKzMzU1VVVVq7dq327dune+65J6qGA7Xlfk+ePFn5+fnKzs5WXFycioqKtG7dOuXk5ATsFcl7u233utHatWsVFxfX5A/CJUuW6P3339fIkSOVkZGhsrIyrVy5UkeOHNEjjzwSdDGiSPfGG2+ourraP0zqgw8+0HfffSdJmjRpkrp06aL58+dr9erVWrRokTIzMyU1/GLg9ddf12OPPab9+/crNTVVy5Ytk9frDVj9cOrUqZoxY4amTZumH/7wh/rqq6+0dOlSXXvttS3+bXwkaO29njNnjnbs2KFrrrlGJSUlhl+0JCQkaNSoUZIavqw/+uij+tGPfqRevXrJ6XTq73//u4qKijRhwoSo+0VKa+/3vffeq/PPP1+5ublKSkrSrl27tHLlSvXs2VO33Xab4Rq8txu09l43am7YLN9LGvzpT3/SBx98oJEjR6qqqkpr1qwxHB83bpwkRexnNkEzis2cOVMZGRl65513VF1drezsbM2bN09Dhgw5Y73ExEQ9/fTT+uMf/6iFCxfK6/Vq6NCh+vnPfx7Q4zZx4kRZrVYtWrRIH3zwgXr27Kmf//znAat7RrrW3uvGfQhfeeWVgGNDhgzxB83s7Gz17dtXa9euVXl5uaxWq3JycvToo49q7Nixpr+ezq619/vKK6/Ul19+qY0bN6q+vl4ZGRm6+eabdfvttys+Pt5wLu/tBq2911JDb87mzZv1/e9/X126dAl6Tl5enr788ku9/fbbqqysVHx8vAYOHKjp06cHrN4ZLRYtWqTDhw/7H2/atMkf4seNG9fkvbRYLHr88cf1zDPP6I033pDT6dQFF1ygGTNmqE+fPoZzR44cqblz52rBggV6+umnlZqaqltvvVV33HFHu72uzqi197rxs3vlypVauXKl4dg555zjD5oZGRn63ve+p02bNunYsWOKjY1V3759NW3aNMMvt6JFa+93fn6+PvroI3388ceqq6tTWlqaJkyYoDvuuEPdu3c3nMt7u0Fr77V0cqXw888/P+CzoxHfSxo0fhZ8+OGH+vDDDwOONwbNYCLhMzvG5/P5QtoCAAAAAEBEYY4mAAAAAMBUBE0AAAAAgKkImgAAAAAAUxE0AQAAAACmImgCAAAAAExF0AQAAAAAmIqgCQAAAAAwFUETAAAAAGAqgiYAAAAAwFQETQAAAACAqQiaAAAAAABTETQBAAAAAKYiaAIAEIF8Pp8eeughXXHFFVq3bl2LjwEAYAaCJgAAESgmJkYzZsxQt27d9OSTT+rw4cP+Y6+99pr+8Y9/qKCgQD/84Q9D2EoAQKQiaAIAEKG6d++umTNnqqamRrNnz5bH49Hu3bv1l7/8Rb1799YDDzwQ6iYCACJUjM/n84W6EQAAoP384Q9/0GuvvaabbrpJH374oQ4ePKhnn31Wubm5oW4aACBCETQBAIhw9fX1uvfee7V7925J0r/927/plltuCXGrAACRjKGzAABEuLi4OF122WX+v1977bUhbhEAINIRNAEAiHDbt2/XK6+8otTUVNXX1+vJJ58MdZMAABGOoAkAQASrra3V7NmzZbFY9PTTT2v06NF67733tGLFilA3DQAQwQiaAABEsN/97nc6ePCgpk6dquzsbD388MPq2bOnfv/73+vAgQOhbh4AIEIRNAEAiFBr1qzRmjVrNHLkSF1//fWSpOTkZP3qV7+S0+nU7Nmz5Xa7Q9xKAEAkImgCABCBDh48qKeeekppaWn65S9/aTg2ZMgQ/fjHP1ZxcbHmz58fohYCACIZ25sAAAAAAExFjyYAAAAAwFQETQAAAACAqQiaAAAAAABTETQBAAAAAKYiaAIAAAAATEXQBAAAAACYiqAJAAAAADAVQRMAAAAAYCqCJgAAAADAVARNAAAAAICpCJoAAAAAAFMRNAEAAAAApiJoAgAAAABM9f8BJV3WY8xyZfEAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "286847b1",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e2aa3188",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:02.361989Z",
     "iopub.status.busy": "2025-02-06T02:56:02.361773Z",
     "iopub.status.idle": "2025-02-06T02:56:02.367674Z",
     "shell.execute_reply": "2025-02-06T02:56:02.367158Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d126116",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3ec0d4b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:02.369684Z",
     "iopub.status.busy": "2025-02-06T02:56:02.369196Z",
     "iopub.status.idle": "2025-02-06T02:56:53.415763Z",
     "shell.execute_reply": "2025-02-06T02:56:53.415123Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "38127053691145fa9c21b2e45afd7744",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3904ca0",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "583457ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:53.418016Z",
     "iopub.status.busy": "2025-02-06T02:56:53.417604Z",
     "iopub.status.idle": "2025-02-06T02:56:53.422107Z",
     "shell.execute_reply": "2025-02-06T02:56:53.421446Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.283), ('data', 0.283)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b38d5304",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6787f735",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:53.424196Z",
     "iopub.status.busy": "2025-02-06T02:56:53.423843Z",
     "iopub.status.idle": "2025-02-06T02:56:54.159242Z",
     "shell.execute_reply": "2025-02-06T02:56:54.158546Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">02:56:53 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m02:56:53\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=231160;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=872361;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=509566;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=325717;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=862000;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=508417;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=605584;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=310024;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=619315;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=917907;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=661615;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=338537;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=408385;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=728137;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=506418;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=422788;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=391363;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=750203;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">02:56:54 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m02:56:54\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=643181;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=914452;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=806085;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=955883;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=607996;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=103337;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cc02d475",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:54.161503Z",
     "iopub.status.busy": "2025-02-06T02:56:54.161135Z",
     "iopub.status.idle": "2025-02-06T02:56:54.653420Z",
     "shell.execute_reply": "2025-02-06T02:56:54.652746Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48dc1212",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "94a9ea51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:54.655692Z",
     "iopub.status.busy": "2025-02-06T02:56:54.655300Z",
     "iopub.status.idle": "2025-02-06T02:56:54.661263Z",
     "shell.execute_reply": "2025-02-06T02:56:54.660755Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e9f18a55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:54.663277Z",
     "iopub.status.busy": "2025-02-06T02:56:54.662915Z",
     "iopub.status.idle": "2025-02-06T02:56:54.665670Z",
     "shell.execute_reply": "2025-02-06T02:56:54.665177Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "995bf67f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:54.667554Z",
     "iopub.status.busy": "2025-02-06T02:56:54.667185Z",
     "iopub.status.idle": "2025-02-06T02:56:54.750919Z",
     "shell.execute_reply": "2025-02-06T02:56:54.750411Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1046</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=539334;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=594681;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\u001b\\\u001b[2m1046\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(5.9 -0.6 +0.7) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.50 +/- 0.07</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       result             unit\n",
       "parameter                                                                     \n",
       "test_pl.spectrum.main.Powerlaw.K      (5.9 -0.6 +0.7) x 10^-1  1 / (keV s cm2)\n",
       "test_pl.spectrum.main.Powerlaw.index           -1.50 +/- 0.07                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140666634628352\">\n",
       "<tr><td>1.00</td><td>0.30</td></tr>\n",
       "<tr><td>0.30</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.30\n",
       "0.30 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>212.161368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>212.161368</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         212.161368\n",
       "total        212.161368"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>428.578056</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>432.146783</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            428.578056\n",
       "BIC            432.146783"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e730a61a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:54.752916Z",
     "iopub.status.busy": "2025-02-06T02:56:54.752527Z",
     "iopub.status.idle": "2025-02-06T02:56:54.849123Z",
     "shell.execute_reply": "2025-02-06T02:56:54.848600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1046</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=683923;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=915122;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\u001b\\\u001b[2m1046\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>1.05 -0.20 +0.24</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>-1.09 +/- 0.17</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(3.5 -1.1 +1.6) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                              result  \\\n",
       "parameter                                                              \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K            1.05 -0.20 +0.24   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index          -1.09 +/- 0.17   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc     (3.5 -1.1 +1.6) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (keV s cm2)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140666634659104\">\n",
       "<tr><td>1.00</td><td>0.81</td><td>-0.89</td></tr>\n",
       "<tr><td>0.81</td><td>1.00</td><td>-0.85</td></tr>\n",
       "<tr><td>-0.89</td><td>-0.85</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.81 -0.89\n",
       " 0.81  1.00 -0.85\n",
       "-0.89 -0.85  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>207.821901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>207.821901</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         207.821901\n",
       "total        207.821901"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>422.16554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>427.37987</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             422.16554\n",
       "BIC             427.37987"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab39feb5",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2be172ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:54.850939Z",
     "iopub.status.busy": "2025-02-06T02:56:54.850758Z",
     "iopub.status.idle": "2025-02-06T02:56:54.855846Z",
     "shell.execute_reply": "2025-02-06T02:56:54.855261Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 0.001766322236381778\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fd2fc10",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a58d6c47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:54.857820Z",
     "iopub.status.busy": "2025-02-06T02:56:54.857425Z",
     "iopub.status.idle": "2025-02-06T02:56:54.860876Z",
     "shell.execute_reply": "2025-02-06T02:56:54.860323Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10384b9a",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ae20af32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:56:54.862794Z",
     "iopub.status.busy": "2025-02-06T02:56:54.862401Z",
     "iopub.status.idle": "2025-02-06T02:58:57.312979Z",
     "shell.execute_reply": "2025-02-06T02:58:57.312218Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e3bdf6b315b14bcab2a8f249f5a56293",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "718ee6e5",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1c1d6d8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:58:57.315559Z",
     "iopub.status.busy": "2025-02-06T02:58:57.315148Z",
     "iopub.status.idle": "2025-02-06T02:58:57.319623Z",
     "shell.execute_reply": "2025-02-06T02:58:57.319002Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.003"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7467491",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c5e90338",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:58:57.321686Z",
     "iopub.status.busy": "2025-02-06T02:58:57.321260Z",
     "iopub.status.idle": "2025-02-06T02:58:57.825906Z",
     "shell.execute_reply": "2025-02-06T02:58:57.825162Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "473468f4",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a6936939",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T02:58:57.828105Z",
     "iopub.status.busy": "2025-02-06T02:58:57.827758Z",
     "iopub.status.idle": "2025-02-06T02:58:58.359163Z",
     "shell.execute_reply": "2025-02-06T02:58:58.358471Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75c17194",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.21"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "01591b81ae904fdd8c881e70eb0a0f07": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "032a9438e4a1443d92b0be3224dcbfe7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0864794c94324c0eb41896489a0a498d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3620ac2dd52a45ce8285624fde9ffcc3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "37c65364226147699058dfc50e8d5a83": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ac7df14d57bc4662bb1a4da913caf265",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_3620ac2dd52a45ce8285624fde9ffcc3",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "38127053691145fa9c21b2e45afd7744": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8a09b945e4344c9f9d2a772827cc119b",
        "IPY_MODEL_434954a1431d4a83aa6635ec2238bb62",
        "IPY_MODEL_6228fe26dc1e4c188e562067a54d59f3"
       ],
       "layout": "IPY_MODEL_01591b81ae904fdd8c881e70eb0a0f07",
       "tabbable": null,
       "tooltip": null
      }
     },
     "434954a1431d4a83aa6635ec2238bb62": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b5ff7495579a4e5a9761fe1228a06eca",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_64ce89058eec41e7b661d7d40217673b",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "4e4605eda6714de2afc873a0b6237c4b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6228fe26dc1e4c188e562067a54d59f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c4e66b1cc2b64896b7358681d0f3ce3a",
       "placeholder": "​",
       "style": "IPY_MODEL_6362609bef8e4579b755c21f6aed6fd9",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:50&lt;00:00, 19.78it/s]"
      }
     },
     "6362609bef8e4579b755c21f6aed6fd9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "64ce89058eec41e7b661d7d40217673b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "7c1621eb0dbc4d16a34d550070bb6e5d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4e4605eda6714de2afc873a0b6237c4b",
       "placeholder": "​",
       "style": "IPY_MODEL_ae38bec9fe4c4b108385497ecffec7a0",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [02:02&lt;00:00,  8.26it/s]"
      }
     },
     "8a09b945e4344c9f9d2a772827cc119b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_032a9438e4a1443d92b0be3224dcbfe7",
       "placeholder": "​",
       "style": "IPY_MODEL_9961acb64c904bafbf998db2e7644fa7",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "9961acb64c904bafbf998db2e7644fa7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ac7df14d57bc4662bb1a4da913caf265": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ae38bec9fe4c4b108385497ecffec7a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b5ff7495579a4e5a9761fe1228a06eca": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ba882b1b8be4462b847b31b3dc4da37f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "c4e66b1cc2b64896b7358681d0f3ce3a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cc3f2afff5fe45858ece24519e7cfe54": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f71e8b7a28a3470ab686f43ac36c2632",
       "placeholder": "​",
       "style": "IPY_MODEL_0864794c94324c0eb41896489a0a498d",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "e3bdf6b315b14bcab2a8f249f5a56293": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_cc3f2afff5fe45858ece24519e7cfe54",
        "IPY_MODEL_37c65364226147699058dfc50e8d5a83",
        "IPY_MODEL_7c1621eb0dbc4d16a34d550070bb6e5d"
       ],
       "layout": "IPY_MODEL_ba882b1b8be4462b847b31b3dc4da37f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f71e8b7a28a3470ab686f43ac36c2632": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
