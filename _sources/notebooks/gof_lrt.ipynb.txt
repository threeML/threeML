{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5fa791ed",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4c104266",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:00.937330Z",
     "iopub.status.busy": "2024-08-13T22:12:00.937137Z",
     "iopub.status.idle": "2024-08-13T22:12:00.995097Z",
     "shell.execute_reply": "2024-08-13T22:12:00.994444Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e7755cf3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:00.997628Z",
     "iopub.status.busy": "2024-08-13T22:12:00.997209Z",
     "iopub.status.idle": "2024-08-13T22:12:03.955116Z",
     "shell.execute_reply": "2024-08-13T22:12:03.954398Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "553a552c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:03.958283Z",
     "iopub.status.busy": "2024-08-13T22:12:03.957635Z",
     "iopub.status.idle": "2024-08-13T22:12:03.987578Z",
     "shell.execute_reply": "2024-08-13T22:12:03.986965Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e7eaa58",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bcf8a5ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:03.990242Z",
     "iopub.status.busy": "2024-08-13T22:12:03.989871Z",
     "iopub.status.idle": "2024-08-13T22:12:05.929067Z",
     "shell.execute_reply": "2024-08-13T22:12:05.928336Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">22:12:03 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m22:12:03\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=354857;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=587878;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">22:12:05 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m22:12:05\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=826286;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=44871;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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zpwZt912W4eLkaeeeir+7d/+LU4++eSYOXNm/PnPf4477rgj3n777bjqqqv64qvlpJ7s75/97Gexffv2mDRpUlRWVsbrr78eDzzwQKxevTpuv/32TqHkPe95T/zrv/5rh7Z3r1PoerK/23zxi1+MESNGdGg7/PDDO/zZ8d2zfX3ppZfGOeec06GtsbExvv/973d57k76dcmdd94ZNTU1MXny5Dj22GOjvr4+FixYENOnT49bb701xowZs9dt8/683UrOeeGFF1onTpzYeuedd7a37d69u/Wiiy5q/fKXv7zPbX/961+3Tpw4sXXt2rXtba+88krrpEmTWn/+8593+Lxzzjmn9eqrr+6w/dy5c1unTJnSun379l76NrmvJ/v7D3/4Q6e2JUuWtE6cOLH1d7/7XYf2Cy64oNP+Tpqe7Ovbb7+9deLEia1vv/32PtdzbP9NT/Z3V+bPn986ceLE1ueee65D+8SJE1t/8IMf9LjefJdKpVo3b97c2tra2rpu3brWiRMnti5evPiAtn3sscdaJ06c2Pr444+3t7399tutU6dObb322ms7rHvppZe2fv7zn29Np9PtbfPmzWv96Ec/2vrKK6/0/IvkiZ7s7zVr1rS2tLR0aps4cWLrvHnzOrRfeeWVrZ/97Gd7p+g81pP9vXjx4taJEye2rlu3br/rOr57tq+78vDDD7dOnDix9ZFHHunQ7rqktfW5555rbWpq6tD26quvtn7sYx9rnTt37j63zffztjGBOWjlypVRVFQU06ZNa28rLS2Ns88+O1544YV4880397rtihUr4vjjj49x48a1t40aNSo+8IEPdOgC8Ic//CG2bdsW//zP/9xh+09+8pPR2NgYq1ev7r0vlON6sr8nTJjQqa2ta9wrr7zS5TbpdLrTE5ak6Mm+/nsNDQ3R2tra5TLH9t/01v5u8+ijj8aIESNi/PjxXS5PpVKRSqV6VHM+Kykp6fbToZUrV8aQIUM6dK0dPHhwTJ48OX7/+99HU1NTRLxzXnnllVfi3HPP7dCF6JOf/GS0trbGihUrevQd8klP9vfJJ5/cqRfBySefHAMHDoy6urout2lubo5du3Z16+8rBD3Z339v165d0dLS0uUyx/c7emtft1m2bFmUlZXFRz7ykS6XJ/m6ZPz48VFcXNyhrbKyMo455pi9ngva5Pt5WwjMQevXr4+jjz46ysvLO7S3BbuXX365y+327NkTf/7zn+P444/vtGzcuHHx3//93+0/YOvXr4+I6LRuVVVV9OvXL1566aUef4980d39vTf19fUR8c6J4N3+8Ic/xJQpU+LjH/94XHjhhXHvvfd2r+g81Rv7+tOf/nRMnTo1zjrrrLjuuutiy5Ytnf6OCMd2RO8e2y+99FLU1dXFP/3TP3W5fOnSpTFlypQ488wz49JLL41ly5Z1v/AEeumll2Ls2LGdgsm4ceNi9+7dsXHjxvb1IqLTeJOhQ4fGe97znvbjn4O3a9euaGxs7DBsos3GjRvj4x//eJx11lnxz//8z/GLX/wimpubs1Blfps5c2acddZZMWXKlPjmN7/Zfly3cXz3vq1bt8Z//dd/xUc+8pEOQynaJP26pCutra3x9ttvd3ku+Hv5ft42JjAH1dfXd3kHqK1t8+bNXW63ffv2aGpq2u+2I0eOjPr6+igqKoojjjiiw3rFxcUxcODA9iCTBN3d33tz5513RlFRUZxxxhkd2seMGRMnnXRSVFZWxvbt22PJkiXx4x//ODZv3hxXXHFF979AHunJvh4wYECcd955ceKJJ0ZxcXE899xzsWDBgli3bl3cdttt7UHHsf03vXlst4W6M888s9Oy973vfTF58uQYMWJE1NfXxwMPPBDXXXddNDQ0dHoiS9e2bNkS73//+zu1t/1b1dfXt49X+fv2d6+bpOO7t917772RTqejurq6Q/uRRx4ZEyZMiDFjxsTu3btjxYoVcccdd8TGjRvj2muvzVK1+aW0tDSmTp0aEyZMiPLy8qitrY177rknZsyYEb/4xS9i+PDhERGO7z7w2GOPRUtLS5fnbtclXVu2bFm89dZb8YUvfGGf6+X7eVsIzEGpVKrTo+mId7oHtC3f23YRcUDbplKpvc5GVFJSkqguXd3d311ZtmxZLFq0KC6++OJOs0p997vf7fDnT3ziE/GNb3wj7rnnnjj//PNj2LBh3ag+v/RkX19wwQUd/jxp0qQYN25cXHfddbFgwYL2WSgd23/TW8f2nj17Yvny5TF27Ng45phjOi3/6U9/2uHPn/jEJ2L69Okxb968mDp1aqcJkugslUq1/7v8vXf/W7V1L9rbuknurtgTzz77bMyfPz8mT54cH/zgBzss++Y3v9nhzx//+Mfj//yf/xO/+93v4sILL4wTTzwxk6Xmperq6g7heuLEiXHKKafElVdeGf/+7//ePhOl47v3PfroozF48OD4x3/8x07LXJd0VldXFz/84Q/jxBNP7DTZ2bvl+3lbd9AcVFpaGul0ulN720G0twuqtvYD2ba0tHSvXVmampoSddHW3f39bn/84x/jxhtvjFNOOSUuv/zy/a5/yCGHxIUXXhgtLS17nc650PTWvm5z5plnxpAhQ+KZZ57p8Hc4tt/RW/v72WefjbfeeqvLO8ldKS4ujvPOOy927twZtbW1B15wgpWWlrb/u/y9d/9btV1E7G3dJB3fvaWuri6+9a1vxZgxY2LWrFkHtE3bbIr/9V//1ZelFbSTTjopTjjhhA7nb8d373r99dfjhRdeiOrq6gN6DUESr0v+Xn19fcyaNSvKy8vjuuuui6Kion2un+/nbSEwB+3t0XBb27vfYdRm4MCBUVJSckDbVlRUREtLS7z99tsd1kun07F9+/ZETX3d3f39915++eWYPXt2jBkzJubOnXvA73xpu8u2ffv2g6g4f/XGvn63YcOGddh/ju2/6a39vWzZsujXr99exwN2JWnHdk8NGTJkn/9Wbcft33cz6mrdJB3fveHNN9+Mq666KsrLy+PGG2+Mww477IC2azu+d+zY0ZflFbyuzt8Rju/esq9u/HuT1HP3zp074+qrr46dO3fG9773vQP6fcz387YQmIOOO+64eO2116KhoaFD+9q1a9uXd6Vfv34xZsyYePHFFzstW7t2bRx55JHtP3Bt7+9697ovvvhi7NmzJ1Hv9+ru/m7z3//93/H1r389jjjiiLjpppsO+CIi4p27dBFdTyJTiHq6r9+ttbU1Nm3a1GH/Obb/pjf2d1NTU6xcuTJOPvnkgwrpSTu2e2rs2LGxfv362LNnT4f2devWxaGHHtrevbzt+H33E9bNmzfHW2+9lajju6e2bdsWV111VaTT6QO+6Gvj+O4dr7/+epfnb8d373j00UfjqKOOOqguy0k8tlOpVPtERd/97ne7HPbQlXw/bwuBOWjSpEnR0tISCxcubG9ramqKxYsXxwknnNA+gPrNN9/sNH3tGWecES+++GKHC+BXX3011qxZE5MmTWpv+8AHPhADBw6M3/72tx22/+1vfxuHHnponHrqqX3wzXJTT/Z3fX19XHXVVdGvX7/43ve+t9eT5vbt2ztNid3c3By//vWvo7i4uMtXTRSinuzrrVu3dvq8Bx98MLZu3Rof/vCH29sc23/Tk/3d5qmnnoqdO3fu9U5yV/8uu3btivvuuy8GDRrUaTY03vnhr6ur69Bt+YwzzogtW7bEqlWr2tu2bt0ajz/+eJx22mnt3YlGjx4dI0eOjN/97ncdzikPPvhgHHLIIZ0mpKLr/d3Y2BhXX311bN68OW666aZOY7jbNDQ0dOrC1draGnfccUdERJcv3066rvZ3V+eJ1atXR21tbZxyyintbY7vg9PVvm6zvxmdXZe8o6WlJb797W/HCy+8ENdee228733v63K9QjxvmxgmB51wwgkxefLkmDdvXmzdujWOOuqoWLp0aWzatKnDeIXvfOc78eyzz3Y4+D75yU/GQw89FLNmzYqLLrooioqK4p577okjjjgiLrroovb1SktL44tf/GL88Ic/jDlz5sQpp5wSf/zjH+ORRx6Jyy+/PAYOHJjR75xNPdnf3/jGN+L111+Piy++OGpqaqKmpqZ92RFHHNF+gfDEE0/EHXfcEWeccUaMGDEiduzYEcuWLYsNGzbEl770pcR0cenJvr7ggguiuro6xowZEyUlJVFTUxOPPfZYjB07ttN78Bzb7+jJ/m6zbNmyKCkp2euP1AMPPBC///3v47TTTovhw4dHfX19LF68ON588834t3/7ty4npilk999/f+zcubO9288TTzwRf/nLXyIi4vzzz4/DDz885s2bF0uXLo277747RowYERHvBPb77rsvbrjhhnjllVdi0KBB8eCDD8aePXs6zVA3Y8aMmD17dlx11VXxsY99LP785z/HggUL4pxzzjngO9iForv7+7rrrot169bFJz7xiairq+twE6SsrCwmTpwYEe9cSF977bXxT//0T3HUUUdFKpWK//f//l/U1NTEueeem7ibHN3d31dccUW8973vjaqqqigvL4+XXnopFi9eHMOGDYtLL720w9/h+H5Hd/d1m/11BXVd8o6f/OQn8cQTT8Rpp50WO3bsiEceeaTD8ilTpkREFOR5WwjMUddcc00MHz48Hn744di5c2eMGTMmbrzxxjj55JP3ud1hhx0WN998c9xyyy1xxx13xJ49e2LChAnx1a9+tdNTqk9+8pPRv3//uPvuu+OJJ56IYcOGxVe/+tVOszAmQXf3d9t71n7zm990WnbyySe3h8AxY8bEqFGjYtmyZbF169bo379/jB07Nq699tqYPHlyr3+fXNbdfX3mmWfG888/HytXroympqYYPnx4XHzxxfHZz342Dj300A7rOrb/prv7O+KdpyCrV6+O//E//kccfvjhXa4zfvz4eP755+Ohhx6K7du3x6GHHhrjxo2LWbNmdZplMQnuvvvu2LRpU/ufV61a1R6up0yZstf9WFRUFDfddFP89Kc/jfvvvz9SqVQcf/zxMXv27Bg5cmSHdU877bS4/vrrY/78+XHzzTfHoEGD4pJLLonLLrusz75Xruru/m47dy9evDgWL17cYdk//MM/tIfA4cOHx/vf//5YtWpVbNmyJfr16xejRo2Kq666qsPNp6To7v6urq6Op556Kp5++unYvXt3VFRUxLnnnhuXXXZZDBkypMO6ju93dHdfR/xtRuf3vve9nc4fbVyXvKPtXPDkk0/Gk08+2Wl5WwjsSr6ftw9pbW1tzdrfDgAAQEYZEwgAAJAgQiAAAECCCIEAAAAJIgQCAAAkiBAIAACQIEIgAABAggiBAAAACSIEAgAAJIgQCAAAkCBCIAAAQIIIgQAAAAkiBAIAACSIEAgAWdDa2hrf+MY34qMf/Wg89thjB7wMAHpKCASALDjkkENi9uzZccQRR8T3v//92LRpU/uye++9N/7jP/4jpk6dGh/72MeyWCUAhUgIBIAsGTJkSFxzzTXR0NAQc+fOjZaWlli/fn38/Oc/j6OPPjpmzpyZ7RIBKECHtLa2tma7CABIsh//+Mdx7733xkUXXRRPPvlkvP7663HrrbdGVVVVtksDoAAJgQCQZU1NTXHFFVfE+vXrIyLiy1/+cnzmM5/JclUAFCrdQQEgy0pKSuLDH/5w+3+fc845Wa4IgEImBAJAlq1duzZ+85vfxKBBg6KpqSm+//3vZ7skAAqYEAgAWbRr166YO3duFBUVxc033xxnnHFGPP7447Fo0aJslwZAgRICASCLfvCDH8Trr78eM2bMiDFjxsTVV18dw4YNix/96EexcePGbJcHQAESAgEgSx555JF45JFH4rTTTovzzjsvIiIGDBgQ3/rWtyKVSsXcuXOjubk5y1UCUGiEQADIgtdffz1++MMfRkVFRXzzm9/ssOzkk0+Of/mXf4na2tqYN29elioEoFB5RQQAAECCeBIIAACQIEIgAABAggiBAAAACSIEAgAAJIgQCAAAkCBCIAAAQIIIgQAAAAkiBAIAACSIEAgAAJAgQiAAAECCCIEAAAAJIgQCAAAkiBAIAACQIP8farF2Lz5/hrEAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3344f80",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5925dd74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:05.931557Z",
     "iopub.status.busy": "2024-08-13T22:12:05.931109Z",
     "iopub.status.idle": "2024-08-13T22:12:07.007204Z",
     "shell.execute_reply": "2024-08-13T22:12:07.006487Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=530487;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=959675;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1045</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=812868;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=114659;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\u001b\\\u001b[2m1045\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>1.04 +/- 0.08</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(-1 +/- 7) x 10^-2</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      result              unit\n",
       "parameter                                                     \n",
       "xyl.spectrum.main.Line.a       1.04 +/- 0.08   1 / (keV s cm2)\n",
       "xyl.spectrum.main.Line.b  (-1 +/- 7) x 10^-2  1 / (s cm2 keV2)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140592207871424\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>35.874656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>35.874656</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          35.874656\n",
       "total         35.874656"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>76.004630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>79.573357</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             76.004630\n",
       "BIC             79.573357"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce9c567e",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "eb38f1c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:07.009512Z",
     "iopub.status.busy": "2024-08-13T22:12:07.009301Z",
     "iopub.status.idle": "2024-08-13T22:12:07.015195Z",
     "shell.execute_reply": "2024-08-13T22:12:07.014648Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e77b58a",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2da284f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:07.017453Z",
     "iopub.status.busy": "2024-08-13T22:12:07.017073Z",
     "iopub.status.idle": "2024-08-13T22:12:57.279003Z",
     "shell.execute_reply": "2024-08-13T22:12:57.278369Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "429dfa0e2b6a4eb78a926e7ffcc7857e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "179a6f58",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e6856ac8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:57.281639Z",
     "iopub.status.busy": "2024-08-13T22:12:57.281243Z",
     "iopub.status.idle": "2024-08-13T22:12:57.285520Z",
     "shell.execute_reply": "2024-08-13T22:12:57.284904Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.014), ('data', 0.014)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96a7812f",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0ea0f217",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:57.288026Z",
     "iopub.status.busy": "2024-08-13T22:12:57.287508Z",
     "iopub.status.idle": "2024-08-13T22:12:58.016207Z",
     "shell.execute_reply": "2024-08-13T22:12:58.015698Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">22:12:57 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m22:12:57\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=121906;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=516735;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=554711;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=306553;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=804628;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=562426;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=403812;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=412478;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=947281;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=791795;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=8976;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=366294;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=516870;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=653497;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=188792;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=399584;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=337015;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=137016;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">22:12:58 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m22:12:58\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=443321;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=466889;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=91933;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=585337;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=742265;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=153760;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1417b14e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:58.018525Z",
     "iopub.status.busy": "2024-08-13T22:12:58.018162Z",
     "iopub.status.idle": "2024-08-13T22:12:58.479343Z",
     "shell.execute_reply": "2024-08-13T22:12:58.478669Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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6KOPHjTfjh071KdPHwWDwZaQuGrVKn399dcd+gyrV69W165dlZ+fr7179yo/P1+5ubnyer168cUXW/qdddZZeuWVV1red923b1/L47mGYeiOO+5Qz549dd1116mhoUGS9MMf/rBljF27dqmioiJsHcOGDdM777yj6upqSfvf7TzttNPkcDjUu3dvVVZWqqGhQU1NTQf9TCP54Q9/qHfeeUc1NTWSpKeffvrQfjhxwIpoApq7fLqOLTk2ZNuMQfO0YP2sVtcbfAFN7TUnxpUBAAAA+zf3eeihh7Rt2zZlZWUpGAzqRz/6kdxutyTpoYce0l133aW//OUvMgxDl156qX7yk59o5syZuuiii9S1a1edf/75Ycf/4x//qHvuuUcXXHCBDMNQdna27rjjDh1xxBG67777dPvtt6u5uVk/+MEPNGDAgHbXfeAdUdM05XQ69cADDygtLU2TJk3SsmXLdN5556lbt24aOnSovvnmG0nSKaecounTp+vKK6+UYRjKyMhotVnRr371K91///0qLS3VI488ol//+te65ZZbdP755+vwww/XCSecoLy8vJA19evXT7/85S81bdo0Sfs3K7rrrrskSYMHD9aoUaN0wQUXqEePHjrppJO0bt26Nj9nv379NH36dF122WUJu1mRYR5Y+4btKisrVVpaqsceeyzsOT9XldylRz//TavrDT5/yyO7T9fOVZYrs1UfAAAAJJ8Dq2zff3wVia2hoUHp6elKT0/Xnj17dMkll+jee+9teZ8zUdj5Z4sVUQAAAACwUFVVlW655RaZpqnGxkZdeumlCRdC7UYQBQAAAAALDRgwQC+//LLdZSQ0gqjNPB6PPB6PJMnr9dpcDQAAABKNw+FQIMBmlLBec3Oz0tPtiYQEUZu53e6Wl7oPvCMKAAAAHJCenq69e/cqJycnIY/hQPL6z6Nz4okg2smUz1+h8TNH2V0GAAAA2skwDOXn5+vbb79VVlaWHA6H3SUhBQQCAaWnpystzZ4TPTlHtJMpX7DC7hIAAABwiBwOh7p16yan02l3KUgROTk5ys3NtW1+VkQBAACAJHDgDMuMjAy7SwGixoooAAAAACCuCKJJZvwM3u8EAAAAkNwIokmm20+Ojur+rLGFFlUCAAAAAB1DEE0yK6u3RHV/9vkEUQAAAAD2IogCAAAAAOKKIAoAAAAAiCuOb0lB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FbUAAIAk5q8PtCuEtmXTqqo2V1UBAMkt6hXRn//851bUAQAAUsgT2+coyxX68edw79g2+AJt7lYMAEgNMX001zRNbdu2TU6nU4WFhbGcCgDQiYwo7G13CbYaP2OU3SW0KcvljNk7tgCA5GfJQW/Lly/X3Xffrbq6upZr//rXvzRlyhT99Kc/1SWXXKI5c+Yo2MbmEQAAtEeqbvTTXuNnRhdEy+evsKgSAAA6xpIg+vLLL+uzzz5TXl5ey7UHH3xQVVVVGjJkiPr27auKigotXrzYiukAAEAUyhcQRAEA9rIkiFZVVem4445r+b6+vl6rV6/WWWedpfvuu09/+ctf1Lt3b4IoAAAAAMCad0T37t2rbt26tXy/bt06BYNBnX322fsnSU/XySefrDfffNOK6QAAMVbfFFDZ5rUh20zTDNtWz7EnAACgHSwJoi6XS3v37m35/qOPPlJaWppOPPHEf0+Unq6GhgYrpgMAxEiGwyE1SaYU9izNSG0HjQMAABCGJY/mHn300Vq1apW+++471dXVyePxqF+/fge9M7pjxw517drViukAADEyrEeR8jOz5Up3hv0ypIjt+ZnZGtajyO6PAgAAEpglK6IXXnihbrvtNl144YUtK5/Tpk07qM+GDRvUr18/K6YDAMRISZcClXQpiNjnli+2a0q/oXGqCAAApCJLgujo0aN144036rXXXpMknXXWWRo7dmxL+8cffyyfz6dTTz3ViukAAAAAAEnMkiAqSZMmTdKkSZNCtg0ePJgdcwEAAAAAkix6RzSV1dbWatasWTr33HN12WWXae3a0DtFAgAAAADahyDahvvuu0/dunXTK6+8omuuuUa33XbbQTsEAwAAAAAODUE0gvr6er3zzju64oorlJWVpdNPP119+vTRP//5T7tLA4CkNaKwt90lAAAAm1n2jmgiqK+v1zPPPKMNGzZo48aNqqur069+9auDNk46IBAIaOHChVq6dKnq6urUt29fTZs2TaecckpLn23btik7O1uHH354y7U+ffroq6++isvnAYBUNKKw2O4SAACAzVJqRfS7775TWVmZtmzZopKSkoh977nnHj333HM655xzdP311ystLU2zZs3SunXrWvrs27dPLpfroPtcLpf27dsXk/oBAAAAoDNIqSBaUFCgF198Uf/4xz90zTXXhO23YcMGLVu2TFdddZWu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l/rpT3+qK664wu6SAABJJBAI6H/+53/0wQcfyOv1qri4WNOnT9cPfvADu0sDACSRe++9VytXrlRDQ4MKCwt11VVXacSIEe2+3zBN04xhfbDYO++8I8Mw5PF4dPTRRxNEAQCHZN++fXr22Wc1duxY9ejRQ2+//bbuv/9+Pfvss8rJybG7PABAktiyZYt69uwpp9OpjRs36qabbtIzzzyjww47rF3382hukhk5cqROP/105ebm2l0KACAJZWdna8qUKSosLFRaWprOPvtspaena+vWrXaXBgBIIr1795bT6ZQkGYahxsZG7dq1q93382huDNXX1+uZZ57Rhg0btHHjRtXV1elXv/qVxo4d26pvIBDQwoULtXTpUtXV1alv376aNm2aTjnlFBsqBwAkilj/Ltm6davq6urUq1evWH4MAICNYvW75H/+53+0ePFiBQIB/fCHP1SfPn3aXRMrojH03XffqaysTFu2bFFJSUnEvvfcc4+ee+45nXPOObr++uuVlpamWbNmad26dXGqFgCQiGL5u8Tv9+uuu+7SZZddxpM2AJDCYvW75KabbtIbb7yh++67T6eccooMw2h3TQTRGCooKNCLL76of/zjH7rmmmvC9tuwYYOWLVumq666Stdee60mTJig+++/X0cccYQefvjhOFYMAEg0sfpd0tTUpN/97nfq1auXpkyZEsNPAACwWyxzicPh0NChQ7V27VqtXr263TURRGPI6XSqoKCgzX7Lly+Xw+HQhAkTWq5lZmZq3Lhx+vTTT1VdXR3LMgEACSwWv0uam5t11113yTAMzZ49+5D+BhsAkHzikUuCwaC2b9/e7poIogngs88+01FHHSWXy3XQ9eOOO06S9Pnnn7dca2pqkt/vV3Nzs4LBoPx+v4LBYFzrBQAknkP5XfLHP/5Ru3fv1u233670dLaLAADs197fJV6vV2+++abq6+vV1NSkt99+Wx999JFOPPHEds/Fb58EsHv37pB/Q3Hg2vd3n3ryySdVVlbW8v1TTz0V9kVjAEDn0d7fJTt27NCrr74qp9N50N94z5s375D+AwIAkHra+7vEMAy9+uqruu+++2Sapnr16qXf/va3OvbYY9s9F0E0Afj9fmVkZLS6fmA7ZL/f33Ltiiuu4OxQAEAr7f1dcsQRR2jFihVxrQ0AkBza+7vE5XJp/vz5Uc3Fo7kJIDMzU42Nja2uBwKBlnYAACLhdwkAIFrx/F1CEE0ABQUF2r17d6vrB65179493iUBAJIMv0sAANGK5+8SgmgCKCkp0bZt2+Tz+Q66vmHDhpZ2AAAi4XcJACBa8fxdQhBNAKNHj1YwGNQrr7zSci0QCGjx4sUaOHCgCgsLbawOAJAM+F0CAIhWPH+XsFlRjL3wwgvyer0ty9krV67Uzp07JUkXXnihcnNzNXDgQJ155pl69NFHVVtbq169eun111/Xjh07dMstt9hZPgAgAfC7BAAQrUT7XWKYpmlaOiIOcvHFF2vHjh0h25599ln17NlT0v4dqBYuXKilS5fK6/WqT58+mjZtmk499dR4lgsASED8LgEARCvRfpcQRAEAAAAAccU7ogAAAACAuCKIAgAAAADiiiAKAAAAAIgrgigAAAAAIK4IogAAAACAuCKIAgAAAADiiiAKAAAAAIgrgigAAAAAIK4IogAAAACAuCKIAgCAFs8995zOOuss/etf/2q5tmTJEo0aNUpLliyxsbJ/e/XVVzV69Gh98cUXdpcCAOgggigAIGX961//0qhRoyJ+XXzxxXaXmTDq6ur05JNP6vzzz1fPnj1jOtd7772nUaNG6eabb26z7x133KFRo0bpzTfflCSNGTNGhYWFevjhh2NaIwAgdtLtLgAAgFjr1auXzjnnnJBtubm5ca4mcT333HPau3evJk+eHPO5Tj75ZBUWFmrt2rWqrq5WYWFhyH5er1fvvPOOcnNzNWrUKElSenq6Lr74Ys2fP1/r16/XoEGDYl4vAMBaBFEAQMrr1auXrrjiCrvLSGhNTU169dVXNWjQIPXq1Svm86WlpWns2LEqKyvT66+/rssvvzxkP4/HI7/fr/PPP1+ZmZkt188++2w9+OCDevnllwmiAJCEeDQXAIDvGTVqlK6//np9++23uvvuuzV+/Hi53W5dffXV+uijj0LeU19fr8cff1w/+9nP5Ha7df755+vmm2/WunXrWvW9/vrrNWrUKPn9fj322GP6yU9+ojPPPFOPP/54S5/ly5ertLRUbrdbEydO1Lx581RXV6eLL774oEeJ77zzTo0aNUobNmwIWdfChQs1atQoeTyeNj/3e++9p927d2v06NFt9j1g586duvzyy+V2u1VRUdFyfc+ePVqwYIEmT56ss88+W+PHj9dvfvMbffnllwfdf/7558swDC1ZskSmaYacY/HixZKkcePGHXQ9Pz9fQ4YMUUVFherr69tdMwAgMRBEAQD4D16vV9ddd52qqqp07rnnatSoUaqsrNQvfvGLVmFq7969uuaaa1RWVqa8vDxNnDhRo0aN0ubNmzVz5ky98847Ief47W9/q9dff11DhgzRf/3Xf7W8k/naa6/pt7/9rbZt26bzzjtPY8aM0aeffqqbbrpJTU1NB40xYcKElnv+UzAY1OLFi3XYYYe1PNIaydq1ayVJxx9/fNs/IElVVVW69tprtXPnTt17770tAXb79u2aNm2a/vGPf+jII4/Uj3/8Y/3whz/Ue++9p2uuueag0HzEEUdo6NCh+uabb0KG/C+//FKbNm3Sscceq379+rVqP/744xUIBPTJJ5+0q2YAQOLg0VwAQMrbvn37QSuO33f88cdr2LBhB137/PPPNWnSJN1www1KS9v/d7YnnXSS5s2bp0WLFukXv/hFS9/7779fX331lWbNmqULLrig5fqePXtUWlqqe++9V6eeeupBj5VK0u7du/XEE0+oS5cuLdfq6ur0wAMPKDs7W48++qiKiookSaWlpfrFL36hyspKHXHEES39TzzxRBUXF2vZsmWaPn26srOzW9ree+891dTU6KKLLpLT6WzzZ7R+/XqlpaWppKSkzb6ffvqpbrnlFqWnp2vBggUH3XP33Xfr22+/1R//+EedeuqpLdd/9rOfqbS0VPPmzVNZWVnL9XHjxumDDz7Q4sWLddJJJx00T7jV0AP69+8vSfrkk08OmgsAkPhYEQUApLzt27errKws5NeaNWta9c/OztbVV1/dEkKl/Tu1OhwObdq0qeVabW2t3n77bZ100kkHhVBJ6tq1qyZPnqza2tqW1cbvmzp16kEhVJL++c9/at++fTr//PNbQqi0f3OeadOmhfxsEyZMUH19vZYtW3bQ9VdffVWSNH78+HA/loPU1NQoNze3zdC6evVq3XjjjcrLy9NDDz10UAjdvHmzPvnkE5133nmtgmFRUZEuuOACffnllwetKo8cOVKHHXaYli9fLp/P13K9qalJS5culdPpDLvRVLdu3STtf0QYAJBcWBEFAKS8U089VX/84x/b3f+oo45STk7OQdfS09PVrVs3eb3elmubNm1SMBhUY2NjyBXXbdu2SZK2bNmi4cOHH9R23HHHtep/4FzME044oVXbwIED5XA4Wl0/77zz9Je//EWvvvpqSxj+9ttvtWrVKv3gBz9QcXFxG592v71796pHjx4R+7z99tt6//331bdvX917773q2rXrQe0HHrvds2dPyJ/H119/3fJ/+/TpI0ktQfP555+Xx+PRxIkTJUkrV65UbW2t3G638vLyQtZz4Pp3333Xrs8IAEgcBFEAAP6Dy+UKed3hcKi5ubnl+71790ra/1jr+vXrw47X0NDQ6tqB1bzvO7Ai+J8BT9q/y+xhhx3W6npeXp7OPPNMvf766/ryyy/Vp08fLVmyRMFgsN2roZKUmZmpQCAQsc+nn36qYDCoE044IWSNB34eq1ev1urVq8OOs2/fvoO+HzdunJ5//nktXry4JYi29ViupJZ6s7KyItYNAEg8BFEAADroQGC95JJLdN111x3SvYZhhB1vz549rdqam5v13XffhVy1nDhxol5//XWVl5dr5syZeu211+RyuXTmmWe2u57DDjtMNTU1EftcddVV+uc//6nnn39eDoej1Wc+UP/MmTN14YUXtnvuvn37asCAAdq4caO++uor5eXl6b333lPPnj1bvTf6fQeCb35+frvnAgAkBt4RBQCggwYMGCDDMPTpp59aMl7fvn0lKeTq6saNGxUMBkPed/zxx6tv375688039d5772nbtm0655xzDmmlsE+fPgoEAqqurg7bx+l06u6779Zpp52mZ599Vg8++OBB7QceN+7Iz+PAyudrr72mN954Q8FgsOV4l3AOPOp74DFfAEDyIIgCANBBBQUFOvPMM/XJJ5/o6aefDnkW5oYNG0I+mhvK6aefruzsbL322mvavn17y/WmpiYtXLgw4r0TJkzQ3r179fvf/16SWm2e1JbBgwe31BuJ0+nUXXfdpeHDh+u5557TggULWtoGDhyogQMHatmyZa02T5L2r+p+/PHHIcd1u93KysrS0qVLtXjxYqWlpWnMmDERa9m4ceNBtQMAkgeP5gIAUl6k41sk6bLLLmt1vEp73XTTTdq6dasefvhhvfHGGzr++OOVm5urmpoabdq0Sdu2bdOLL77YrtXJvLw8TZ8+Xffee69KS0t11llnyeVy6d1335XT6VT37t3DrhCee+65euSRR7Rr1y71798/5LmbkZx++un685//rA8++KDNR3ozMjJ055136ne/+53+8Y9/yDRNXX/99ZKk3/3ud7rhhht0++236/nnn9exxx6rzMxM7dy5U5988om+++47eTyeVmO6XC6dccYZeuONN1RbW6thw4apsLAwbA2maWrt2rXq3bv3QTsMAwCSA0EUAJDyDhzfEs5FF13U4SDapUsXPfTQQ1q0aJHeeusteTweNTc3q1u3biopKdHll18ecpOhcMaPH6+8vDw99dRTev311+VyuTRixAhdffXVuuiii9SrV6+Q97lcLo0cOVJLly495NVQSerZs6dOOeUUVVRUaObMmW0e43IgjN522216/vnnZZqmZs6cqSOPPFILFy7Us88+q3feeUdLlixRWlqaCgoKdOKJJ2r06NFhxxw3bpzeeOMNSdL5558fcf7/9//+n6qrqzVjxoxD/qwAAPsZZqjniAAAQELZtm2bLr30Up155pm6/fbbQ/a5/PLLtWPHDi1atCjszr+RrF27VjfeeKN+85vf6Nxzz4225Ji68847tWbNGj399NNhj3cBACQu3hEFACCB1NXVtTpGxe/3t2wMNHLkyJD3vfvuu/rqq6/kdrs7FEIlaejQoRo2bJiefPLJg46pSTRbt27VW2+9pZ/97GeEUABIUjyaCwBAAvn444/1hz/8QaeccooOP/xwfffdd/rwww+1Y8cOnXTSSTrrrLMO6v/SSy9p586devXVV+V0OnXZZZdFNf/111+vN998UzU1NRHf0bTTzp07NWXKFP3oRz+yuxQAQAfxaC4AAAlk69atWrhwoT755BPV1tZKknr16qWzzjpLP/nJT1q9y3rxxRerpqZGRUVFuvrqqzV8+HAbqgYA4NAQRAEAAAAAccU7ogAAAACAuCKIAgAAAADiiiAKAAAAAIgrgigAAAAAIK4IogAAAACAuCKIAgAAAADiiiAKAAAAAIgrgigAAAAAIK4IogAAAACAuPr/ASE8dsN4WUJGAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b69358fa",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e5914eae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:58.481908Z",
     "iopub.status.busy": "2024-08-13T22:12:58.481444Z",
     "iopub.status.idle": "2024-08-13T22:12:58.487659Z",
     "shell.execute_reply": "2024-08-13T22:12:58.487030Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ac00bbd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:58.489977Z",
     "iopub.status.busy": "2024-08-13T22:12:58.489601Z",
     "iopub.status.idle": "2024-08-13T22:12:58.492602Z",
     "shell.execute_reply": "2024-08-13T22:12:58.492050Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "312bf73a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:58.494806Z",
     "iopub.status.busy": "2024-08-13T22:12:58.494458Z",
     "iopub.status.idle": "2024-08-13T22:12:58.577817Z",
     "shell.execute_reply": "2024-08-13T22:12:58.577311Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1045</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=872732;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=108385;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\u001b\\\u001b[2m1045\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(5.5 +/- 0.6) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.43 +/- 0.08</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     result             unit\n",
       "parameter                                                                   \n",
       "test_pl.spectrum.main.Powerlaw.K      (5.5 +/- 0.6) x 10^-1  1 / (keV s cm2)\n",
       "test_pl.spectrum.main.Powerlaw.index         -1.43 +/- 0.08                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140592138720640\">\n",
       "<tr><td>1.00</td><td>0.11</td></tr>\n",
       "<tr><td>0.11</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.11\n",
       "0.11 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>204.503586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>204.503586</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         204.503586\n",
       "total        204.503586"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>413.262492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>416.831218</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            413.262492\n",
       "BIC            416.831218"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d57ef25a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:58.580081Z",
     "iopub.status.busy": "2024-08-13T22:12:58.579686Z",
     "iopub.status.idle": "2024-08-13T22:12:58.673751Z",
     "shell.execute_reply": "2024-08-13T22:12:58.673111Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1045</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=955131;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=196601;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\u001b\\\u001b[2m1045\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>1.2 -0.4 +0.5</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>(-8.0 +/- 3.0) x 10^-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(2.2 -0.9 +1.5) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                              result  \\\n",
       "parameter                                                              \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K               1.2 -0.4 +0.5   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index  (-8.0 +/- 3.0) x 10^-1   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc     (2.2 -0.9 +1.5) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (keV s cm2)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140592138155776\">\n",
       "<tr><td>1.00</td><td>0.88</td><td>-0.96</td></tr>\n",
       "<tr><td>0.88</td><td>1.00</td><td>-0.92</td></tr>\n",
       "<tr><td>-0.96</td><td>-0.92</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.88 -0.96\n",
       " 0.88  1.00 -0.92\n",
       "-0.96 -0.92  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>200.132128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>200.132128</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         200.132128\n",
       "total        200.132128"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>406.785995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>412.000325</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            406.785995\n",
       "BIC            412.000325"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19918ad0",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b6d816db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:58.676034Z",
     "iopub.status.busy": "2024-08-13T22:12:58.675835Z",
     "iopub.status.idle": "2024-08-13T22:12:58.680779Z",
     "shell.execute_reply": "2024-08-13T22:12:58.680079Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 0.0017044402331943924\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90bf7b8a",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e9230a33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:58.682999Z",
     "iopub.status.busy": "2024-08-13T22:12:58.682794Z",
     "iopub.status.idle": "2024-08-13T22:12:58.686148Z",
     "shell.execute_reply": "2024-08-13T22:12:58.685632Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6f2808f",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6db7b4df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:12:58.688327Z",
     "iopub.status.busy": "2024-08-13T22:12:58.687951Z",
     "iopub.status.idle": "2024-08-13T22:15:00.458104Z",
     "shell.execute_reply": "2024-08-13T22:15:00.457469Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "44b20edf870b49eba58bd1f60f29cf1e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9267f9f",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "737cddd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:00.460885Z",
     "iopub.status.busy": "2024-08-13T22:15:00.460430Z",
     "iopub.status.idle": "2024-08-13T22:15:00.464922Z",
     "shell.execute_reply": "2024-08-13T22:15:00.464250Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.004"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85833d45",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b6003f75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:00.467182Z",
     "iopub.status.busy": "2024-08-13T22:15:00.466886Z",
     "iopub.status.idle": "2024-08-13T22:15:00.972583Z",
     "shell.execute_reply": "2024-08-13T22:15:00.971864Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9dd82b9",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1c27f305",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-13T22:15:00.975129Z",
     "iopub.status.busy": "2024-08-13T22:15:00.974716Z",
     "iopub.status.idle": "2024-08-13T22:15:01.474481Z",
     "shell.execute_reply": "2024-08-13T22:15:01.473743Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48bdaf46",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "026fc017ad36464c861a8693b64ac498": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "26a28e9c3fba450fac452c92d28f39e2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_509a310f1e5943bda8c10bb49da728bb",
       "placeholder": "​",
       "style": "IPY_MODEL_649137a722b44c4dad50b1d4b5db3180",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "27092a707e2242c99f8a5876f174cf0d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "3e096c3966e1441bbebe02aa8ede769c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3efa141b722347cb934f9a918eaacfcb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "429dfa0e2b6a4eb78a926e7ffcc7857e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_26a28e9c3fba450fac452c92d28f39e2",
        "IPY_MODEL_fecd985c6e5d48468ad57213da4bcb7b",
        "IPY_MODEL_ff1602561b474e4bb497689c5140550b"
       ],
       "layout": "IPY_MODEL_026fc017ad36464c861a8693b64ac498",
       "tabbable": null,
       "tooltip": null
      }
     },
     "44b20edf870b49eba58bd1f60f29cf1e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a87edc9ac3da4444ae1f242937951bd9",
        "IPY_MODEL_8952c036f5bb42e283dc328a88630c81",
        "IPY_MODEL_a2f7b8d2a9b54bcfb57e46bb1171651e"
       ],
       "layout": "IPY_MODEL_27092a707e2242c99f8a5876f174cf0d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "509a310f1e5943bda8c10bb49da728bb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5dee7050ba3c4b089095970096db329d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "649137a722b44c4dad50b1d4b5db3180": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6fa3aa438b6147b989059f4f770df505": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8952c036f5bb42e283dc328a88630c81": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e4585725db6d44ed8575aa2138fc76a8",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e2c99641b745471985c26dde499018f3",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "a2f7b8d2a9b54bcfb57e46bb1171651e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f1bacbfe66294e67b33e8820267641b7",
       "placeholder": "​",
       "style": "IPY_MODEL_5dee7050ba3c4b089095970096db329d",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [02:01&lt;00:00,  8.39it/s]"
      }
     },
     "a87edc9ac3da4444ae1f242937951bd9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3e096c3966e1441bbebe02aa8ede769c",
       "placeholder": "​",
       "style": "IPY_MODEL_3efa141b722347cb934f9a918eaacfcb",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "c3515a91a2da410ab135a7af3d76f2bf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d82428cfe4c94d359b93f16b0a4a5256": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dc008d1a944e4fb5ba940bb6f7125908": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "e2c99641b745471985c26dde499018f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "e4585725db6d44ed8575aa2138fc76a8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f1bacbfe66294e67b33e8820267641b7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fecd985c6e5d48468ad57213da4bcb7b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d82428cfe4c94d359b93f16b0a4a5256",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_dc008d1a944e4fb5ba940bb6f7125908",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "ff1602561b474e4bb497689c5140550b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6fa3aa438b6147b989059f4f770df505",
       "placeholder": "​",
       "style": "IPY_MODEL_c3515a91a2da410ab135a7af3d76f2bf",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:50&lt;00:00, 19.86it/s]"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
