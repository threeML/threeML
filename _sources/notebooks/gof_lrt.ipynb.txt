{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "386c1c0c",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "31d04d0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:42:02.659437Z",
     "iopub.status.busy": "2024-09-12T13:42:02.658968Z",
     "iopub.status.idle": "2024-09-12T13:42:02.723526Z",
     "shell.execute_reply": "2024-09-12T13:42:02.722738Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "14673aa5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:42:02.726407Z",
     "iopub.status.busy": "2024-09-12T13:42:02.725963Z",
     "iopub.status.idle": "2024-09-12T13:42:06.111362Z",
     "shell.execute_reply": "2024-09-12T13:42:06.110615Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c05673b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:42:06.114667Z",
     "iopub.status.busy": "2024-09-12T13:42:06.114040Z",
     "iopub.status.idle": "2024-09-12T13:42:06.147192Z",
     "shell.execute_reply": "2024-09-12T13:42:06.146462Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f41faa0",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ad9369fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:42:06.150522Z",
     "iopub.status.busy": "2024-09-12T13:42:06.150051Z",
     "iopub.status.idle": "2024-09-12T13:42:08.195764Z",
     "shell.execute_reply": "2024-09-12T13:42:08.195043Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">13:42:06 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m13:42:06\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=389526;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=363467;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">13:42:08 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m13:42:08\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=572844;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=770227;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a5ae8d4",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "65875313",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:42:08.198351Z",
     "iopub.status.busy": "2024-09-12T13:42:08.198104Z",
     "iopub.status.idle": "2024-09-12T13:42:09.227916Z",
     "shell.execute_reply": "2024-09-12T13:42:09.227188Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=758679;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=863603;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1046</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=166132;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=980829;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\u001b\\\u001b[2m1046\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>(9.9 +/- 0.8) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(7 +/- 7) x 10^-2</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         result              unit\n",
       "parameter                                                        \n",
       "xyl.spectrum.main.Line.a  (9.9 +/- 0.8) x 10^-1   1 / (keV s cm2)\n",
       "xyl.spectrum.main.Line.b      (7 +/- 7) x 10^-2  1 / (s cm2 keV2)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140692160024432\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>17.548476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>17.548476</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          17.548476\n",
       "total         17.548476"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>39.352271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>42.920998</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             39.352271\n",
       "BIC             42.920998"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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SSgvLw/qOj169GgdPHhQ69atC5RVV1frww8/1MiRIwNdmvr27avevXvrnXfeCfpcWbx4sRISEkIm3Ip3Rs/a6XTqwQcfVGVlpZ544omQMedN7HZ7SBcyv9+v+fPnS5LhIujxzuh5G31GbNy4UaWlpRo+fHigjPf2yTN63k1amtma7yaNfD6ffvWrX2nLli165JFHdPbZZxvuF4uf20x6E+UGDRqksWPHau7cuaqurlbPnj21YsUKVVRUBI2x+PWvf63NmzcHvVGvvvpqvfvuu5o+fbpuuOEGmUwmvf766+rWrZtuuOGGwH5Wq1W33367nn76ac2aNUvDhw/X559/rpUrV+rOO+9UWlpap95zuLTnWT/wwAPau3evbrzxRpWUlKikpCSwrVu3boEvE+vXr9f8+fM1evRo5ebmqq6uTqtWrVJZWZnuuuuuuOpm057nPWXKFBUVFSk/P19JSUkqKSnRBx98oP79+4esM8h7u1F7nneTVatWKSkpqdlfaAsXLtRHH32kkSNHKicnR1VVVVq2bJn279+vhx9+2HDSnVj21ltvqb6+PtD1aP369fr+++8lSddee626dOmiuXPnasWKFVqwYIFyc3MlNYb7N998U4899ph2796t9PR0LV68WA0NDSEz9U2dOlUzZszQtGnTdOmll+rrr7/WokWLNGnSpFb/ZTwWtPVZP/roo9q2bZsmTJig8vLyoD+WpKSkaNSoUZIav3A/8sgjuuyyy9SzZ0+5XC794x//UElJiSZPnhx3fwxp6/O+++67ddZZZ6mgoEA2m007duzQsmXL1KNHD91yyy1B1+C9fVRbn3eTlrqj8t2k0Z/+9CetX79eI0eOVF1dnVauXBm0fdy4cZIUk5/bBMYYMHPmTOXk5Oi9995TfX298vPz9fjjj2vo0KEnPC41NVXPPPOM/vjHP2r+/PlqaGjQsGHD9Itf/CKkBezqq6+W2WzWggULtH79evXo0UO/+MUvQmajjHVtfdZNa9i9+uqrIduGDh0aCIz5+fnq06ePVq1aperqapnNZvXv31+PPPKIxo4d2+H3E+na+rwvv/xyffnll1q7dq3cbrdycnJ044036tZbb1VycnLQvry3j2rr85YaW1g2btyoiy66SF26dDHcp7CwUF9++aXeffdd1dbWKjk5WQMHDtT06dNDZpyMBwsWLFBFRUXg9bp16wJBfNy4cc0+R5PJpCeeeELPPvus3nrrLblcLg0YMEAzZsxQ7969g/YdOXKk5syZo3nz5umZZ55Renq6br75Zt12222n7L4iUVufddNn97Jly7Rs2bKgbaeddlogMObk5Oicc87RunXrdPDgQSUmJqpPnz6aNm1a0B+p4kVbn3dRUZE+/vhj/fvf/9bhw4eVlZWlyZMn67bbblNmZmbQvry3j2rr85aOzmx91llnhXx+NOG7SaOmz4MNGzZow4YNIdubAqORaP/cTvD7/f6wXR0AAAAAELEYwwgAAAAAMERgBAAAAAAYIjACAAAAAAwRGAEAAAAAhgiMAAAAAABDBEYAAAAAgCECIwAAAADAEIERAAAAAGCIwAgAAAAAMERgBAAAAAAYIjACAAAAAAwRGAEAAAAAhgiMAABEML/frwceeECXXHKJPvjgg1ZvAwCgIxAYAQCIYAkJCZoxY4a6deump556ShUVFYFtb7zxhv75z39q/PjxuvTSS8NYSwBArCIwAgAQ4TIzMzVz5kzZ7XbNnj1bPp9PO3fu1J///Gf16tVL9913X7irCACIUQl+v98f7koAAICW/eEPf9Abb7yhG264QRs2bNDevXv13HPPqaCgINxVAwDEKAIjAABRwu126+6779bOnTslST/72c900003hblWAIBYRpdUAACiRFJSki688MLAvydNmhTmGgEAYh2BEQCAKLF161a9+uqrSk9Pl9vt1lNPPRXuKgEAYhyBEQCAKOBwODR79myZTCY988wzGj16tD788EMtXbo03FUDAMQwAiMAAFHgd7/7nfbu3aupU6cqPz9fDz74oHr06KHf//732rNnT7irBwCIUQRGAAAi3MqVK7Vy5UqNHDlS11xzjSSpa9eu+uUvfymXy6XZs2fL6/WGuZYAgFhEYAQAIILt3btXTz/9tLKysvTQQw8FbRs6dKh+9KMfqbS0VHPnzg1TDQEAsYxlNQAAAAAAhmhhBAAAAAAYIjACAAAAAAwRGAEAAAAAhgiMAAAAAABDBEYAAAAAgCECIwAAAADAEIERAAAAAGCIwAgAAAAAMERgBAAAAAAYIjACAAAAAAwRGAEAAAAAhgiMAAAAAABDBEYAAAAAgKH/H3GKWnqPEIbeAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92e4670c",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e204cfb8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:42:09.230625Z",
     "iopub.status.busy": "2024-09-12T13:42:09.230379Z",
     "iopub.status.idle": "2024-09-12T13:42:09.237051Z",
     "shell.execute_reply": "2024-09-12T13:42:09.236377Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1df7d310",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8ab57797",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:42:09.239485Z",
     "iopub.status.busy": "2024-09-12T13:42:09.239119Z",
     "iopub.status.idle": "2024-09-12T13:43:01.983173Z",
     "shell.execute_reply": "2024-09-12T13:43:01.982497Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e9a96f5a178d48c08427c35bf0f22eb9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c393e62",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "90caa8d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:43:01.986193Z",
     "iopub.status.busy": "2024-09-12T13:43:01.985613Z",
     "iopub.status.idle": "2024-09-12T13:43:01.990320Z",
     "shell.execute_reply": "2024-09-12T13:43:01.989659Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.921), ('data', 0.921)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5a026c8",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f6fe5616",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:43:01.992817Z",
     "iopub.status.busy": "2024-09-12T13:43:01.992457Z",
     "iopub.status.idle": "2024-09-12T13:43:02.780736Z",
     "shell.execute_reply": "2024-09-12T13:43:02.780048Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">13:43:01 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m13:43:01\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=502189;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=89638;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">13:43:02 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m13:43:02\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=470416;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=320059;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=133647;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=498632;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=166193;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=193219;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=142294;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=481808;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=262829;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=523629;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=111657;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=34708;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=466470;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=146755;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=650364;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=272679;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=966183;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=804857;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=863617;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=523427;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=562588;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=480269;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e37c6dd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:43:02.783465Z",
     "iopub.status.busy": "2024-09-12T13:43:02.783061Z",
     "iopub.status.idle": "2024-09-12T13:43:03.297896Z",
     "shell.execute_reply": "2024-09-12T13:43:03.297095Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e7e3afd",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4c2128b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:43:03.300462Z",
     "iopub.status.busy": "2024-09-12T13:43:03.300015Z",
     "iopub.status.idle": "2024-09-12T13:43:03.306525Z",
     "shell.execute_reply": "2024-09-12T13:43:03.305920Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a4faa737",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:43:03.308867Z",
     "iopub.status.busy": "2024-09-12T13:43:03.308474Z",
     "iopub.status.idle": "2024-09-12T13:43:03.311575Z",
     "shell.execute_reply": "2024-09-12T13:43:03.311022Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "87ca7ec6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:43:03.313625Z",
     "iopub.status.busy": "2024-09-12T13:43:03.313445Z",
     "iopub.status.idle": "2024-09-12T13:43:03.397646Z",
     "shell.execute_reply": "2024-09-12T13:43:03.396925Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">13:43:03 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1046</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m13:43:03\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=864989;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=769706;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\u001b\\\u001b[2m1046\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(4.5 +/- 0.6) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.49 +/- 0.09</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     result             unit\n",
       "parameter                                                                   \n",
       "test_pl.spectrum.main.Powerlaw.K      (4.5 +/- 0.6) x 10^-1  1 / (keV s cm2)\n",
       "test_pl.spectrum.main.Powerlaw.index         -1.49 +/- 0.09                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140692053047040\">\n",
       "<tr><td>1.00</td><td>0.23</td></tr>\n",
       "<tr><td>0.23</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.23\n",
       "0.23 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>210.103741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>210.103741</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         210.103741\n",
       "total        210.103741"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>424.462800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>428.031527</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            424.462800\n",
       "BIC            428.031527"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fbdfde31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:43:03.400492Z",
     "iopub.status.busy": "2024-09-12T13:43:03.399966Z",
     "iopub.status.idle": "2024-09-12T13:43:03.500438Z",
     "shell.execute_reply": "2024-09-12T13:43:03.499673Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1046</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=982228;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=485804;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\u001b\\\u001b[2m1046\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>(7.8 -1.9 +2.6) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>-1.07 +/- 0.24</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(3.4 -1.5 +2.6) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                               result  \\\n",
       "parameter                                                               \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      (7.8 -1.9 +2.6) x 10^-1   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index           -1.07 +/- 0.24   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc      (3.4 -1.5 +2.6) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (keV s cm2)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140692054650640\">\n",
       "<tr><td>1.00</td><td>0.81</td><td>-0.88</td></tr>\n",
       "<tr><td>0.81</td><td>1.00</td><td>-0.82</td></tr>\n",
       "<tr><td>-0.88</td><td>-0.82</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.81 -0.88\n",
       " 0.81  1.00 -0.82\n",
       "-0.88 -0.82  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>207.885104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>207.885104</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         207.885104\n",
       "total        207.885104"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>422.291947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>427.506277</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            422.291947\n",
       "BIC            427.506277"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "823cc67c",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3179ba97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:43:03.503797Z",
     "iopub.status.busy": "2024-09-12T13:43:03.503000Z",
     "iopub.status.idle": "2024-09-12T13:43:03.509010Z",
     "shell.execute_reply": "2024-09-12T13:43:03.508440Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 0.02059730069007774\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7482d236",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2881bc59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:43:03.511544Z",
     "iopub.status.busy": "2024-09-12T13:43:03.511141Z",
     "iopub.status.idle": "2024-09-12T13:43:03.514790Z",
     "shell.execute_reply": "2024-09-12T13:43:03.514134Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f7f6a0d",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6382a55d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:43:03.517264Z",
     "iopub.status.busy": "2024-09-12T13:43:03.516882Z",
     "iopub.status.idle": "2024-09-12T13:45:06.536724Z",
     "shell.execute_reply": "2024-09-12T13:45:06.536074Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c91ab02e28434b338cef41dc4b2a22a0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b26481f7",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "24d029a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:45:06.539453Z",
     "iopub.status.busy": "2024-09-12T13:45:06.539139Z",
     "iopub.status.idle": "2024-09-12T13:45:06.543585Z",
     "shell.execute_reply": "2024-09-12T13:45:06.542978Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.054"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21bc4f06",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "dbae32a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:45:06.545684Z",
     "iopub.status.busy": "2024-09-12T13:45:06.545357Z",
     "iopub.status.idle": "2024-09-12T13:45:07.085473Z",
     "shell.execute_reply": "2024-09-12T13:45:07.084756Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "515b361d",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0c4b5738",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T13:45:07.087782Z",
     "iopub.status.busy": "2024-09-12T13:45:07.087569Z",
     "iopub.status.idle": "2024-09-12T13:45:07.630115Z",
     "shell.execute_reply": "2024-09-12T13:45:07.629362Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00ad36b4",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "13282ae5b1ce4cdbb4d286c8eb4fd358": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1424d0fe30f54fe79bc5187f387c7cb3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "1ee4cecc3c684ac9b36363e9d5d917fa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4af1c8b119c944a1a2c82df148c7729f",
       "placeholder": "​",
       "style": "IPY_MODEL_596ddab92db14e9280feaca57f930c07",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "4373364c235b4081a52e11dff999cd87": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4af1c8b119c944a1a2c82df148c7729f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4b9667f45fa34fc9af1bc611e870ecdf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_997d86b978064389bd137265766831dd",
       "placeholder": "​",
       "style": "IPY_MODEL_67fbdfc6e4454b2890f74855699f9e19",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [02:02&lt;00:00,  7.64it/s]"
      }
     },
     "5638c47b22e947b9a7376c07a8756b08": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e91fb910fc6d497eac29f9fd09ede384",
       "placeholder": "​",
       "style": "IPY_MODEL_13282ae5b1ce4cdbb4d286c8eb4fd358",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "56c6b7f26116497285da2292b3c612e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "596ddab92db14e9280feaca57f930c07": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5affe72fcd5e44cdb17094d0e47c4290": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d8903fd7d9e348cb9c91801e0cdbfd7b",
       "placeholder": "​",
       "style": "IPY_MODEL_9bcd35f993e445c3990437fae77e44b5",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:52&lt;00:00, 19.49it/s]"
      }
     },
     "67fbdfc6e4454b2890f74855699f9e19": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "97a1b258a4c3413e9c719e4285481559": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "997d86b978064389bd137265766831dd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9bcd35f993e445c3990437fae77e44b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9c7839aad9ed4f82802f35a7c0cfdbcf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d00128616c3740a98aa3cb0b998db033",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_97a1b258a4c3413e9c719e4285481559",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "c91ab02e28434b338cef41dc4b2a22a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5638c47b22e947b9a7376c07a8756b08",
        "IPY_MODEL_9c7839aad9ed4f82802f35a7c0cfdbcf",
        "IPY_MODEL_4b9667f45fa34fc9af1bc611e870ecdf"
       ],
       "layout": "IPY_MODEL_ea151bc72213414dac3b9483711b6013",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d00128616c3740a98aa3cb0b998db033": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d8903fd7d9e348cb9c91801e0cdbfd7b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e91fb910fc6d497eac29f9fd09ede384": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e9a96f5a178d48c08427c35bf0f22eb9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1ee4cecc3c684ac9b36363e9d5d917fa",
        "IPY_MODEL_eb5953427f6846ecbbef2293ff1103ec",
        "IPY_MODEL_5affe72fcd5e44cdb17094d0e47c4290"
       ],
       "layout": "IPY_MODEL_1424d0fe30f54fe79bc5187f387c7cb3",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ea151bc72213414dac3b9483711b6013": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "eb5953427f6846ecbbef2293ff1103ec": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4373364c235b4081a52e11dff999cd87",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_56c6b7f26116497285da2292b3c612e7",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
