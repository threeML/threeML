{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c272466a",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "40a67673",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:05:19.740689Z",
     "iopub.status.busy": "2024-10-25T00:05:19.740496Z",
     "iopub.status.idle": "2024-10-25T00:05:19.798276Z",
     "shell.execute_reply": "2024-10-25T00:05:19.797607Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "06952d4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:05:19.800426Z",
     "iopub.status.busy": "2024-10-25T00:05:19.800018Z",
     "iopub.status.idle": "2024-10-25T00:05:22.790966Z",
     "shell.execute_reply": "2024-10-25T00:05:22.790309Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a03796f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:05:22.793328Z",
     "iopub.status.busy": "2024-10-25T00:05:22.792879Z",
     "iopub.status.idle": "2024-10-25T00:05:22.826548Z",
     "shell.execute_reply": "2024-10-25T00:05:22.826031Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "016234a3",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "042e77f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:05:22.828432Z",
     "iopub.status.busy": "2024-10-25T00:05:22.828072Z",
     "iopub.status.idle": "2024-10-25T00:05:24.768818Z",
     "shell.execute_reply": "2024-10-25T00:05:24.768144Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">00:05:22 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m00:05:22\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=510917;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=228645;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">00:05:24 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m00:05:24\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=234499;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=461559;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "945304fb",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ffb4910a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:05:24.770931Z",
     "iopub.status.busy": "2024-10-25T00:05:24.770543Z",
     "iopub.status.idle": "2024-10-25T00:05:25.850607Z",
     "shell.execute_reply": "2024-10-25T00:05:25.849887Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=158514;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=910887;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1045</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=404580;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=531506;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\u001b\\\u001b[2m1045\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>(8.2 +/- 0.8) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(1.7 +/- 0.7) x 10^-1</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         result              unit\n",
       "parameter                                                        \n",
       "xyl.spectrum.main.Line.a  (8.2 +/- 0.8) x 10^-1   1 / (keV s cm2)\n",
       "xyl.spectrum.main.Line.b  (1.7 +/- 0.7) x 10^-1  1 / (s cm2 keV2)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140507278741856\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>19.690125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>19.690125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          19.690125\n",
       "total         19.690125"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>43.635569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>47.204296</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             43.635569\n",
       "BIC             47.204296"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70e2e3f9",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "268ba576",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:05:25.852843Z",
     "iopub.status.busy": "2024-10-25T00:05:25.852451Z",
     "iopub.status.idle": "2024-10-25T00:05:25.858150Z",
     "shell.execute_reply": "2024-10-25T00:05:25.857640Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "792fb4c4",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "03674fcc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:05:25.860063Z",
     "iopub.status.busy": "2024-10-25T00:05:25.859690Z",
     "iopub.status.idle": "2024-10-25T00:06:17.316180Z",
     "shell.execute_reply": "2024-10-25T00:06:17.315537Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "131370830cf14b56aca51554fea3daad",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "198cd103",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5f271cb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:06:17.318548Z",
     "iopub.status.busy": "2024-10-25T00:06:17.318229Z",
     "iopub.status.idle": "2024-10-25T00:06:17.322691Z",
     "shell.execute_reply": "2024-10-25T00:06:17.322042Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.815), ('data', 0.815)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0204d058",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ce12d8c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:06:17.324708Z",
     "iopub.status.busy": "2024-10-25T00:06:17.324343Z",
     "iopub.status.idle": "2024-10-25T00:06:18.051354Z",
     "shell.execute_reply": "2024-10-25T00:06:18.050831Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">00:06:17 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m00:06:17\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=435126;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=691882;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=869276;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=97028;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=629027;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=785212;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=432016;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=659882;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=73115;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=552399;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=591172;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=346286;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=306627;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=444703;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=234498;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=615131;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=389176;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=556087;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">00:06:18 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m00:06:18\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=808725;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=671568;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=772349;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=403742;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=830086;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=207930;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a28445bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:06:18.053511Z",
     "iopub.status.busy": "2024-10-25T00:06:18.053000Z",
     "iopub.status.idle": "2024-10-25T00:06:18.540060Z",
     "shell.execute_reply": "2024-10-25T00:06:18.539456Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b1bf683",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fdef5c0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:06:18.542073Z",
     "iopub.status.busy": "2024-10-25T00:06:18.541868Z",
     "iopub.status.idle": "2024-10-25T00:06:18.547964Z",
     "shell.execute_reply": "2024-10-25T00:06:18.547420Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8b285671",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:06:18.549754Z",
     "iopub.status.busy": "2024-10-25T00:06:18.549562Z",
     "iopub.status.idle": "2024-10-25T00:06:18.552329Z",
     "shell.execute_reply": "2024-10-25T00:06:18.551823Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "95af46ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:06:18.554160Z",
     "iopub.status.busy": "2024-10-25T00:06:18.553973Z",
     "iopub.status.idle": "2024-10-25T00:06:18.636244Z",
     "shell.execute_reply": "2024-10-25T00:06:18.635738Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1045</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=825600;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=669059;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\u001b\\\u001b[2m1045\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(6.2 -0.6 +0.7) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.41 +/- 0.07</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       result             unit\n",
       "parameter                                                                     \n",
       "test_pl.spectrum.main.Powerlaw.K      (6.2 -0.6 +0.7) x 10^-1  1 / (keV s cm2)\n",
       "test_pl.spectrum.main.Powerlaw.index           -1.41 +/- 0.07                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140507165010864\">\n",
       "<tr><td>1.00</td><td>0.09</td></tr>\n",
       "<tr><td>0.09</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.09\n",
       "0.09 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>206.588285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>206.588285</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         206.588285\n",
       "total        206.588285"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>417.431889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>421.000616</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            417.431889\n",
       "BIC            421.000616"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "198ed309",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:06:18.637942Z",
     "iopub.status.busy": "2024-10-25T00:06:18.637753Z",
     "iopub.status.idle": "2024-10-25T00:06:18.732598Z",
     "shell.execute_reply": "2024-10-25T00:06:18.731976Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1045</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=39219;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=178870;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\u001b\\\u001b[2m1045\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>1.19 -0.21 +0.26</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>(-9.2 +/- 1.7) x 10^-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(3.0 -0.8 +1.1) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                              result  \\\n",
       "parameter                                                              \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K            1.19 -0.21 +0.26   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index  (-9.2 +/- 1.7) x 10^-1   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc     (3.0 -0.8 +1.1) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (keV s cm2)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140507164516016\">\n",
       "<tr><td>1.00</td><td>0.75</td><td>-0.88</td></tr>\n",
       "<tr><td>0.75</td><td>1.00</td><td>-0.87</td></tr>\n",
       "<tr><td>-0.88</td><td>-0.87</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.75 -0.88\n",
       " 0.75  1.00 -0.87\n",
       "-0.88 -0.87  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>200.58587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>200.58587</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake          200.58587\n",
       "total         200.58587"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>407.693479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>412.907809</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            407.693479\n",
       "BIC            412.907809"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e76c5745",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3528330c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:06:18.734809Z",
     "iopub.status.busy": "2024-10-25T00:06:18.734437Z",
     "iopub.status.idle": "2024-10-25T00:06:18.739437Z",
     "shell.execute_reply": "2024-10-25T00:06:18.738893Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 0.0002847189756131149\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "384b33e0",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "13c6a859",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:06:18.741266Z",
     "iopub.status.busy": "2024-10-25T00:06:18.741055Z",
     "iopub.status.idle": "2024-10-25T00:06:18.744269Z",
     "shell.execute_reply": "2024-10-25T00:06:18.743755Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ff80730",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "14195958",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:06:18.745998Z",
     "iopub.status.busy": "2024-10-25T00:06:18.745814Z",
     "iopub.status.idle": "2024-10-25T00:08:21.477734Z",
     "shell.execute_reply": "2024-10-25T00:08:21.477002Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7a0b70e13dcc445886c7bbc3a3978e57",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c4ecbbb",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e71f8c96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:08:21.480280Z",
     "iopub.status.busy": "2024-10-25T00:08:21.479820Z",
     "iopub.status.idle": "2024-10-25T00:08:21.484149Z",
     "shell.execute_reply": "2024-10-25T00:08:21.483544Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.001"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec7a7f47",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "96ee413f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:08:21.486149Z",
     "iopub.status.busy": "2024-10-25T00:08:21.485820Z",
     "iopub.status.idle": "2024-10-25T00:08:22.033101Z",
     "shell.execute_reply": "2024-10-25T00:08:22.032424Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8b59fe7",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4195d1a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-25T00:08:22.035249Z",
     "iopub.status.busy": "2024-10-25T00:08:22.035046Z",
     "iopub.status.idle": "2024-10-25T00:08:22.600721Z",
     "shell.execute_reply": "2024-10-25T00:08:22.600047Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41bfc051",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.20"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "00d78a58b35144b98d9a82a620638d15": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "04c9a71cf0944b5e9852fe435b9bb1eb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "131370830cf14b56aca51554fea3daad": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a73a53c7943049c8910e3c0b7bb18046",
        "IPY_MODEL_424754c0767c4522bb87eddd57df3848",
        "IPY_MODEL_ba690697c4aa4f19bb5ca362930b8364"
       ],
       "layout": "IPY_MODEL_c98c2bf0219749009111899dc9ea8739",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2954c183c95641fb8751eb254ad95c44": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_42bd8181de2f414380531312b8148441",
       "placeholder": "​",
       "style": "IPY_MODEL_34847b4c9c314eec8dd83e25e3eb654b",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [02:02&lt;00:00,  8.16it/s]"
      }
     },
     "2c66cc61f9094c2a8bf53578eeab6f17": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "34847b4c9c314eec8dd83e25e3eb654b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3ea58f51413148e0a6ae37d833a6ea66": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "424754c0767c4522bb87eddd57df3848": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2c66cc61f9094c2a8bf53578eeab6f17",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_cc20092b95324b7182948444cafd02c0",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "42bd8181de2f414380531312b8148441": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "57aa394b235b4845ad273d190f784def": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3ea58f51413148e0a6ae37d833a6ea66",
       "placeholder": "​",
       "style": "IPY_MODEL_d24015859fb7488d8ccfcb80569668b8",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "621a3e1d52d943039a527754917d447f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7a0b70e13dcc445886c7bbc3a3978e57": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_57aa394b235b4845ad273d190f784def",
        "IPY_MODEL_c224584e849949c9913309ecbf20e47d",
        "IPY_MODEL_2954c183c95641fb8751eb254ad95c44"
       ],
       "layout": "IPY_MODEL_d5ecfcf3b3724f79a848574fa525f5c7",
       "tabbable": null,
       "tooltip": null
      }
     },
     "9fadf523aa4b4430843b96dd4185863f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a71bb82ccb444917a38e2fdba0a32a35": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a73a53c7943049c8910e3c0b7bb18046": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_621a3e1d52d943039a527754917d447f",
       "placeholder": "​",
       "style": "IPY_MODEL_00d78a58b35144b98d9a82a620638d15",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "ad2fadf3d43746fc936ca1effd1bf7b4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "ba690697c4aa4f19bb5ca362930b8364": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9fadf523aa4b4430843b96dd4185863f",
       "placeholder": "​",
       "style": "IPY_MODEL_04c9a71cf0944b5e9852fe435b9bb1eb",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:51&lt;00:00, 19.92it/s]"
      }
     },
     "c224584e849949c9913309ecbf20e47d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a71bb82ccb444917a38e2fdba0a32a35",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ad2fadf3d43746fc936ca1effd1bf7b4",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "c98c2bf0219749009111899dc9ea8739": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "cc20092b95324b7182948444cafd02c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "d24015859fb7488d8ccfcb80569668b8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d5ecfcf3b3724f79a848574fa525f5c7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
