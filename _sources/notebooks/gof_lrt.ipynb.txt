{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "14fdd76c",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "00db4c15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T02:59:15.061576Z",
     "iopub.status.busy": "2025-02-05T02:59:15.061368Z",
     "iopub.status.idle": "2025-02-05T02:59:15.122263Z",
     "shell.execute_reply": "2025-02-05T02:59:15.121603Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "662b6342",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T02:59:15.124577Z",
     "iopub.status.busy": "2025-02-05T02:59:15.124133Z",
     "iopub.status.idle": "2025-02-05T02:59:18.226921Z",
     "shell.execute_reply": "2025-02-05T02:59:18.226241Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ca02303b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T02:59:18.229518Z",
     "iopub.status.busy": "2025-02-05T02:59:18.228952Z",
     "iopub.status.idle": "2025-02-05T02:59:18.259454Z",
     "shell.execute_reply": "2025-02-05T02:59:18.258906Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddc5074d",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2e9dbc72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T02:59:18.261631Z",
     "iopub.status.busy": "2025-02-05T02:59:18.261244Z",
     "iopub.status.idle": "2025-02-05T02:59:20.281680Z",
     "shell.execute_reply": "2025-02-05T02:59:20.280996Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">02:59:18 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m02:59:18\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=288581;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=316827;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">02:59:20 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m02:59:20\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=590041;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=234120;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97c2cf3b",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c5558fbf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T02:59:20.283879Z",
     "iopub.status.busy": "2025-02-05T02:59:20.283476Z",
     "iopub.status.idle": "2025-02-05T02:59:21.432443Z",
     "shell.execute_reply": "2025-02-05T02:59:21.431721Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=602012;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=474309;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1046</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=860395;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=280341;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\u001b\\\u001b[2m1046\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>(9.8 +/- 0.8) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(10 +/- 7) x 10^-2</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         result              unit\n",
       "parameter                                                        \n",
       "xyl.spectrum.main.Line.a  (9.8 +/- 0.8) x 10^-1   1 / (keV s cm2)\n",
       "xyl.spectrum.main.Line.b     (10 +/- 7) x 10^-2  1 / (s cm2 keV2)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140309173268736\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>22.36071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.36071</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data           22.36071\n",
       "total          22.36071"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>48.976738</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>52.545465</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             48.976738\n",
       "BIC             52.545465"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fff972a4",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b45cf973",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T02:59:21.434686Z",
     "iopub.status.busy": "2025-02-05T02:59:21.434303Z",
     "iopub.status.idle": "2025-02-05T02:59:21.440559Z",
     "shell.execute_reply": "2025-02-05T02:59:21.439964Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82ff2802",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "39b416ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T02:59:21.442434Z",
     "iopub.status.busy": "2025-02-05T02:59:21.442240Z",
     "iopub.status.idle": "2025-02-05T03:00:14.454798Z",
     "shell.execute_reply": "2025-02-05T03:00:14.454078Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "120547e446b84e0ca8667ecc8c8a2968",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffb751e5",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "86f4afc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:00:14.457349Z",
     "iopub.status.busy": "2025-02-05T03:00:14.456870Z",
     "iopub.status.idle": "2025-02-05T03:00:14.461378Z",
     "shell.execute_reply": "2025-02-05T03:00:14.460826Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.57), ('data', 0.57)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9945b257",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "99ebf90f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:00:14.463396Z",
     "iopub.status.busy": "2025-02-05T03:00:14.462999Z",
     "iopub.status.idle": "2025-02-05T03:00:15.221813Z",
     "shell.execute_reply": "2025-02-05T03:00:15.221248Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">03:00:14 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m03:00:14\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=311526;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=242590;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=311808;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=739245;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=242773;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=650017;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=710765;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=386709;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=892496;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=530671;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=263671;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=191834;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=535300;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=780224;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=601561;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=716482;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=865666;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=686614;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">03:00:15 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m03:00:15\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=461314;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=561408;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=619054;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=884310;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=350075;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=439058;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f418791d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:00:15.223852Z",
     "iopub.status.busy": "2025-02-05T03:00:15.223498Z",
     "iopub.status.idle": "2025-02-05T03:00:15.728342Z",
     "shell.execute_reply": "2025-02-05T03:00:15.727606Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA6IAAAMSCAYAAABwMnnyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAB4xklEQVR4nO3de3hU1b3/8c/OhEnIBEQCRsRIhAiIRVCqVBBEHZWLXFp/XtDTFpR4BfHSotKLqBQVPVWMt9oiOdrneKniJQqIgwIKiBXlgAJB1CBgCQEFMgmZyUz27w9OcqSZmVxmz+yZyfv1PD7H7LVmrW9STtMPa+21DNM0TQEAAAAAECdpdhcAAAAAAGhbCKIAAAAAgLgiiAIAAAAA4oogCgAAAACIK4IoAAAAACCuCKIAAAAAgLgiiAIAAAAA4oogCgAAAACIK4JoAqmpqVFpaalqamrsLgUAAAAAYoYgmkC2b9+uwsJCbd++3e5SAAAAACBm0u0uoK3zeDzyeDySJK/Xa3M1AAAAABB7BFGbud1uud1uSVJpaakKCwttrggAAAAAYoutuQAAAACAuGJFFAAAAEgCdXV1CgQCqqurs7sUpACHw6H09HQZhmHL/KyIAgAAAAnO6/Xq4MGDCgQCdpeCFOHz+XTgwAGZpmnL/KyIAgAAAAmsfhW0U6dOdpeCFOP1ehUIBNSuXbu4z82KKAAAAJDAAoGAnE6n3WUgBaWnpysYDNoyN0EUAAAAABBXBFEAAAAAQFzxjqjNPB6PPB6PpMN7tAEAAIBEN378eElSbW2tvvnmG/Xu3VuSdOKJJ+rRRx9t1H/z5s36+uuvNWbMmCbH3rlzpyZMmKBPPvnE0pqRWAiiNnO73XK73ZKk0tJSFRYW2lwRAAAAENkbb7wh6f9CY/3X4WzevFkej6dZQRRtA0EUAAAASCKmacpX7Y/pHBlZzlbdL/n6669r/vz5kqRu3brpvvvuU3p6uh577DFVVlZq/PjxGjBggO69917dfvvt+uabb1RbW6tu3brpT3/6k7p27Wr1t4IERRAFAAAAkoiv2q+JnWbGdI4X9s9RpiujRZ/ZunWrHnroIS1cuFC5ubl66qmn9Lvf/U5/+9vfdPPNN8vj8ejJJ59s6P+73/1OnTt3liQ988wzKioq0r333mvp94HERRAFAAAAELW1a9dq2LBhys3NlSRdeeWVeuKJJ8JeD1JSUqI33nhDfr9fPp9PRx99dDzLhc0IogAAAEASychy6oX9c2I+R7Qibe395JNP9Pzzz+ull15STk6Oli1bpsceeyzqOZE8CKIAAABAEjEMo8XbZuNh8ODBevrpp1VeXq7c3Fy9+OKLOuuss+RwOJSdna3KysqGvgcPHpTL5VKnTp3k9/v10ksv2Vg57EAQBQAAABC13r1767e//a2mTJki6fBhRbNnz5YknXXWWXr22Wc1duxYnXbaafrDH/6gN998UyNHjlSnTp00ZMgQlZeX21k+4swwTdO0uwgcVn99y1//+lf16dPH7nIAAACQAGpqaiRJmZmZNleCVGPnn620uM8IAAAAAGjT2JprM4/HI4/HI0nyer02VwMAAAAAsUcQtZnb7Zbb7Zb0f1tzAQAAACCVsTU3yZTMW2l3CQAAAAAQFYJokikpIogCAAAASG4EUQAAAABAXBFEAQAAAABxRRAFAAAA0GJLly7VL37xC40fP14jR47Ur371K9XV1bV6vPPOO0+bN29u8ed+8YtfaO3atU32u/POOzVs2DCNHz9eY8eO1VVXXaWvvvqqNaVKknbu3Kmf/vSnrf58PFVVValPnz52l3EETs0FAAAA0CJ79uzRH/7wBy1cuFDdu3eXJH3xxRcyDMPmyiK75pprNGnSJEnSM888o3nz5umxxx6zrZ764J6W1vbWBwmiAAAAQJJ5+esNqg7Uxmz8rPR2uqznqWHb9+3bJ4fDoaOOOqrh2SmnnNLw71999ZXmzJmjPXv2SJKuvPJKTZw4UQsWLNBbb72lQCCg9PR0/f73v9dpp53WaPyKigrNnj1bu3btks/n03nnnadbb71VkvTpp5/qnnvuUTAYVP/+/RUMBlv8/ZmmKa/X21B/IBDQddddpx9++EE+n099+/bVfffdp6ysLEnSq6++queee06maSo9Pb1RePX7/Zo5c6aysrJ09913a9++fbrzzju1e/duHXvssTrqqKPUs2dPTZs2TUVFRdq6dauqq6v1r3/9SwsWLNCaNWs0f/58SVK3bt103333KTc3VwsXLpTH49GTTz4pSXr//ff17LPP6vnnn9fatWt133336ac//ak+/fRTBYNBPfDAA+rfv78k6cUXX9Szzz6rrKwsXXDBBS3+GcUaQRQAAABIMtWBWlUF/LbN36dPHw0aNEjnnXeezjjjDJ122mkaO3ascnNzFQgEdOONN2ratGm6+OKLJUnff/+9JGn8+PGaPHmyJGn9+vW68847tWTJkkbj33nnnbruuut05plnNoTExYsX6/zzz9ett96q+++/X0OGDNGHH36ohQsXNrvu+fPn67XXXtP3338vh8Ohv//975Ikh8Ohhx9+WEcffbRM09SsWbP097//Xddee63Wrl2rJ554Qi+++KKOOeYYHTp0SNLhMC5JBw8e1NSpUzVkyBBdf/31kqTZs2dr4MCBuvnmm1VRUaEJEyaoZ8+eDXV89tlnev3119WlSxdt3bpVDz30kBYuXKjc3Fw99dRT+t3vfqe//e1vTX4/X3/9tf70pz9p1qxZeuGFF/Too49q/vz52rp1q4qKivTaa6/pmGOO0Z///Odm/4zihSCagPw1taqp8oVsM+vMsG2SlJHlTPgtEQAAAIhOVno7W8dPS0tTUVGRvvrqK/3zn//UypUr9fTTT+vVV1+V3++Xz+drCKGS1LlzZ0nSpk2b9PTTT2v//v1yOBz65ptvVFNTo8zMzIa+1dXVWrNmjfbu3XvEs2+++UZff/21HA6HhgwZIkk6++yzlZeX1+zv68dbc1999VXdfPPNWrhwoUzTVHFxsVasWKFgMKjKysqGldrly5dr/PjxOuaYYyRJ7du3bxivtrZWEydOVGFhoSZMmNDw/KOPPtIdd9whSeratatGjBhxRB3nnHOOunTpIklau3athg0bptzcXEmHV4+feOKJZq30nnDCCRowYIAk6bTTTtOzzz7bMP/w4cMbap44caL+8pe/NPvnFA8E0QQ085zHlV7lCts+sdPMsG19h+RrzvKphFEAAIAUFmnbbDz16tVLvXr10hVXXKFrrrlG7733ns4+++yQff1+v6ZNm6b/+q//0qmnniqv16tBgwbJ7/cfEURN05Qkvfzyy8rIyDhijC1btjQat7X/u3f06NGaOXOmvv/+e33wwQdau3at/v73vys7O1vPPfecPvrooybHSE9P16BBg/Tee+9pzJgxatcudID/9xrrt/w21dfhcBxxAJTPd+SC1I9/PmlpaWHDayJmg7b3VmyC8Xg8uvPOO3XnnXeqqKgo6vG2rC6Tr9q+bRoAAABIfeXl5Vq3bl3D1wcOHNDOnTuVl5enE088UZmZmXrrrbca2r///nv5/X7V1tbquOOOkyQ9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r3r27KkpU6bozDPPjGe5AIAExO8SAEC0Eu13CUEUAAAAABBXvCMKAAAAAIgrgigAAAAAIK4IogAAAACAuCKIAgAAAADiiiAKAAAAAIgrgigAAAAAIK4IogAAAACAuCKIAgAAAADiiiAKAAAAAIgrgigAAGjw8ssv67zzztO//vWvhmeLFy/W8OHDtXjxYhsr+z9vvfWWRowYoa+++sruUgAArUQQBQCkrH/9618aPnx4xH8uu+wyu8tMGJWVlXruuec0evRodevWLaZzffzxxxo+fLhuv/32Jvvee++9Gj58uN59911J0siRI5Wbm6unnnoqpjUCAGIn3e4CAACIte7du+uCCy4I2ZadnR3nahLXyy+/rIMHD2rixIkxn+unP/2pcnNztW7dOpWXlys3NzdkP6/Xqw8++EDZ2dkaPny4JCk9PV2XXXaZ5s2bp40bN6p///4xrxcAYC2CKAAg5XXv3l1XX3213WUktEAgoLfeekv9+/dX9+7dYz5fWlqaRo0apeLiYi1ZskS//vWvQ/bzeDzy+XwaPXq0MjIyGp6ff/75evzxx/XGG28QRAEgCbE1FwCAHxk+fLhuvvlmff/99/rTn/6ksWPHyu126/rrr9dnn30W8jPV1dV69tln9atf/Uput1ujR4/W7bffrg0bNjTqe/PNN2v48OHy+Xz661//qiuuuELnnnuunn322YY+K1asUGFhodxut8aPH6+5c+eqsrJSl1122RFbie+77z4NHz5cmzZtClnX/PnzNXz4cHk8nia/748//lj79u3TiBEjmuxbb8+ePfr1r38tt9ut5cuXNzz/4YcfVFRUpIkTJ+r888/X2LFj9fvf/15ff/31EZ8fPXq0DMPQ4sWLZZpmyDkWLVokSRozZswRzzt16qTTTjtNy5cvV3V1dbNrBgAkBoIoAAD/xuv16qabblJZWZkuvPBCDR8+XKWlpfrNb37TKEwdPHhQN9xwg4qLi9WhQweNHz9ew4cP19atWzV9+nR98MEHIef4wx/+oCVLlui0007T//t//6/hncy3335bf/jDH7Rz505ddNFFGjlypL744gvddtttCgQCR4wxbty4hs/8u2AwqEWLFumoo45q2NIaybp16yRJp5xyStM/IEllZWW68cYbtWfPHj300EMNAXbXrl2aMmWK/vGPf+i4447TL37xC/3sZz/Txx9/rBtuuOGI0Hzsscdq0KBB+u6770KG/K+//lpbtmzRSSedpN69ezdqP+WUU+T3+/X55583q2YAQOJgay4AIOXt2rXriBXHHzvllFM0ePDgI55t27ZNEyZM0C233KK0tMN/Z3v66adr7ty5WrhwoX7zm9809H300Uf1zTffaMaMGbr44osbnv/www8qLCzUQw89pDPPPPOIbaWStG/fPi1YsEAdO3ZseFZZWanHHntM7du31zPPPKO8vDxJUmFhoX7zm9+otLRUxx57bEP/AQMGKD8/X8uWLdPUqVPVvn37hraPP/5YFRUVuvTSS+V0Opv8GW3cuFFpaWkqKChosu8XX3yhO+64Q+np6SoqKjriM3/605/0/fff6+GHH9aZZ57Z8PxXv/qVCgsLNXfuXBUXFzc8HzNmjD755BMtWrRIp59++hHzhFsNrdenTx9J0ueff37EXACAxMeKKAAg5e3atUvFxcUh/1m7dm2j/u3bt9f111/fEEKlwye1OhwObdmypeHZ/v379f777+v0008/IoRK0tFHH62JEydq//79DauNPzZ58uQjQqgkffjhhzp06JBGjx7dEEKlw4fzTJkyJeT3Nm7cOFVXV2vZsmVHPH/rrbckSWPHjg33YzlCRUWFsrOzmwyta9as0a233qoOHTroySefPCKEbt26VZ9//rkuuuiiRsEwLy9PF198sb7++usjVpWHDRumo446SitWrFBVVVXD80AgoKVLl8rpdIY9aKpz586SDm8RBgAkF1ZEAQAp78wzz9TDDz/c7P7HH3+8srKyjniWnp6uzp07y+v1NjzbsmWLgsGgamtrQ6647ty5U5K0fft2DRky5Ii2k08+uVH/+nsxTz311EZt/fr1k8PhaPT8oosu0l/+8he99dZbDWH4+++/1+rVq/WTn/xE+fn5TXy3hx08eFBdu3aN2Of999/XP//5T/Xq1UsPPfSQjj766CPa67fd/vDDDyF/Ht9++23D/+3Zs6ckNQTNV155RR6PR+PHj5ckrVq1Svv375fb7VaHDh1C1lP//MCBA836HgEAiYMgCgDAv3G5XCGfOxwO1dXVNXx98OBBSYe3tW7cuDHseDU1NY2e1a/m/Vj9iuC/Bzzp8CmzRx11VKPnHTp00LnnnqslS5bo66+/Vs+ePbV48WIFg8Fmr4ZKUkZGhvx+f8Q+X3zxhYLBoE499dSQNdb/PNasWaM1a9aEHefQoUNHfD1mzBi98sorWrRoUUMQbWpbrqSGejMzMyPWDQBIPARRAABaqT6wXn755brpppta9FnDMMKO98MPPzRqq6ur04EDB0KuWo4fP15LlixRSUmJpk+frrffflsul0vnnntus+s56qijVFFREbHPtddeqw8//FCvvPKKHA5Ho++5vv7p06frkksuafbcvXr1Ut++fbV582Z988036tChgz7++GN169at0XujP1YffDt16tTsuQAAiYF3RAEAaKW+ffvKMAx98cUXlozXq1cvSQq5urp582YFg8GQnzvllFPUq1cvvfvuu/r444+1c+dOXXDBBS1aKezZs6f8fr/Ky8vD9nE6nfrTn/6ks846Sy+99JIef/zxI9rrtxu35udRv/L59ttv65133lEwGGy43iWc+q2+9dt8AQDJgyAKAEAr5eTk6Nxzz9Xnn3+uF154IeRdmJs2bQq5NTeUs88+W+3bt9fbb7+tXbt2NTwPBAKaP39+xM+OGzdOBw8e1AMPPCBJjQ5PasrAgQMb6o3E6XRq9uzZGjJkiF5++WUVFRU1tPXr10/9+vXTsmXLGh2eJB1e1V2/fn3Icd1utzIzM7V06VItWrRIaWlpGjlyZMRaNm/efETtAIDkwdZcAEDKi3R9iyRdddVVja5Xaa7bbrtNO3bs0FNPPaV33nlHp5xyirKzs1VRUaEtW7Zo586deu2115q1OtmhQwdNnTpVDz30kAoLC3XeeefJ5XLpo48+ktPpVJcuXcKuEF544YV6+umntXfvXvXp0yfkvZuRnH322XriiSf0ySefNLmlt127drrvvvv0xz/+Uf/4xz9kmqZuvvlmSdIf//hH3XLLLbrnnnv0yiuv6KSTTlJGRob27Nmjzz//XAcOHJDH42k0psvl0jnnnKN33nlH+/fv1+DBg5Wbmxu2BtM0tW7dOvXo0eOIE4YBAMmBIAoASHn117eEc+mll7Y6iHbs2FFPPvmkFi5cqPfee08ej0d1dXXq3LmzCgoK9Otf/zrkIUPhjB07Vh06dNDzzz+vJUuWyOVyaejQobr++ut16aWXqnv37iE/53K5NGzYMC1durTFq6GS1K1bN51xxhlavny5pk+f3uQ1LvVh9O6779Yrr7wi0zQ1ffp0HXfccZo/f75eeuklffDBB1q8eLHS0tKUk5OjAQMGaMSIEWHHHDNmjN555x1J0ujRoyPO/z//8z8qLy/XtGnTWvy9AgDsZ5ih9hEBAICEsnPnTl155ZU699xzdc8994Ts8+tf/1q7d+/WwoULw578G8m6det066236ve//70uvPDCaEuOqfvuu09r167VCy+8EPZ6FwBA4uIdUQAAEkhlZWWja1R8Pl/DwUDDhg0L+bmPPvpI33zzjdxud6tCqCQNGjRIgwcP1nPPPXfENTWJZseOHXrvvff0q1/9ihAKAEmKrbkAACSQ9evX68EHH9QZZ5yhY445RgcOHNCnn36q3bt36/TTT9d55513RP/XX39de/bs0VtvvSWn06mrrroqqvlvvvlmvfvuu6qoqIj4jqad9uzZo0mTJunnP/+53aUAAFqJrbkAACSQHTt2aP78+fr888+1f/9+SVL37t113nnn6Yorrmj0Lutll12miooK5eXl6frrr9eQIUNsqBoAgJYhiAIAAAAA4op3RAEAAAAAcUUQBQAAAADEFUEUAAAAABBXBFEAAAAAQFwRRAEAAAAAcUUQBQAAAADEFUEUAAAAABBXBFEAAAAAQFwRRAEAAAAAcfX/ASrJQinxqeW1AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46baa6a0",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a8902b19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:00:15.730710Z",
     "iopub.status.busy": "2025-02-05T03:00:15.730337Z",
     "iopub.status.idle": "2025-02-05T03:00:15.736617Z",
     "shell.execute_reply": "2025-02-05T03:00:15.736052Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "700c357d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:00:15.738553Z",
     "iopub.status.busy": "2025-02-05T03:00:15.738380Z",
     "iopub.status.idle": "2025-02-05T03:00:15.740936Z",
     "shell.execute_reply": "2025-02-05T03:00:15.740428Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "34c16587",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:00:15.742633Z",
     "iopub.status.busy": "2025-02-05T03:00:15.742448Z",
     "iopub.status.idle": "2025-02-05T03:00:15.825091Z",
     "shell.execute_reply": "2025-02-05T03:00:15.824545Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1046</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=28013;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=625042;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\u001b\\\u001b[2m1046\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(7.1 +/- 0.6) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.48 +/- 0.06</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     result             unit\n",
       "parameter                                                                   \n",
       "test_pl.spectrum.main.Powerlaw.K      (7.1 +/- 0.6) x 10^-1  1 / (keV s cm2)\n",
       "test_pl.spectrum.main.Powerlaw.index         -1.48 +/- 0.06                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140309056972832\">\n",
       "<tr><td>1.00</td><td>0.25</td></tr>\n",
       "<tr><td>0.25</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.25\n",
       "0.25 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>223.17708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>223.17708</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake          223.17708\n",
       "total         223.17708"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>450.609480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>454.178207</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            450.609480\n",
       "BIC            454.178207"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fba03500",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:00:15.826995Z",
     "iopub.status.busy": "2025-02-05T03:00:15.826803Z",
     "iopub.status.idle": "2025-02-05T03:00:15.925740Z",
     "shell.execute_reply": "2025-02-05T03:00:15.925203Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1046</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=527014;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=186083;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1046\u001b\\\u001b[2m1046\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>1.39 -0.25 +0.31</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>(-9.7 +/- 1.7) x 10^-1</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(2.7 -0.8 +1.1) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                              result  \\\n",
       "parameter                                                              \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K            1.39 -0.25 +0.31   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index  (-9.7 +/- 1.7) x 10^-1   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc     (2.7 -0.8 +1.1) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (keV s cm2)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140309056654160\">\n",
       "<tr><td>1.00</td><td>0.81</td><td>-0.91</td></tr>\n",
       "<tr><td>0.81</td><td>1.00</td><td>-0.85</td></tr>\n",
       "<tr><td>-0.91</td><td>-0.85</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.81 -0.91\n",
       " 0.81  1.00 -0.85\n",
       "-0.91 -0.85  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>214.632582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>214.632582</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         214.632582\n",
       "total        214.632582"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>435.786903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>441.001233</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            435.786903\n",
       "BIC            441.001233"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4a92c77",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ab0a0c46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:00:15.927839Z",
     "iopub.status.busy": "2025-02-05T03:00:15.927464Z",
     "iopub.status.idle": "2025-02-05T03:00:15.932716Z",
     "shell.execute_reply": "2025-02-05T03:00:15.932081Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 1.8781194065004662e-05\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ffffbbd",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "da89b8d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:00:15.934621Z",
     "iopub.status.busy": "2025-02-05T03:00:15.934427Z",
     "iopub.status.idle": "2025-02-05T03:00:15.938076Z",
     "shell.execute_reply": "2025-02-05T03:00:15.937416Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42d5b72b",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6c7d1330",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:00:15.940152Z",
     "iopub.status.busy": "2025-02-05T03:00:15.939757Z",
     "iopub.status.idle": "2025-02-05T03:02:23.151794Z",
     "shell.execute_reply": "2025-02-05T03:02:23.151023Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1855fdea8eba40769c9aa1c93c628aae",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eddc00b9",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "16bd408e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:02:23.154566Z",
     "iopub.status.busy": "2025-02-05T03:02:23.154151Z",
     "iopub.status.idle": "2025-02-05T03:02:23.158594Z",
     "shell.execute_reply": "2025-02-05T03:02:23.157936Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d05a0ed",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f0611064",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:02:23.160499Z",
     "iopub.status.busy": "2025-02-05T03:02:23.160313Z",
     "iopub.status.idle": "2025-02-05T03:02:23.752779Z",
     "shell.execute_reply": "2025-02-05T03:02:23.752090Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "760b9fe7",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "789a7799",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T03:02:23.754991Z",
     "iopub.status.busy": "2025-02-05T03:02:23.754583Z",
     "iopub.status.idle": "2025-02-05T03:02:24.375780Z",
     "shell.execute_reply": "2025-02-05T03:02:24.375051Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7985c32",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.21"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "01b2c4cf1eac42a79fe334662f82e085": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "08cae29e49134589a5e3aabf04b1adba": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "120547e446b84e0ca8667ecc8c8a2968": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5e545b65582d4c03bc7e5656f005d5b9",
        "IPY_MODEL_392b32f0544748c5ae33ae2229a6946b",
        "IPY_MODEL_8680e49ca5ce462b8834ab93ac8cd900"
       ],
       "layout": "IPY_MODEL_08cae29e49134589a5e3aabf04b1adba",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1855fdea8eba40769c9aa1c93c628aae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3c207edd8c964c4fb2b0a12c9744ebf7",
        "IPY_MODEL_4df55cc458ab46a0b76a709a3455b5ca",
        "IPY_MODEL_3cc7766fc7e74057a01221fa057694b5"
       ],
       "layout": "IPY_MODEL_a027112c42154d67a57017ebd890fa6a",
       "tabbable": null,
       "tooltip": null
      }
     },
     "22533746b24a45038b029b2c57ee463a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2817b225d9844c9697b4c3d9d3673ccc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2de6c916c0224d1992bed17b33fef295": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "392b32f0544748c5ae33ae2229a6946b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5c12039d2fec40769d7189c6f934e660",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_01b2c4cf1eac42a79fe334662f82e085",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "3c207edd8c964c4fb2b0a12c9744ebf7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fd03b5625d4e4ec78605efe86b7863bb",
       "placeholder": "​",
       "style": "IPY_MODEL_71ffcbad74324094830a198a5c73acc4",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "3cc7766fc7e74057a01221fa057694b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ad72451f19bb486b996eaf5e53b97383",
       "placeholder": "​",
       "style": "IPY_MODEL_5771c4ab7f3043b9a3c34f7780410269",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [02:06&lt;00:00,  8.11it/s]"
      }
     },
     "4df55cc458ab46a0b76a709a3455b5ca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2817b225d9844c9697b4c3d9d3673ccc",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2de6c916c0224d1992bed17b33fef295",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "5771c4ab7f3043b9a3c34f7780410269": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5c12039d2fec40769d7189c6f934e660": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5e545b65582d4c03bc7e5656f005d5b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_22533746b24a45038b029b2c57ee463a",
       "placeholder": "​",
       "style": "IPY_MODEL_9b27b7ee84594eb992849ca1b3f469d8",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "71ffcbad74324094830a198a5c73acc4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8680e49ca5ce462b8834ab93ac8cd900": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_88b8839e1c76408f99624ec8275dbef6",
       "placeholder": "​",
       "style": "IPY_MODEL_8b74f324a85d4b2ab90a31e7882e9247",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:52&lt;00:00, 19.17it/s]"
      }
     },
     "88b8839e1c76408f99624ec8275dbef6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8b74f324a85d4b2ab90a31e7882e9247": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9b27b7ee84594eb992849ca1b3f469d8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a027112c42154d67a57017ebd890fa6a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "ad72451f19bb486b996eaf5e53b97383": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fd03b5625d4e4ec78605efe86b7863bb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
