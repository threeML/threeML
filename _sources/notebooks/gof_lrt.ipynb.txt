{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "109c4231",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Goodness of Fit and Model Comparison\n",
    "\n",
    "\n",
    "## Goodness of fit\n",
    "It is often that we we need to know how well our model fits our data. While in  linear, Gaussian regimes and under certain regularity conditions, the reduced $\\chi^2$ provides a measure of fit quality, most of the time it is unreliable and incorrect to use. For more on this, read [The Do's and Don'ts of reduced chi2](https://arxiv.org/pdf/1012.3754.pdf).\n",
    "\n",
    "Instead, we can [almost](www.google.com) always use the bootstrap method to estimate the quality of an MLE analysis. In 3ML, we can do this with the quite simply after a fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5e2df7c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:53:12.625862Z",
     "iopub.status.busy": "2024-05-16T04:53:12.625672Z",
     "iopub.status.idle": "2024-05-16T04:53:12.682593Z",
     "shell.execute_reply": "2024-05-16T04:53:12.681916Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a1160ea6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:53:12.685001Z",
     "iopub.status.busy": "2024-05-16T04:53:12.684628Z",
     "iopub.status.idle": "2024-05-16T04:53:15.540584Z",
     "shell.execute_reply": "2024-05-16T04:53:15.539886Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0b3d8449",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:53:15.543668Z",
     "iopub.status.busy": "2024-05-16T04:53:15.543359Z",
     "iopub.status.idle": "2024-05-16T04:53:15.572956Z",
     "shell.execute_reply": "2024-05-16T04:53:15.572328Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "set_threeML_style()\n",
    "silence_warnings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48510745",
   "metadata": {},
   "source": [
    "Let's go back to simulations. We will simulate a straight line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d209b061",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:53:15.575459Z",
     "iopub.status.busy": "2024-05-16T04:53:15.575117Z",
     "iopub.status.idle": "2024-05-16T04:53:17.482585Z",
     "shell.execute_reply": "2024-05-16T04:53:17.481939Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">04:53:15 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m04:53:15\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=14393;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=117240;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">04:53:17 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m04:53:17\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=645925;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=807250;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=1, b=0)\n",
    "\n",
    "x = np.linspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr\n",
    "\n",
    "fig = xyl_generator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d89e9ea",
   "metadata": {},
   "source": [
    "So, now we simply need to fit the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "187966f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:53:17.484883Z",
     "iopub.status.busy": "2024-05-16T04:53:17.484696Z",
     "iopub.status.idle": "2024-05-16T04:53:18.412689Z",
     "shell.execute_reply": "2024-05-16T04:53:18.412111Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=649425;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=480082;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1045</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=524271;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=488269;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\u001b\\\u001b[2m1045\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.a</th>\n",
       "      <td>1.05 +/- 0.08</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>xyl.spectrum.main.Line.b</th>\n",
       "      <td>(-0 +/- 7) x 10^-2</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      result              unit\n",
       "parameter                                                     \n",
       "xyl.spectrum.main.Line.a       1.05 +/- 0.08   1 / (keV s cm2)\n",
       "xyl.spectrum.main.Line.b  (-0 +/- 7) x 10^-2  1 / (s cm2 keV2)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140706873421888\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>17.987766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>17.987766</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          17.987766\n",
       "total         17.987766"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>40.230851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>43.799578</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             40.230851\n",
       "BIC             43.799578"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Line()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "datalist = DataList(xyl)\n",
    "\n",
    "model = Model(PointSource(\"xyl\", 0, 0, spectral_shape=fit_function))\n",
    "\n",
    "jl = JointLikelihood(model, datalist)\n",
    "\n",
    "jl.fit()\n",
    "\n",
    "fig = xyl.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74a66c97",
   "metadata": {},
   "source": [
    "Now that the data are fit, we can assess the goodness of fit via simulating synthetic data sets and seeing how often these datasets have a similar likelihood. To do this, pass the JointLikelihood object to the GoodnessOfFit class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7263e334",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:53:18.415103Z",
     "iopub.status.busy": "2024-05-16T04:53:18.414703Z",
     "iopub.status.idle": "2024-05-16T04:53:18.420466Z",
     "shell.execute_reply": "2024-05-16T04:53:18.419833Z"
    }
   },
   "outputs": [],
   "source": [
    "gof_obj = GoodnessOfFit(jl)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d82ed585",
   "metadata": {},
   "source": [
    "Now we will monte carlo some datasets. This can be computationally expensive, so we will use 3ML's built in context manager for accessing ipython clusters. If we have a profile that is connected to a super computer, then we can simulate and fit all the datasets very quickly. Just use ```with parallel_computation():```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fbf9236e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:53:18.422771Z",
     "iopub.status.busy": "2024-05-16T04:53:18.422401Z",
     "iopub.status.idle": "2024-05-16T04:54:07.566671Z",
     "shell.execute_reply": "2024-05-16T04:54:07.566000Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2f5761f8d9bd4bb894f3dc73752a39fe",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gof, data_frame, like_data_frame = gof_obj.by_mc(\n",
    "    n_iterations=1000, continue_on_failure=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c26625bd",
   "metadata": {},
   "source": [
    "Three things are returned, the GOF for each plugin (in our case one) as well as the total GOF, a data frame with the fitted values for each synthetic dataset, and the likelihoods for all the fits. We can see that the data have a reasonable GOF:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "14dc8357",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:54:07.569356Z",
     "iopub.status.busy": "2024-05-16T04:54:07.568991Z",
     "iopub.status.idle": "2024-05-16T04:54:07.573290Z",
     "shell.execute_reply": "2024-05-16T04:54:07.572671Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('total', 0.897), ('data', 0.897)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gof"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34d96924",
   "metadata": {},
   "source": [
    "## Likelihood Ratio Tests\n",
    "\n",
    "An essential part of MLE analysis is the likelihood ratio test (LRT) for comparing models. For **nested models** (those where one is a special case of the other), [Wilks' theorem](https://projecteuclid.org/euclid.aoms/1177732360) posits that the LRT is $\\chi^2$ distributed, and thus the null model can be rejected with a probability read from a $\\chi^2$ table.\n",
    "\n",
    "In a perfect world, this would always hold, but there are many regualrity conditions on Wilks' theorem that are often violated in astromonical data. For a review, see [Protassov et al](http://iopscience.iop.org/0004-637X/571/1/545/) and keep it close at heart whenever wanting to use the LRT.\n",
    "\n",
    "For these reasons, in 3ML we provide a method for computing the LRT via profiling the null model via bootstrap samples. This is valid for nested models and avoids the dangers of asymmptotics and parameters defined on the extreme boundries of their distributions (spectral line normalizations, extra spectral components, etc.). This method does not avoid other problems which may arise from systmatics present in the data. As with any analysis, it is important to doubt and try and prove the result wrong as well as understanding the data/instrument.\n",
    "\n",
    "Let's start by simulating some data from a power law with an exponential cutoff on top of a background.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9e1fa89f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:54:07.575543Z",
     "iopub.status.busy": "2024-05-16T04:54:07.575354Z",
     "iopub.status.idle": "2024-05-16T04:54:08.287407Z",
     "shell.execute_reply": "2024-05-16T04:54:08.286822Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">04:54:07 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m04:54:07\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=593167;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=216025;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=61111;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=820555;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=494332;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=853862;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=611758;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=107312;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=149069;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=3144;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: </span><span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold; font-style: italic\">None</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">                                                           </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: \u001b[0m\u001b[1;3;35mNone\u001b[0m\u001b[1;38;5;251m                                                          \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=648342;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=302959;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=779344;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=766955;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=129650;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=878537;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=309953;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=752495;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">04:54:08 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Auto-probed noise models:                                                    </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">490</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m04:54:08\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Auto-probed noise models:                                                   \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=324579;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=183542;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#490\u001b\\\u001b[2m490\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - observation: poisson                                                       </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">491</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - observation: poisson                                                      \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=341509;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=190511;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#491\u001b\\\u001b[2m491\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> - background: poisson                                                        </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">SpectrumLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">492</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m - background: poisson                                                       \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=74093;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py\u001b\\\u001b[2mSpectrumLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=676498;file:///home/runner/work/threeML/threeML/threeML/plugins/SpectrumLike.py#492\u001b\\\u001b[2m492\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energies = np.logspace(1, 3, 51)\n",
    "\n",
    "low_edge = energies[:-1]\n",
    "high_edge = energies[1:]\n",
    "\n",
    "# get a blackbody source function\n",
    "source_function = Cutoff_powerlaw(K=1, index=-1, xc=300, piv=100)\n",
    "\n",
    "# power law background function\n",
    "background_function = Powerlaw(K=1, index=-2.0, piv=100.0)\n",
    "\n",
    "spectrum_generator = SpectrumLike.from_function(\n",
    "    \"fake\",\n",
    "    source_function=source_function,\n",
    "    background_function=background_function,\n",
    "    energy_min=low_edge,\n",
    "    energy_max=high_edge,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "55e599f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:54:08.289457Z",
     "iopub.status.busy": "2024-05-16T04:54:08.289274Z",
     "iopub.status.idle": "2024-05-16T04:54:08.757392Z",
     "shell.execute_reply": "2024-05-16T04:54:08.756743Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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37b5+/btqyFDhujcc8/VGWecocGDB2v8+PEqKipSIBDQ9ddfr+nTp+uiiy6SJH355ZeSpIkTJ2rKlCmSpA8++EC33Xabli9f3mz82267TT/+8Y/17W9/uykkvvzyyzrvvPN08803684779SwYcP0z3/+U0uWLGlx3YsWLdKzzz6rL7/8Ug6HQ3/7298kSQ6HQ/fcc4+6dOki0zQ1e/Zs/e1vf9M111yj9evX68EHH9STTz6pY489VocOHZJ0OIxL0sGDBzVt2jQNGzZM1157rSRpzpw5GjRokG688UbV1NTo4osvVq9evZrqeP/99/Xcc8+pW7du2rZtm+6++24tWbJERUVFevjhh/Xzn/9cf/nLX2J+P59++ql+97vfafbs2fr73/+u++67T4sWLdK2bdu0YMECPfvsszr22GP1xz/+scU/o2QhiKYgf0OjGup8YdvMkBmxTZJy850pvyUCAAAA8cnPzrF1/KysLC1YsECffPKJ3nnnHa1evVqPPPKInnnmGfn9fvl8vqYQKkldu3aVJG3evFmPPPKIDhw4IIfDoc8++0wNDQ3Ky8tr6ltfX69169Zp7969Rz377LPP9Omnn8rhcGjYsGGSpLPOOkvFxcUt/r6+vjX3mWee0Y033qglS5bINE2Vl5dr1apVCgaDqq2tbVqpXblypSZOnKhjjz1WktShQ4em8RobGzVp0iSVlZXp4osvbnr+1ltv6dZbb5Ukde/eXaNGjTqqjrPPPlvdunWTJK1fv14jRoxQUVGRpMOrxw8++GCLVnpPOukkDRw4UJI0ePBgPfroo03zjxw5sqnmSZMm6U9/+lOLf07JQBBNQbPOfkDZda6I7ZM6z4rY1m9YieaunEYYBQAAyGDRts0mU+/evdW7d299//vf19VXX63XX39dZ511Vti+fr9f06dP11//+ld985vflNfr1ZAhQ+T3+48KoqZpSpIWL16s3Nzco8bYunVrs3Hb+v97x44dq1mzZunLL7/Um2++qfXr1+tvf/ubCgoK9Pjjj+utt96KOUZ2draGDBmi119/XePGjVNOTvgA/981HtnyG6uvw+E46gAon+/oBamv/3yysrIihtdUzAbt763YDLd1baV89fZt0wAAAEDmq66u1oYNG5q+/uqrr7Rz504VFxfr5JNPVl5enl588cWm9i+//FJ+v1+NjY064YQTJElP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85Sdna0dO3bYXRoAII307NlTTqdTkmQYhhobG7V3794Wf56tuQlUX1+vJ598Ups3b9aWLVtUW1ur22+/XWPGjGnW1+/3a9GiRXr11VdVW1ur3r17a+rUqTrjjDNsqBwAkCoS/btkx44dqq2tVY8ePRL5bQAAbJSo3yV//OMftWzZMvn9fn3nO99Rr169WlwTK6IJ9NVXX6m8vFxVVVUqLS2N2vfOO+/U4sWLdf755+vGG29UVlaWZs6cqY0bNyapWgBAKkrk7xKfz6c5c+boBz/4ATttACCDJep3yS233KJXXnlF9957r8444wwZhtHimgiiCVRYWKhnn31W//jHP3TddddF7Ld582atWLFC11xzja6//npNmDBB9913n4477jg9/PDDSawYAJBqEvW7JBAI6Fe/+pV69OihyZMnJ/A7AADYLZG5xOFwaMiQIdqwYYPWrVvX4poIognkdDpVWFgYs9+qVavkcDg0YcKEpme5ubkaN26cPvroI1VXVyeyTABACkvE75JQKKQ5c+bIMAzNmjWrVX+DDQBIP8nIJcFgULt27WpxTQTRFLB9+3adeOKJcrlcRz0/9dRTJUkff/xx07NAICCfz6dQKKRgMCifz6dgMJjUegEAqac1v0vuuece7du3T7/5zW+Unc1xEQCAw1r6u8Tr9eq1115TfX29AoGA3njjDb3//vsaOHBgi+fit08K2LdvX9i/oTjy7OunTz3++OMqLy9v+vqJJ56I+KIxAKD9aOnvkt27d+vFF1+U0+k86m+8582b16r/AwEAyDwt/V1iGIZefPFF3XvvvTJNUz169NAvf/lLnXLKKS2eiyCaAnw+n3Jycpo9P3Icss/na3p21VVXcXcoAKCZlv4uOe6447R69eqk1gYASA8t/V3icrk0f/78uOZia24KyM3NVWNjY7Pnfr+/qR0AgGj4XQIAiFcyf5cQRFNAYWGh9u3b1+z5kWfdunVLdkkAgDTD7xIAQLyS+buEIJoCSktLtXPnTtXV1R31fPPmzU3tAABEw+8SAEC8kvm7hCCaAkaNGqVgMKgXXnih6Znf79eyZcvUv39/FRUV2VgdACAd8LsEABCvZP4u4bCiBHvmmWfk9XqblrPXrFmjPXv2SJIuueQSFRQUqH///jrnnHO0cOFCHThwQD169NDy5cu1e/du3XrrrXaWDwBIAfwuAQDE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2FHnnHOOli9frk8//VS9evXSyy+/rGAw2OLVUEnKzc2V3++P2uejjz5SMBjUN7/5zbA1Hvl5rFu3TuvWrYs4zqFDh476ety4cXr66ae1bNmypiAaa1uupKZ68/LyotYNAEg9BFEAANroSGC9/PLLdcMNN7Tqs4ZhRBxv//79zdpCoZC++uqrsKuWEydO1PLly7V06VLNmDFDL730klwul84555wW13PMMceopqYmap9rrrlG//znP/X000/L4XA0+56P1D9jxgxdcsklLZ67d+/e6tevn7Zs2aLPPvtMHTt21Ntvv63jjz++2XujX3ck+Hbu3LnFcwEAUgPviAIA0Eb9+vWTYRj66KOPLBmvd+/ekhR2dXXLli0KBoNhP3faaaepd+/eeu211/T2229r586dOv/881u1UtirVy/5/X5VV1dH7ON0OvW73/1OZ555pp566ik98MADR7Uf2W7clp/HkZXPl156Sa+88oqCwWDT9S6RHNnqe2SbLwAgfRBEAQBoo8LCQp1zzjn68MMP9fe//z3sXZibN28OuzU3nLPOOksdOnTQSy+9pF27djU9DwQCWrRoUdTPTpgwQQcPHtRdd90lSc0OT4pl0KBBTfVG43Q6NWfOHA0bNkyLFy/WggULmtr69++v/v37a8WKFc0OT5IOr+p+8MEHYcd1u93Ky8vTq6++qmXLlikrK0ujR4+OWsuWLVuOqh0AkD7YmgsAyHjRrm+RpB/84AfNrldpqVtuuUU7duzQww8/rFdeeUWnnXaaCgoKVFNTo61bt2rnzp169tlnW7Q62bFjR02bNk133323ysrKdO6558rlcumtt96S0+lUt27dIq4QXnDBBXrkkUe0d+9e9e3bN+y9m9GcddZZevDBB/Xuu+/G3NKbk5OjO+64Q7/61a/0j3/8Q6Zp6sYbb5Qk/epXv9JNN92k3/zmN3r66ad1yimnKDc3V3v27NGHH36or776Sh6Pp9mYLpdLZ599tl555RUdOHBAQ4cOVVFRUcQaTNPUhg0b1LNnz6NOGAYApAeCKAAg4x25viWSSy+9tM1BtFOnTnrooYe0ZMkSvf766/J4PAqFQuratatKS0t15ZVXhj1kKJLx48erY8eOeuKJJ7R8+XK5XC4NHz5c1157rS699FL16NEj7OdcLpdGjBihV199tdWroZJ0/PHH64wzztDKlSs1Y8aMmNe4HAmjv/71r/X000/LNE3NmDFDJ5xwghYtWqSnnnpKb775pl5++WVlZWWpsLBQAwcO1KhRoyKOOW7cOL3yyiuSpLFjx0ad///+7/9UXV2t6dOnt/p7BQDYzzDD7SMCAAApZefOnbriiit0zjnn6De/+U3YPldeeaV2796tJUuWRDz5N5oNGzbo5ptv1i9+8QtdcMEF8ZacUHfccYfWr1+vv//97xGvdwEApC7eEQUAIIXU1tY2u0bF5/M1HQw0YsSIsJ9766239Nlnn8ntdrcphErSkCFDNHToUD3++ONHXVOTanbs2KH/374dmygQRWEY/aMpwWSwCcHEcDowEUEQQyP7sIjpwcBswBLEwA5MZCbRDjZeFhZ2F54unBM/eDf94N7T6ZT1ei1CAf4pq7kA8EYul0v2+32m02lGo1Gez2fO53Pu93smk0mapvn0/nA4pO/7HI/HVFWV1Wr1p/93u126rsswDN/eaL5S3/fZbDaZz+evHgWAX7KaCwBv5Ha7pW3bXK/XPB6PJEld12maJsvl8sst62KxyDAMGY/H2W63mc1mL5gaAH5GiAIAAFCUG1EAAACKEqIAAAAUJUQBAAAoSogCAABQlBAFAACgKCEKAABAUUIUAACAooQoAAAARQlRAAAAivoACJYCG3M/s6IAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = spectrum_generator.view_count_spectrum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cb9ffee",
   "metadata": {},
   "source": [
    "We simulated a weak cutoff powerlaw. But if this was real data, we wouldn't know that there was a cutoff. So we would fit both a power law (the null model) and a cutoff power law (the alternative model).\n",
    "\n",
    "Let's setup two models to fit the data via MLE in the standard 3ML way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3a1ee48c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:54:08.759751Z",
     "iopub.status.busy": "2024-05-16T04:54:08.759390Z",
     "iopub.status.idle": "2024-05-16T04:54:08.764992Z",
     "shell.execute_reply": "2024-05-16T04:54:08.764503Z"
    }
   },
   "outputs": [],
   "source": [
    "powerlaw = Powerlaw(piv=100)\n",
    "cutoff_powerlaw = Cutoff_powerlaw(piv=100)\n",
    "\n",
    "ps_powerlaw = PointSource(\"test_pl\", 0, 0, spectral_shape=powerlaw)\n",
    "ps_cutoff_powerlaw = PointSource(\"test_cpl\", 0, 0, spectral_shape=cutoff_powerlaw)\n",
    "\n",
    "model_null = Model(ps_powerlaw)\n",
    "model_alternative = Model(ps_cutoff_powerlaw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4fe95f55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:54:08.766994Z",
     "iopub.status.busy": "2024-05-16T04:54:08.766647Z",
     "iopub.status.idle": "2024-05-16T04:54:08.769246Z",
     "shell.execute_reply": "2024-05-16T04:54:08.768752Z"
    }
   },
   "outputs": [],
   "source": [
    "datalist = DataList(spectrum_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1125459b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:54:08.771276Z",
     "iopub.status.busy": "2024-05-16T04:54:08.770932Z",
     "iopub.status.idle": "2024-05-16T04:54:08.847318Z",
     "shell.execute_reply": "2024-05-16T04:54:08.846703Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1045</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=52588;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=211405;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\u001b\\\u001b[2m1045\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(5.2 -0.6 +0.7) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_pl.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-1.60 +/- 0.08</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       result             unit\n",
       "parameter                                                                     \n",
       "test_pl.spectrum.main.Powerlaw.K      (5.2 -0.6 +0.7) x 10^-1  1 / (keV s cm2)\n",
       "test_pl.spectrum.main.Powerlaw.index           -1.60 +/- 0.08                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140706824349968\">\n",
       "<tr><td>1.00</td><td>0.45</td></tr>\n",
       "<tr><td>0.45</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       "1.00 0.45\n",
       "0.45 1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>206.200923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>206.200923</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         206.200923\n",
       "total        206.200923"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>416.657164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>420.225891</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            416.657164\n",
       "BIC            420.225891"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_null = JointLikelihood(model_null, datalist)\n",
    "_ = jl_null.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3ea43334",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:54:08.849625Z",
     "iopub.status.busy": "2024-05-16T04:54:08.849294Z",
     "iopub.status.idle": "2024-05-16T04:54:08.942049Z",
     "shell.execute_reply": "2024-05-16T04:54:08.941499Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1045</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=41391;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=599876;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\u001b\\\u001b[2m1045\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.K</th>\n",
       "      <td>1.12 -0.28 +0.4</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.index</th>\n",
       "      <td>-1.09 +/- 0.20</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_cpl.spectrum.main.Cutoff_powerlaw.xc</th>\n",
       "      <td>(2.5 -0.9 +1.4) x 10^2</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                              result  \\\n",
       "parameter                                                              \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K             1.12 -0.28 +0.4   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index          -1.09 +/- 0.20   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc     (2.5 -0.9 +1.4) x 10^2   \n",
       "\n",
       "                                                         unit  \n",
       "parameter                                                      \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.K      1 / (keV s cm2)  \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.index                   \n",
       "test_cpl.spectrum.main.Cutoff_powerlaw.xc                 keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140706824223760\">\n",
       "<tr><td>1.00</td><td>0.88</td><td>-0.92</td></tr>\n",
       "<tr><td>0.88</td><td>1.00</td><td>-0.85</td></tr>\n",
       "<tr><td>-0.92</td><td>-0.85</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00  0.88 -0.92\n",
       " 0.88  1.00 -0.85\n",
       "-0.92 -0.85  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake</th>\n",
       "      <td>200.893979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>200.893979</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "fake         200.893979\n",
       "total        200.893979"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>408.309698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>413.524028</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC            408.309698\n",
       "BIC            413.524028"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jl_alternative = JointLikelihood(model_alternative, datalist)\n",
    "_ = jl_alternative.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb22274d",
   "metadata": {},
   "source": [
    "Ok, we now have our log(likelihoods) from each model. If we took Wilks' theorem to heart, then we would compute:\n",
    "\n",
    "$$\\Lambda(x)=\\frac{\\sup\\{\\,\\mathcal L(\\theta\\mid x):\\theta\\in\\Theta_0\\,\\}}{\\sup\\{\\,\\mathcal L(\\theta\\mid x) : \\theta\\in\\Theta\\,\\}}$$\n",
    "\n",
    "or $-2 \\log(\\Lambda)$ which would be $\\chi^2_{\\nu}$ distributed where $\\nu$ is the number of extra parameters in the alternative model. In our case:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4c9485b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:54:08.944500Z",
     "iopub.status.busy": "2024-05-16T04:54:08.944003Z",
     "iopub.status.idle": "2024-05-16T04:54:08.949167Z",
     "shell.execute_reply": "2024-05-16T04:54:08.948614Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "null hyp. prob.: 0.0006070112120936509\n"
     ]
    }
   ],
   "source": [
    "# calculate the test statistic\n",
    "TS = 2 * (\n",
    "    jl_null.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    "    - jl_alternative.results.get_statistic_frame()[\"-log(likelihood)\"][\"total\"]\n",
    ")\n",
    "\n",
    "print(f\"null hyp. prob.: {stats.chi2.pdf(TS,1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db3fd09f",
   "metadata": {},
   "source": [
    "But lets check this by simulating the null distribution.\n",
    "\n",
    "We create a LRT object by passing the null model and the alternative model (in that order)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0a300228",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:54:08.951514Z",
     "iopub.status.busy": "2024-05-16T04:54:08.951020Z",
     "iopub.status.idle": "2024-05-16T04:54:08.954355Z",
     "shell.execute_reply": "2024-05-16T04:54:08.953822Z"
    }
   },
   "outputs": [],
   "source": [
    "lrt = LikelihoodRatioTest(jl_null, jl_alternative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5eb09af4",
   "metadata": {},
   "source": [
    "Now we MC synthetic datasets again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4ff92d2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:54:08.956307Z",
     "iopub.status.busy": "2024-05-16T04:54:08.956117Z",
     "iopub.status.idle": "2024-05-16T04:56:07.457727Z",
     "shell.execute_reply": "2024-05-16T04:56:07.457081Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4c6439fcdf4b41fca9bf37304793eb2e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt_results = lrt.by_mc(1000, continue_on_failure=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1b5cf46",
   "metadata": {},
   "source": [
    "This returns three things, the null hypothesis probability, the test statistics for all the data sets, and the fitted values. We see that our null hyp. prob is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d3d6ee99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:56:07.460494Z",
     "iopub.status.busy": "2024-05-16T04:56:07.460029Z",
     "iopub.status.idle": "2024-05-16T04:56:07.464403Z",
     "shell.execute_reply": "2024-05-16T04:56:07.463794Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.002"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lrt.null_hypothesis_probability"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d1529fd",
   "metadata": {},
   "source": [
    "which is slightly different from what we obtained analytically.\n",
    "\n",
    "We can visualize why by plotting the distributions of TS and seeing if it follows a $\\chi^2_{1}$ distribution/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6e4d9114",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:56:07.466658Z",
     "iopub.status.busy": "2024-05-16T04:56:07.466307Z",
     "iopub.status.idle": "2024-05-16T04:56:07.975911Z",
     "shell.execute_reply": "2024-05-16T04:56:07.975183Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4304fa3",
   "metadata": {},
   "source": [
    "The curve is slightly higher than we expect. Let's rescale the curve by 1/2:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cf466c65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:56:07.978388Z",
     "iopub.status.busy": "2024-05-16T04:56:07.978152Z",
     "iopub.status.idle": "2024-05-16T04:56:08.509124Z",
     "shell.execute_reply": "2024-05-16T04:56:08.508435Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lrt.plot_TS_distribution(scale=0.5, bins=100, ec=\"k\", fc=\"white\", lw=1.2)\n",
    "_ = plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f768451",
   "metadata": {},
   "source": [
    "Thus, we see that 3ML provides an automatic, and possibly efficient way to avoid the nasty problems of the LRT.\n",
    "\n",
    "Both the GoodnessOfFit and LikelihoodRatioTest classes internally handle the generation of synthetic datasets. All current plugins have the ability to generate synthetic datasets based off their internal properties such as their background spectra and instrument responses."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "130455e980b443a594ad36b5c753141a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "158ae9066e6f46c7b5d514356dda4e53": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4f74b140082b42098a455e2ac4260469",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_dccdf2e3e6d24d75b9d617b15186b00a",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "1c8c815bb6da4e1e89af66b236b37569": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_28177388eb104125a49a72a4abcfd341",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_46533e01ba5d4894930f610e1afecc79",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "1dfab3717e92426b90b15a37afbfb878": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5b7d3a4d38d1457199b7d83ba7274318",
       "placeholder": "​",
       "style": "IPY_MODEL_9a478ff2082e4e769318da130218f148",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "2070a24391824f24be43af3ba72f44d5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "28177388eb104125a49a72a4abcfd341": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2f5761f8d9bd4bb894f3dc73752a39fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1dfab3717e92426b90b15a37afbfb878",
        "IPY_MODEL_1c8c815bb6da4e1e89af66b236b37569",
        "IPY_MODEL_742b1db7e4b548d2a000fb4ff9158503"
       ],
       "layout": "IPY_MODEL_de9d75d6e3594e96aa356ff0f85d0a23",
       "tabbable": null,
       "tooltip": null
      }
     },
     "35795cc8985245c8b0d37b89569e780e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "46533e01ba5d4894930f610e1afecc79": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "4c6439fcdf4b41fca9bf37304793eb2e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8606e730430d429c83bc8742133980af",
        "IPY_MODEL_158ae9066e6f46c7b5d514356dda4e53",
        "IPY_MODEL_cc60711283414517b2b819d50e63f266"
       ],
       "layout": "IPY_MODEL_e49841d28de4459191bbe65422465b15",
       "tabbable": null,
       "tooltip": null
      }
     },
     "4f74b140082b42098a455e2ac4260469": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5b7d3a4d38d1457199b7d83ba7274318": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "742b1db7e4b548d2a000fb4ff9158503": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fc96733a6d74481f9e34511053f26019",
       "placeholder": "​",
       "style": "IPY_MODEL_e6f2ba06f5f0496b8f495c6e7f70b15c",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:49&lt;00:00, 20.83it/s]"
      }
     },
     "7b208f83f2ce447bafea351bf0a39b77": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8606e730430d429c83bc8742133980af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2070a24391824f24be43af3ba72f44d5",
       "placeholder": "​",
       "style": "IPY_MODEL_35795cc8985245c8b0d37b89569e780e",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "9a478ff2082e4e769318da130218f148": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cc60711283414517b2b819d50e63f266": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7b208f83f2ce447bafea351bf0a39b77",
       "placeholder": "​",
       "style": "IPY_MODEL_130455e980b443a594ad36b5c753141a",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [01:58&lt;00:00,  8.62it/s]"
      }
     },
     "dccdf2e3e6d24d75b9d617b15186b00a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#46327e",
       "description_width": ""
      }
     },
     "de9d75d6e3594e96aa356ff0f85d0a23": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "e49841d28de4459191bbe65422465b15": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "e6f2ba06f5f0496b8f495c6e7f70b15c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fc96733a6d74481f9e34511053f26019": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
