{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bdb749b2",
   "metadata": {},
   "source": [
    "# Quickstart\n",
    "\n",
    "In this simple example we will generate some simulated data, and fit them with 3ML."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a53b0b17",
   "metadata": {},
   "source": [
    "Let's start by generating our dataset:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8b378fc2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T21:37:53.490647Z",
     "iopub.status.busy": "2024-05-20T21:37:53.490450Z",
     "iopub.status.idle": "2024-05-20T21:37:53.548367Z",
     "shell.execute_reply": "2024-05-20T21:37:53.547685Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5e485b81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T21:37:53.551024Z",
     "iopub.status.busy": "2024-05-20T21:37:53.550602Z",
     "iopub.status.idle": "2024-05-20T21:37:56.452844Z",
     "shell.execute_reply": "2024-05-20T21:37:56.452204Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "from threeML import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9dd9e213",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T21:37:56.455721Z",
     "iopub.status.busy": "2024-05-20T21:37:56.455207Z",
     "iopub.status.idle": "2024-05-20T21:37:56.485323Z",
     "shell.execute_reply": "2024-05-20T21:37:56.484754Z"
    },
    "lines_to_next_cell": 0
   },
   "outputs": [],
   "source": [
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "silence_warnings()\n",
    "set_threeML_style()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42061354",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8fedfb46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T21:37:56.487640Z",
     "iopub.status.busy": "2024-05-20T21:37:56.487257Z",
     "iopub.status.idle": "2024-05-20T21:37:58.514405Z",
     "shell.execute_reply": "2024-05-20T21:37:58.513698Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">21:37:56 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m21:37:56\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=406148;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=739064;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">21:37:58 </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m21:37:58\u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=537296;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=797731;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's generate some data with y = Powerlaw(x)\n",
    "\n",
    "gen_function = Powerlaw()\n",
    "\n",
    "\n",
    "# Generate a dataset using the power law, and a\n",
    "# constant 30% error\n",
    "\n",
    "x = np.logspace(0, 2, 50)\n",
    "\n",
    "xyl_generator = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.3 * gen_function(x)\n",
    ")\n",
    "\n",
    "y = xyl_generator.y\n",
    "y_err = xyl_generator.yerr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5816e9d7",
   "metadata": {},
   "source": [
    "We can now fit it easily with 3ML:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eb945058",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T21:37:58.516813Z",
     "iopub.status.busy": "2024-05-20T21:37:58.516450Z",
     "iopub.status.idle": "2024-05-20T21:37:59.253258Z",
     "shell.execute_reply": "2024-05-20T21:37:59.252746Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> Using Gaussian statistic (equivalent to chi^</span><span style=\"color: #c0c0c0; text-decoration-color: #c0c0c0; font-weight: bold\">2</span><span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\">) with the provided errors.            </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">XYLike.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">93</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m Using Gaussian statistic \u001b[0m\u001b[1;38;5;251m(\u001b[0m\u001b[1;38;5;251mequivalent to chi^\u001b[0m\u001b[1;37m2\u001b[0m\u001b[1;38;5;251m)\u001b[0m\u001b[1;38;5;251m with the provided errors.           \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=652741;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py\u001b\\\u001b[2mXYLike.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=553759;file:///home/runner/work/threeML/threeML/threeML/plugins/XYLike.py#93\u001b\\\u001b[2m93\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to minuit                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1045</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to minuit                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=287375;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=154667;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1045\u001b\\\u001b[2m1045\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">         </span><span style=\"color: #00ffaf; text-decoration-color: #00ffaf\">INFO    </span> <span style=\"color: #c6c6c6; text-decoration-color: #c6c6c6; font-weight: bold\"> set the minimizer to MINUIT                                             </span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">joint_likelihood.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1062\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1062</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[38;5;46m        \u001b[0m\u001b[38;5;46m \u001b[0m\u001b[38;5;49mINFO    \u001b[0m \u001b[1;38;5;251m set the minimizer to MINUIT                                            \u001b[0m\u001b[1;38;5;251m \u001b[0m\u001b]8;id=919936;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py\u001b\\\u001b[2mjoint_likelihood.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=371454;file:///home/runner/work/threeML/threeML/threeML/classicMLE/joint_likelihood.py#1062\u001b\\\u001b[2m1062\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>source.spectrum.main.Powerlaw.K</th>\n",
       "      <td>(9.7 -0.8 +0.9) x 10^-1</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>source.spectrum.main.Powerlaw.index</th>\n",
       "      <td>-2.017 +/- 0.033</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result             unit\n",
       "parameter                                                                    \n",
       "source.spectrum.main.Powerlaw.K      (9.7 -0.8 +0.9) x 10^-1  1 / (keV s cm2)\n",
       "source.spectrum.main.Powerlaw.index         -2.017 +/- 0.033                 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140413199190864\">\n",
       "<tr><td>1.00</td><td>-0.86</td></tr>\n",
       "<tr><td>-0.86</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.86\n",
       "-0.86  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>data</th>\n",
       "      <td>18.998949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>18.998949</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       -log(likelihood)\n",
       "data          18.998949\n",
       "total         18.998949"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>42.253217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>45.821944</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             42.253217\n",
       "BIC             45.821944"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fit_function = Powerlaw()\n",
    "\n",
    "xyl = XYLike(\"data\", x, y, y_err)\n",
    "\n",
    "results = xyl.fit(fit_function)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f6df2c8",
   "metadata": {},
   "source": [
    "Plot data and model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e950160a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T21:37:59.255615Z",
     "iopub.status.busy": "2024-05-20T21:37:59.255409Z",
     "iopub.status.idle": "2024-05-20T21:37:59.885615Z",
     "shell.execute_reply": "2024-05-20T21:37:59.884936Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "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B8YobgAAAAAiaWK/b2lR3mzlJWRIkvzhoH5dvki/3rxI9Y0NBqfrmpgujzk5Odq6dau8Xm+L8TVr1jR/DgAAAACRlGFP1RO5N+r8gROax16u+liXrX1Qg87u36H9JaNJTJfHiRMnKhQKqbi4uHmsoaFBr732msaNG9ehlVYBAAAAoLvYzTb9asQF+v3IaYo3N63Jss5XqV+nLZHte7aoWOyno6L2nccXX3xRHo+n+RHUDz74QLt27ZIknXfeeUpMTNS4ceN0+umn65FHHtH+/fs1bNgwvf7669qxY4d+9rOfGRm/VS6XSy6XS1LTHpIAAAAAerezU4/V2IQM/XTTQpXV71JaXD/lONKNjtUppnA4HDY6RGsuvPBC7dixo9XPFi9erPT0pn/gfr9fjz32mN588015PB5lZ2drxowZOv746H4h1e12q6ioSI8++qhyc3ONjgMAAAAY4tkbVqhur18JA+ya9udJRsfpMXUhv+6ueEmXp03UKMcQo+N0StTOPC5ZsqRdx9ntds2cOVMzZ87s4UQAAAAA0DkJlv9v7+5irKrvNQC/IzA4goqMFQz0cBxNSE2aemObNrTWujUSCRdtbYzcIHUMkLQkJqXFGFsJxsbW+hVj1GiMXrRKGgmpHjPZ2tgqjU160w+aCRrCgdAplhOU+Th7YJhz0XROPKj/zXFmr9kzz3MFa61Z+12z4Zd5Z6211/zc/e83VR3jE2nrex4BAABoDeURAACAIuURAACAIuURAACAIuURAACAomn7aaszkec8AgAA7Up5bKFarZZarZbkf5/zCAAA0A5ctgoAAECR8ggAAECR8ggAAECRex4BAIDKfHb1JRkdOZnOLtVkuvMOAQAAlfnsDZdUHYEmuWwVAACAImceW8hzHgEAgHalPLaQ5zwCAED7+9NL+yfu05xNl90qjwAAAGfgT/+xP8P/1cg5i+fPqvLonkcAAACKlEcAAACKlEcAAACKlEcAAACKlEcAAACKlEcAAACKPKqjher1eur1epJkcHCw4jQAAADNUx5bqFarpVarJUn6+/vT29tbcSIAAIDmuGwVAACAIuURAACAIuURAACAIuURAACAIuURAACAIuURAACAIuURAACAIuURAACAIuURAACAorlVB5hN6vV66vV6kmRwcLDiNAAAAM1THluoVqulVqslSfr7+9Pb21txIgAA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",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = xyl.plot(x_scale=\"log\", y_scale=\"log\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a269ffd8",
   "metadata": {},
   "source": [
    "Compute the goodness of fit using Monte Carlo simulations (NOTE: if you repeat this exercise from the beginning many time, you should find that the quantity \"gof\" is a random number distributed uniformly between 0 and 1. That is the expected result if the model is a good representation of the data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d2b23b08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T21:37:59.887997Z",
     "iopub.status.busy": "2024-05-20T21:37:59.887792Z",
     "iopub.status.idle": "2024-05-20T21:38:51.783379Z",
     "shell.execute_reply": "2024-05-20T21:38:51.782690Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "322bbd67a7cf44f6ba29c666a4d70300",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Goodness of fit computation:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The null-hypothesis probability from simulations is 0.84\n"
     ]
    }
   ],
   "source": [
    "gof, all_results, all_like_values = xyl.goodness_of_fit()\n",
    "\n",
    "print(\"The null-hypothesis probability from simulations is %.2f\" % gof[\"data\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dea2631c",
   "metadata": {},
   "source": [
    "The procedure outlined above works for any distribution for the data (Gaussian or Poisson). In this case we are using Gaussian data, thus the log(likelihood) is just half of a $\\chi^2$. We can then also use the $\\chi^2$ test, which gives a close result without performing simulations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "390d1b61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-20T21:38:51.785788Z",
     "iopub.status.busy": "2024-05-20T21:38:51.785597Z",
     "iopub.status.idle": "2024-05-20T21:38:51.791100Z",
     "shell.execute_reply": "2024-05-20T21:38:51.790453Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The null-hypothesis probability from theory is 0.85\n"
     ]
    }
   ],
   "source": [
    "import scipy.stats\n",
    "\n",
    "# Retrieve the likelihood values\n",
    "like_values = results.get_statistic_frame()\n",
    "\n",
    "# Compute the number of degrees of freedom\n",
    "n_dof = len(xyl.x) - len(fit_function.free_parameters)\n",
    "\n",
    "# Get the observed value for chi2\n",
    "# (the factor of 2 comes from the fact that the Gaussian log-likelihood is half of a chi2)\n",
    "obs_chi2 = 2 * like_values[\"-log(likelihood)\"][\"data\"]\n",
    "\n",
    "theoretical_gof = scipy.stats.chi2(n_dof).sf(obs_chi2)\n",
    "\n",
    "print(\"The null-hypothesis probability from theory is %.2f\" % theoretical_gof)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b329910",
   "metadata": {},
   "source": [
    "There are however many settings where a theoretical answer, such as the one provided by the $\\chi^2$ test, does not exist. A simple example is a fit where data follow the Poisson statistic. In that case, the MC computation can provide the answer."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "27bd2b4d1cfa462687ece333e6d274fa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "308f7f740ab840048303e06ab17ccc62": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_27bd2b4d1cfa462687ece333e6d274fa",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5c2af9fb32104d0094b0f5daac807a0a",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "322bbd67a7cf44f6ba29c666a4d70300": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_62f7018925614b7ea58568a83193def9",
        "IPY_MODEL_308f7f740ab840048303e06ab17ccc62",
        "IPY_MODEL_e3a313e31a09412488a1f26e9fb57c52"
       ],
       "layout": "IPY_MODEL_8de6a0e6287245cf94a038f84728a456",
       "tabbable": null,
       "tooltip": null
      }
     },
     "5c2af9fb32104d0094b0f5daac807a0a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "62f7018925614b7ea58568a83193def9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c1196c2a21f3407981b638616eff260e",
       "placeholder": "​",
       "style": "IPY_MODEL_72295add08cb418a8516695e9fada2e9",
       "tabbable": null,
       "tooltip": null,
       "value": "Goodness of fit computation: 100%"
      }
     },
     "72295add08cb418a8516695e9fada2e9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8de6a0e6287245cf94a038f84728a456": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "b23fcef63d9d42b4a2f70f342d58ba67": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c1196c2a21f3407981b638616eff260e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e3a313e31a09412488a1f26e9fb57c52": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ed783a2f8312457bb89e5755e40a97da",
       "placeholder": "​",
       "style": "IPY_MODEL_b23fcef63d9d42b4a2f70f342d58ba67",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:51&lt;00:00, 19.31it/s]"
      }
     },
     "ed783a2f8312457bb89e5755e40a97da": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
