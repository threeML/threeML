{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1243a52c",
   "metadata": {},
   "source": [
    "\\---\n",
    "jupyter:\n",
    "  jupytext:\n",
    "    formats: ipynb,md\n",
    "    text_representation:\n",
    "      extension: .md\n",
    "      format_name: markdown\n",
    "      format_version: '1.2'\n",
    "      jupytext_version: 1.7.1\n",
    "  kernelspec:\n",
    "    display_name: Python 3\n",
    "    language: python\n",
    "    name: python3\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fc6ca65",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "## Working with XSPEC models\n",
    "\n",
    "One of the most powerful aspects of **XSPEC** is a huge modeling community. While in 3ML, we are focused on building a powerful and modular data analysis tool, we cannot neglect the need for many of the models thahat already exist in **XSPEC** and thus provide support for them via **astromodels** directly in 3ML.\n",
    "\n",
    "For details on installing **astromodels** with **XSPEC** support, visit the 3ML or **astromodels** installation page.\n",
    "\n",
    "\n",
    "<div class=\"alert alert-block alert-info\">\n",
    "<b>Tip:</b> astromodels / 3ML already have ZDust, absorption and APEC models built in!\n",
    "</div>\n",
    "\n",
    "\n",
    "Let's explore how we can use **XSPEC** spectral models in 3ML."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f0aa2b5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:16:46.373436Z",
     "iopub.status.busy": "2025-02-05T04:16:46.371873Z",
     "iopub.status.idle": "2025-02-05T04:16:46.536145Z",
     "shell.execute_reply": "2025-02-05T04:16:46.534951Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ea741e5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:16:46.543120Z",
     "iopub.status.busy": "2025-02-05T04:16:46.542461Z",
     "iopub.status.idle": "2025-02-05T04:16:47.114877Z",
     "shell.execute_reply": "2025-02-05T04:16:47.113119Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bf9aa2e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:16:47.123356Z",
     "iopub.status.busy": "2025-02-05T04:16:47.122867Z",
     "iopub.status.idle": "2025-02-05T04:16:55.181653Z",
     "shell.execute_reply": "2025-02-05T04:16:55.180376Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "from threeML import set_threeML_style\n",
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "\n",
    "\n",
    "set_threeML_style()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb9b0b31",
   "metadata": {},
   "source": [
    "We do not load the models by default as this takes some time and 3ML should load quickly. However, if you need the **XSPEC** models, they are imported from astromodels like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8873f048",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:16:55.188216Z",
     "iopub.status.busy": "2025-02-05T04:16:55.187634Z",
     "iopub.status.idle": "2025-02-05T04:20:32.872143Z",
     "shell.execute_reply": "2025-02-05T04:20:32.870844Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading xspec models..."
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model agauss...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model agnsed...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model agnslim...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model apec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model btapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bbody...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bbodyrad...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bexrav...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bexriv...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bknpower...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bkn2pow...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bmc...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bremss...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model brnei...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bvapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bvrnei...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bvtapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bvvapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bvvrnei...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model bvvtapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model c6mekl...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model c6pmekl...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model c6pvmkl...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model c6vmekl...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model carbatm...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model cemekl...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model cevmkl...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model cflow...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model compbb...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model compLS...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model compPS...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model compST...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model compth...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model compTT...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model cph...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model cplinear...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model cutoffpl...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model disk...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model diskir...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model diskbb...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model diskline...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model diskm...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model disko...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model diskpbb...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model diskpn...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model eplogpar...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model eqpair...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model eqtherm...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model equil...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model expdec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model ezdiskbb...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model gaussian...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model gadem...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model gnei...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model grad...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model grbm...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model hatm...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model jet...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model kerrbb...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model kerrd...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model kyrline...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model laor...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model laor2...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model logpar...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model lorentz...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model meka...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model mekal...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model mkcflow...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model nei...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model nlapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model npshock...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model nsa...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model nsagrav...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model nsatmos...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model nsmax...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model nsmaxg...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model nsx...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model nteea...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model nthComp...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model optxagn...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model optxagnf...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model pegpwrlw...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model pexmon...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model pexrav...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model pexriv...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model plcabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model powerlaw...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model posm...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model pshock...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model qsosed...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model raymond...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model redge...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model refsch...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model rnei...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model sedov...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model sirf...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model snapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model srcut...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model sresc...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model ssa...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model step...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model tapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vbremss...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vcph...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vequil...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vgadem...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vgnei...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vmeka...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vmekal...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vmcflow...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vnei...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vnpshock...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model voigt...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vpshock...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vraymond...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vrnei...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vsedov...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vtapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vvapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vvgnei...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vvnei...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vvnpshock...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vvpshock...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vvrnei...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vvsedov...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vvtapec...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vvwdem...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vwdem...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model wdem...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zagauss...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zbbody...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zbknpower...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zbremss...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zcutoffpl...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zgauss...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zkerrbb...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zlogpar...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zpowerlw...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model absori...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model acisabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model constant...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model cabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model cyclabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model dust...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model edge...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model expabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model expfac...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model gabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model heilin...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model highecut...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model hrefl...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model logconst...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model log10con...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model lyman...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model notch...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model pcfabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model phabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model plabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model pwab...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model redden...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model smedge...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model spexpcut...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model spline...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model SSS_ice...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model swind1...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model TBabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model TBfeo...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model TBgas...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model TBgrain...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model TBvarabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model TBpcf...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model TBrel...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model uvred...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model varabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model vphabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model wabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model wndabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model xion...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model xscat...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zdust...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zedge...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zhighect...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zigm...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zpcfabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zphabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zxipab...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zxipcf...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zredden...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zsmdust...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zTBabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zvarabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zvfeabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zvphabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zwabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating code for Xspec model zwndabs...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done\n"
     ]
    }
   ],
   "source": [
    "from astromodels.xspec.factory import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b64b3087",
   "metadata": {},
   "source": [
    "The models are indexed with *XS_* before the typical **XSPEC** model names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f1e06813",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:20:32.878314Z",
     "iopub.status.busy": "2025-02-05T04:20:32.877796Z",
     "iopub.status.idle": "2025-02-05T04:20:32.889237Z",
     "shell.execute_reply": "2025-02-05T04:20:32.887942Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: The phabs model from XSpec (https://heasarc.gsfc.nasa.gov/xanadu/xspec/manual/XspecModels.html)</li>\n",
       "\n",
       "<li>formula: $n.a.$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>nh: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: (see https://heasarc.gsfc.nasa.gov/xanadu/xspec/manual/XspecModels.html)</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: 1000000.0</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.001</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: The phabs model from XSpec (https://heasarc.gsfc.nasa.gov/xanadu/xspec/manual/XspecModels.html)\n",
       "  * formula: $n.a.$\n",
       "  * parameters:\n",
       "    * nh:\n",
       "      * value: 1.0\n",
       "      * desc: (see https://heasarc.gsfc.nasa.gov/xanadu/xspec/manual/XspecModels.html)\n",
       "      * min_value: 0.0\n",
       "      * max_value: 1000000.0\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.001\n",
       "      * free: true"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plaw = XS_powerlaw()\n",
    "phabs = XS_phabs()\n",
    "phabs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af3e1859",
   "metadata": {},
   "source": [
    "The spectral models behave just as any other **astromodels** spectral model and can be used in combination with other **astromodels** spectral models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9066b2f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:20:32.894519Z",
     "iopub.status.busy": "2025-02-05T04:20:32.894238Z",
     "iopub.status.idle": "2025-02-05T04:20:33.844338Z",
     "shell.execute_reply": "2025-02-05T04:20:33.843139Z"
    },
    "lines_to_next_cell": 2,
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'flux')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from astromodels import Powerlaw\n",
    "\n",
    "am_plaw = Powerlaw()\n",
    "\n",
    "plaw_with_abs = am_plaw * phabs\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "energy_grid = np.linspace(0.1, 10.0, 1000)\n",
    "\n",
    "ax.loglog(energy_grid, plaw_with_abs(energy_grid))\n",
    "ax.set_xlabel(\"energy\")\n",
    "ax.set_ylabel(\"flux\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "deda0be3",
   "metadata": {},
   "source": [
    "## XSPEC Settings\n",
    "\n",
    "Many **XSPEC** models depend on external abundances, cross-sections, and cosmological parameters. We provide an interface to control these directly.\n",
    "\n",
    "Simply import the **XSPEC** settings like so:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c9cb2f14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:20:33.850707Z",
     "iopub.status.busy": "2025-02-05T04:20:33.849642Z",
     "iopub.status.idle": "2025-02-05T04:20:33.855103Z",
     "shell.execute_reply": "2025-02-05T04:20:33.854000Z"
    }
   },
   "outputs": [],
   "source": [
    "from astromodels.xspec.xspec_settings import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ae6c940",
   "metadata": {},
   "source": [
    "Calling the functions without arguments simply returns their current settings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4d8316f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:20:33.860870Z",
     "iopub.status.busy": "2025-02-05T04:20:33.860169Z",
     "iopub.status.idle": "2025-02-05T04:20:33.867136Z",
     "shell.execute_reply": "2025-02-05T04:20:33.865766Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'angr'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xspec_abund()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4938f36f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:20:33.872452Z",
     "iopub.status.busy": "2025-02-05T04:20:33.872054Z",
     "iopub.status.idle": "2025-02-05T04:20:33.879493Z",
     "shell.execute_reply": "2025-02-05T04:20:33.877966Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'vern'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xspec_xsect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "96544437",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:20:33.885117Z",
     "iopub.status.busy": "2025-02-05T04:20:33.884303Z",
     "iopub.status.idle": "2025-02-05T04:20:33.891826Z",
     "shell.execute_reply": "2025-02-05T04:20:33.890467Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(70.0, 0.0, 0.7300000190734863)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xspec_cosmo()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5dcb2c74",
   "metadata": {},
   "source": [
    "To change the settings for abundance and cross-section, provide strings with the normal **XSPEC** naming conventions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c7ad746f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:20:33.897114Z",
     "iopub.status.busy": "2025-02-05T04:20:33.896824Z",
     "iopub.status.idle": "2025-02-05T04:20:33.904162Z",
     "shell.execute_reply": "2025-02-05T04:20:33.902738Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Solar Abundance Vector set to wilm:  Wilms, J., Allen, A. & McCray, R. ApJ 542 914 (2000) (abundances are set to zero for those elements not included in the paper).\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'wilm'"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xspec_abund(\"wilm\")\n",
    "xspec_abund()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "60085f42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:20:33.910008Z",
     "iopub.status.busy": "2025-02-05T04:20:33.909720Z",
     "iopub.status.idle": "2025-02-05T04:20:33.916625Z",
     "shell.execute_reply": "2025-02-05T04:20:33.915271Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Cross Section Table set to bcmc:  Balucinska-Church and McCammon, 1998\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'bcmc'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xspec_xsect(\"bcmc\")\n",
    "xspec_xsect()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "783516c0",
   "metadata": {},
   "source": [
    "To alter the cosmological parameters, one passes either the parameters that should be changed, or all three:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "59c42d61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:20:33.922166Z",
     "iopub.status.busy": "2025-02-05T04:20:33.921879Z",
     "iopub.status.idle": "2025-02-05T04:20:33.933197Z",
     "shell.execute_reply": "2025-02-05T04:20:33.931094Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(68.0, 0.0, 0.7300000190734863)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xspec_cosmo(H0=68.0)\n",
    "xspec_cosmo()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e83c3f82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-05T04:20:33.938923Z",
     "iopub.status.busy": "2025-02-05T04:20:33.938639Z",
     "iopub.status.idle": "2025-02-05T04:20:33.945185Z",
     "shell.execute_reply": "2025-02-05T04:20:33.943864Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(68.0, 0.10000000149011612, 70.0)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xspec_cosmo(H0=68.0, q0=0.1, lambda_0=70.0)\n",
    "xspec_cosmo()"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "tags,-all"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
