{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3b63dad8",
   "metadata": {},
   "source": [
    "# Analysis Results\n",
    "\n",
    "3ML stores the results of a fit in a container we call an \"Analysis Result\" (AR). The structure of this object is designed to be useable in a *live* sense within an *active* analysis (python script, ipython interactive shell, jupyter notebook) as well as storable as a FITS file for saving results for later.\n",
    "\n",
    "The structure is nearly the same between MLE and Bayesian analyses in order to make a seamless functionality between all analyses.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dcbdef30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:46:50.141391Z",
     "iopub.status.busy": "2024-09-24T01:46:50.140828Z",
     "iopub.status.idle": "2024-09-24T01:46:53.754037Z",
     "shell.execute_reply": "2024-09-24T01:46:53.753277Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")\n",
    "from threeML import *\n",
    "from threeML.analysis_results import *\n",
    "import astropy.units as u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a7f90aeb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:46:53.756819Z",
     "iopub.status.busy": "2024-09-24T01:46:53.756286Z",
     "iopub.status.idle": "2024-09-24T01:46:53.820637Z",
     "shell.execute_reply": "2024-09-24T01:46:53.819998Z"
    }
   },
   "outputs": [],
   "source": [
    "silence_logs()\n",
    "from tqdm.auto import tqdm\n",
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "set_threeML_style()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4939e5e3",
   "metadata": {},
   "source": [
    "Let's take a look at what we can do with an AR. First, we will simulate some data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9f8af946",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:46:53.822882Z",
     "iopub.status.busy": "2024-09-24T01:46:53.822497Z",
     "iopub.status.idle": "2024-09-24T01:46:55.763077Z",
     "shell.execute_reply": "2024-09-24T01:46:55.762402Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=2, b=0) + Gaussian(F=30.0, mu=25.0, sigma=1)\n",
    "\n",
    "# Generate a dataset using the line and a gaussian.\n",
    "# constant 20% error\n",
    "\n",
    "x = np.linspace(0, 50, 50)\n",
    "\n",
    "xy = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.2 * gen_function(x)\n",
    ")\n",
    "\n",
    "fig = xy.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78fdeed1",
   "metadata": {},
   "source": [
    "## MLE Results\n",
    "\n",
    "\n",
    "First we will demonstrate how AR's work for an MLE analysis on our synthetic data. As we will see, most of the functionality exists in the Bayesian AR's as well.\n",
    "\n",
    "Let's do a simple likelihood maximization of our data and model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c7eabae7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:46:55.765191Z",
     "iopub.status.busy": "2024-09-24T01:46:55.764812Z",
     "iopub.status.idle": "2024-09-24T01:46:56.588955Z",
     "shell.execute_reply": "2024-09-24T01:46:56.588280Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.08 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(1 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.0 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.521 +/- 0.014) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.1 +/- 1.0) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.08 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (1 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.0 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.521 +/- 0.014) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (9.1 +/- 1.0) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140430400709632\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.05</td><td>0.04</td><td>-0.07</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>0.00</td><td>-0.01</td><td>0.00</td></tr>\n",
       "<tr><td>-0.05</td><td>0.00</td><td>1.00</td><td>-0.25</td><td>0.09</td></tr>\n",
       "<tr><td>0.04</td><td>-0.01</td><td>-0.25</td><td>1.00</td><td>-0.52</td></tr>\n",
       "<tr><td>-0.07</td><td>0.00</td><td>0.09</td><td>-0.52</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.05  0.04 -0.07\n",
       "-0.85  1.00  0.00 -0.01  0.00\n",
       "-0.05  0.00  1.00 -0.25  0.09\n",
       " 0.04 -0.01 -0.25  1.00 -0.52\n",
       "-0.07  0.00  0.09 -0.52  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>33.300565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>33.300565</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         33.300565\n",
       "total            33.300565"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>77.964767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>86.161246</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             77.964767\n",
       "BIC             86.161246"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fitfun = Line() + Gaussian()\n",
    "\n",
    "fitfun.b_1.bounds = (-10, 10.0)\n",
    "fitfun.a_1.bounds = (-100, 100.0)\n",
    "fitfun.F_2 = 25.0\n",
    "fitfun.F_2.bounds = (1e-3, 200.0)\n",
    "fitfun.mu_2 = 25.0\n",
    "fitfun.mu_2.bounds = (0.0, 100.0)\n",
    "fitfun.sigma_2.bounds = (1e-3, 10.0)\n",
    "\n",
    "model = Model(PointSource(\"fake\", 0.0, 0.0, fitfun))\n",
    "\n",
    "data = DataList(xy)\n",
    "\n",
    "jl = JointLikelihood(model, DataList(xy))\n",
    "_ = jl.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b643dbf2",
   "metadata": {},
   "source": [
    "We can get our errors as always, but the results cannot be propagated (error propagation assumes Gaussian errors, i.e., symmetric errors)\n",
    "In this case though errors are pretty symmetric, so we are likely in the case\n",
    "where the MLE is actually normally distributed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8054ae7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:46:56.591144Z",
     "iopub.status.busy": "2024-09-24T01:46:56.590772Z",
     "iopub.status.idle": "2024-09-24T01:46:56.663562Z",
     "shell.execute_reply": "2024-09-24T01:46:56.663016Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.08 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(1 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.0 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.521 -0.013 +0.014) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.1 -1.0 +1.1) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                   2.08 +/- 0.11   \n",
       "fake.spectrum.main.composite.b_1               (1 +/- 4) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2              (3.0 +/- 0.4) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.521 -0.013 +0.014) x 10   \n",
       "fake.spectrum.main.composite.sigma_2     (9.1 -1.0 +1.1) x 10^-1   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.079104</td>\n",
       "      <td>-0.113304</td>\n",
       "      <td>0.113286</td>\n",
       "      <td>0.113295</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.001220</td>\n",
       "      <td>-0.003844</td>\n",
       "      <td>0.003844</td>\n",
       "      <td>0.003844</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>30.204865</td>\n",
       "      <td>-4.030245</td>\n",
       "      <td>4.015471</td>\n",
       "      <td>4.022858</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.208379</td>\n",
       "      <td>-0.132761</td>\n",
       "      <td>0.139608</td>\n",
       "      <td>0.136184</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.909504</td>\n",
       "      <td>-0.101869</td>\n",
       "      <td>0.107636</td>\n",
       "      <td>0.104753</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.079104       -0.113304   \n",
       "fake.spectrum.main.composite.b_1       0.001220       -0.003844   \n",
       "fake.spectrum.main.composite.F_2      30.204865       -4.030245   \n",
       "fake.spectrum.main.composite.mu_2     25.208379       -0.132761   \n",
       "fake.spectrum.main.composite.sigma_2   0.909504       -0.101869   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.113286  0.113295   \n",
       "fake.spectrum.main.composite.b_1            0.003844  0.003844   \n",
       "fake.spectrum.main.composite.F_2            4.015471  4.022858   \n",
       "fake.spectrum.main.composite.mu_2           0.139608  0.136184   \n",
       "fake.spectrum.main.composite.sigma_2        0.107636  0.104753   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jl.get_errors()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3933ba1",
   "metadata": {},
   "source": [
    "We need to get the AnalysisResults object that is created after a fit is performed. The AR object is a member of the JointLikelihood object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2106c240",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:46:56.665648Z",
     "iopub.status.busy": "2024-09-24T01:46:56.665195Z",
     "iopub.status.idle": "2024-09-24T01:46:56.668088Z",
     "shell.execute_reply": "2024-09-24T01:46:56.667558Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = jl.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5b36ae3",
   "metadata": {},
   "source": [
    "We can display the results of the analysis. Note, when a fit is performed, the post display is actaully from the internal AR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "05bcb820",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:46:56.670103Z",
     "iopub.status.busy": "2024-09-24T01:46:56.669726Z",
     "iopub.status.idle": "2024-09-24T01:46:56.700070Z",
     "shell.execute_reply": "2024-09-24T01:46:56.699409Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.08 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(1 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.0 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.521 +/- 0.014) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.1 +/- 1.0) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.08 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (1 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.0 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.521 +/- 0.014) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (9.1 +/- 1.0) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140431625585376\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.05</td><td>0.04</td><td>-0.07</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>0.00</td><td>-0.01</td><td>0.00</td></tr>\n",
       "<tr><td>-0.05</td><td>0.00</td><td>1.00</td><td>-0.25</td><td>0.09</td></tr>\n",
       "<tr><td>0.04</td><td>-0.01</td><td>-0.25</td><td>1.00</td><td>-0.52</td></tr>\n",
       "<tr><td>-0.07</td><td>0.00</td><td>0.09</td><td>-0.52</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.05  0.04 -0.07\n",
       "-0.85  1.00  0.00 -0.01  0.00\n",
       "-0.05  0.00  1.00 -0.25  0.09\n",
       " 0.04 -0.01 -0.25  1.00 -0.52\n",
       "-0.07  0.00  0.09 -0.52  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>33.300565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>33.300565</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         33.300565\n",
       "total            33.300565"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>77.964767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>86.161246</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             77.964767\n",
       "BIC             86.161246"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02e3bf05",
   "metadata": {},
   "source": [
    "By default, the equal tail intervals are displayed. We can instead display highest posterior densities (equal in the MLE case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4cacdbe6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:46:56.701902Z",
     "iopub.status.busy": "2024-09-24T01:46:56.701708Z",
     "iopub.status.idle": "2024-09-24T01:46:56.733231Z",
     "shell.execute_reply": "2024-09-24T01:46:56.732700Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.08 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(1 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.0 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.521 +/- 0.014) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.1 +/- 1.0) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.08 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (1 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.0 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.521 +/- 0.014) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (9.1 +/- 1.0) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140430406129360\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.05</td><td>0.04</td><td>-0.07</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>0.00</td><td>-0.01</td><td>0.00</td></tr>\n",
       "<tr><td>-0.05</td><td>0.00</td><td>1.00</td><td>-0.25</td><td>0.09</td></tr>\n",
       "<tr><td>0.04</td><td>-0.01</td><td>-0.25</td><td>1.00</td><td>-0.52</td></tr>\n",
       "<tr><td>-0.07</td><td>0.00</td><td>0.09</td><td>-0.52</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.05  0.04 -0.07\n",
       "-0.85  1.00  0.00 -0.01  0.00\n",
       "-0.05  0.00  1.00 -0.25  0.09\n",
       " 0.04 -0.01 -0.25  1.00 -0.52\n",
       "-0.07  0.00  0.09 -0.52  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>33.300565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>33.300565</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         33.300565\n",
       "total            33.300565"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>77.964767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>86.161246</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             77.964767\n",
       "BIC             86.161246"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7c1b0d4",
   "metadata": {},
   "source": [
    "The AR stores several properties from the analysis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f250edb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:46:56.735277Z",
     "iopub.status.busy": "2024-09-24T01:46:56.734924Z",
     "iopub.status.idle": "2024-09-24T01:46:56.738995Z",
     "shell.execute_reply": "2024-09-24T01:46:56.738453Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'MLE'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.analysis_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "80399580",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:46:56.741061Z",
     "iopub.status.busy": "2024-09-24T01:46:56.740687Z",
     "iopub.status.idle": "2024-09-24T01:46:56.745087Z",
     "shell.execute_reply": "2024-09-24T01:46:56.744449Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.28356899e-02, -3.69255947e-04, -2.19045936e-02,\n",
       "         6.37181209e-04, -8.74836527e-04],\n",
       "       [-3.69255947e-04,  1.47741273e-05,  5.23192643e-06,\n",
       "        -6.82072644e-06,  3.59320952e-07],\n",
       "       [-2.19045936e-02,  5.23192643e-06,  1.61745723e+01,\n",
       "        -1.37679889e-01,  3.59209437e-02],\n",
       "       [ 6.37181209e-04, -6.82072644e-06, -1.37679889e-01,\n",
       "         1.82382314e-02, -7.32746587e-03],\n",
       "       [-8.74836527e-04,  3.59320952e-07,  3.59209437e-02,\n",
       "        -7.32746587e-03,  1.08980200e-02]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.covariance_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "df1fe33f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:46:56.747187Z",
     "iopub.status.busy": "2024-09-24T01:46:56.746808Z",
     "iopub.status.idle": "2024-09-24T01:47:01.404702Z",
     "shell.execute_reply": "2024-09-24T01:47:01.403994Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3c8e14b51a9c41409df94c99a3458d50",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "processing MLE analyses:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flux</th>\n",
       "      <th>low bound</th>\n",
       "      <th>hi bound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake: total</th>\n",
       "      <td>1.8621102581191697e-05 erg / (s cm2)</td>\n",
       "      <td>1.721282048976207e-05 erg / (s cm2)</td>\n",
       "      <td>1.997550803349243e-05 erg / (s cm2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             flux  \\\n",
       "fake: total  1.8621102581191697e-05 erg / (s cm2)   \n",
       "\n",
       "                                       low bound  \\\n",
       "fake: total  1.721282048976207e-05 erg / (s cm2)   \n",
       "\n",
       "                                        hi bound  \n",
       "fake: total  1.997550803349243e-05 erg / (s cm2)  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.get_point_source_flux(1 * u.keV, 0.1 * u.MeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d2ceec79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.407008Z",
     "iopub.status.busy": "2024-09-24T01:47:01.406529Z",
     "iopub.status.idle": "2024-09-24T01:47:01.425209Z",
     "shell.execute_reply": "2024-09-24T01:47:01.424689Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (5):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.079104</td>\n",
       "      <td>-100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.00122</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>s-1 cm-2 keV-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>30.204865</td>\n",
       "      <td>0.001</td>\n",
       "      <td>200.0</td>\n",
       "      <td>s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.208379</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.909504</td>\n",
       "      <td>0.001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (2):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (0):<br><br>(none)<br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     1\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (5):\n",
       "--------------------\n",
       "\n",
       "                                          value min_value max_value  \\\n",
       "fake.spectrum.main.composite.a_1       2.079104    -100.0     100.0   \n",
       "fake.spectrum.main.composite.b_1        0.00122     -10.0      10.0   \n",
       "fake.spectrum.main.composite.F_2      30.204865     0.001     200.0   \n",
       "fake.spectrum.main.composite.mu_2     25.208379       0.0     100.0   \n",
       "fake.spectrum.main.composite.sigma_2   0.909504     0.001      10.0   \n",
       "\n",
       "                                                unit  \n",
       "fake.spectrum.main.composite.a_1      keV-1 s-1 cm-2  \n",
       "fake.spectrum.main.composite.b_1      s-1 cm-2 keV-2  \n",
       "fake.spectrum.main.composite.F_2            s-1 cm-2  \n",
       "fake.spectrum.main.composite.mu_2                keV  \n",
       "fake.spectrum.main.composite.sigma_2             keV  \n",
       "\n",
       "Fixed parameters (2):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (0):\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.optimized_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7cf2206",
   "metadata": {},
   "source": [
    "## Saving results to disk\n",
    "\n",
    "The beauty of the analysis result is that all of this information can be written to disk and restored at a later time. The statistical parameters, best-fit model, etc. can all be recovered.\n",
    "\n",
    "AR's are stored as a structured FITS file. We write the AR like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "935d2418",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.427194Z",
     "iopub.status.busy": "2024-09-24T01:47:01.426997Z",
     "iopub.status.idle": "2024-09-24T01:47:01.468075Z",
     "shell.execute_reply": "2024-09-24T01:47:01.467475Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "ar.write_to(\"test_mle.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "177adffb",
   "metadata": {},
   "source": [
    "The FITS file can be examines with any normal FITS reader."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "182c4ac7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.469939Z",
     "iopub.status.busy": "2024-09-24T01:47:01.469741Z",
     "iopub.status.idle": "2024-09-24T01:47:01.472753Z",
     "shell.execute_reply": "2024-09-24T01:47:01.472190Z"
    }
   },
   "outputs": [],
   "source": [
    "import astropy.io.fits as fits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "12133426",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.474739Z",
     "iopub.status.busy": "2024-09-24T01:47:01.474372Z",
     "iopub.status.idle": "2024-09-24T01:47:01.480050Z",
     "shell.execute_reply": "2024-09-24T01:47:01.479384Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: test_mle.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       6   ()      \n",
      "  1  ANALYSIS_RESULTS    1 BinTableHDU     38   5R x 9C   [36A, D, D, D, D, 16A, 5D, D, D]   \n"
     ]
    }
   ],
   "source": [
    "ar_fits = fits.open(\"test_mle.fits\")\n",
    "ar_fits.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e2e36da",
   "metadata": {},
   "source": [
    "However, to easily pull the results back into the 3ML framework, we use the ${\\tt load\\_analysis\\_results}$ function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9eb370ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.482169Z",
     "iopub.status.busy": "2024-09-24T01:47:01.481804Z",
     "iopub.status.idle": "2024-09-24T01:47:01.542567Z",
     "shell.execute_reply": "2024-09-24T01:47:01.541959Z"
    }
   },
   "outputs": [],
   "source": [
    "ar_reloaded = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8b4430e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.544460Z",
     "iopub.status.busy": "2024-09-24T01:47:01.544266Z",
     "iopub.status.idle": "2024-09-24T01:47:01.550189Z",
     "shell.execute_reply": "2024-09-24T01:47:01.549578Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>33.300565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>33.300565</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         33.300565\n",
       "total            33.300565"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_statistic_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e032a230",
   "metadata": {},
   "source": [
    "You can get a DataFrame with the saved results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1c203b30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.552165Z",
     "iopub.status.busy": "2024-09-24T01:47:01.551786Z",
     "iopub.status.idle": "2024-09-24T01:47:01.569196Z",
     "shell.execute_reply": "2024-09-24T01:47:01.568690Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.079104</td>\n",
       "      <td>-0.113268</td>\n",
       "      <td>0.114361</td>\n",
       "      <td>0.113815</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.001220</td>\n",
       "      <td>-0.003865</td>\n",
       "      <td>0.003946</td>\n",
       "      <td>0.003906</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>30.204865</td>\n",
       "      <td>-4.100857</td>\n",
       "      <td>4.221895</td>\n",
       "      <td>4.161376</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.208379</td>\n",
       "      <td>-0.130641</td>\n",
       "      <td>0.131570</td>\n",
       "      <td>0.131106</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.909504</td>\n",
       "      <td>-0.105605</td>\n",
       "      <td>0.099197</td>\n",
       "      <td>0.102401</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.079104       -0.113268   \n",
       "fake.spectrum.main.composite.b_1       0.001220       -0.003865   \n",
       "fake.spectrum.main.composite.F_2      30.204865       -4.100857   \n",
       "fake.spectrum.main.composite.mu_2     25.208379       -0.130641   \n",
       "fake.spectrum.main.composite.sigma_2   0.909504       -0.105605   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.114361  0.113815   \n",
       "fake.spectrum.main.composite.b_1            0.003946  0.003906   \n",
       "fake.spectrum.main.composite.F_2            4.221895  4.161376   \n",
       "fake.spectrum.main.composite.mu_2           0.131570  0.131106   \n",
       "fake.spectrum.main.composite.sigma_2        0.099197  0.102401   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_data_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db6290fd",
   "metadata": {},
   "source": [
    "## Analysis Result Sets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d51e619",
   "metadata": {},
   "source": [
    "When doing time-resolved analysis or analysing a several objects, we can save several AR's is a set. This is achieved with the analysis result set. We can pass an array of AR's to the set and even set up descriptions for the different entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "65fecad5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.571289Z",
     "iopub.status.busy": "2024-09-24T01:47:01.570915Z",
     "iopub.status.idle": "2024-09-24T01:47:01.643316Z",
     "shell.execute_reply": "2024-09-24T01:47:01.642730Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "from threeML.analysis_results import AnalysisResultsSet\n",
    "\n",
    "analysis_set = AnalysisResultsSet([ar, ar_reloaded])\n",
    "\n",
    "# index as time bins\n",
    "analysis_set.set_bins(\"testing\", [-1, 1], [3, 5], unit=\"s\")\n",
    "\n",
    "# write to disk\n",
    "analysis_set.write_to(\"analysis_set_test.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f819e2e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.645169Z",
     "iopub.status.busy": "2024-09-24T01:47:01.644812Z",
     "iopub.status.idle": "2024-09-24T01:47:01.764765Z",
     "shell.execute_reply": "2024-09-24T01:47:01.764102Z"
    }
   },
   "outputs": [],
   "source": [
    "analysis_set = load_analysis_results(\"analysis_set_test.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "890f9fe0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.767008Z",
     "iopub.status.busy": "2024-09-24T01:47:01.766640Z",
     "iopub.status.idle": "2024-09-24T01:47:01.798074Z",
     "shell.execute_reply": "2024-09-24T01:47:01.797428Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.08 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(1 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.0 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.521 +/- 0.014) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.1 +/- 1.0) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.08 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (1 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.0 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.521 +/- 0.014) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (9.1 +/- 1.0) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140430406128448\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.05</td><td>0.04</td><td>-0.07</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>0.00</td><td>-0.01</td><td>0.00</td></tr>\n",
       "<tr><td>-0.05</td><td>0.00</td><td>1.00</td><td>-0.25</td><td>0.09</td></tr>\n",
       "<tr><td>0.04</td><td>-0.01</td><td>-0.25</td><td>1.00</td><td>-0.52</td></tr>\n",
       "<tr><td>-0.07</td><td>0.00</td><td>0.09</td><td>-0.52</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.05  0.04 -0.07\n",
       "-0.85  1.00  0.00 -0.01  0.00\n",
       "-0.05  0.00  1.00 -0.25  0.09\n",
       " 0.04 -0.01 -0.25  1.00 -0.52\n",
       "-0.07  0.00  0.09 -0.52  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>33.300565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>33.300565</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         33.300565\n",
       "total            33.300565"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>77.964767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>86.161246</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             77.964767\n",
       "BIC             86.161246"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis_set[0].display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "645b3474",
   "metadata": {},
   "source": [
    "## Error propagation\n",
    "In 3ML, we propagate errors for MLE reults via sampling of the covariance matrix *instead* of Taylor exanding around the maximum of the likelihood and computing a jacobain. Thus, we can achieve non-linear error propagation.\n",
    "\n",
    "You can use the results for propagating errors non-linearly for analytical functions:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0971f997",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.800190Z",
     "iopub.status.busy": "2024-09-24T01:47:01.799752Z",
     "iopub.status.idle": "2024-09-24T01:47:01.806938Z",
     "shell.execute_reply": "2024-09-24T01:47:01.806377Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Propagating a+b, with a and b respectively:\n",
      "equal-tail: (1 +/- 4) x 10^-3, hpd: (1 +/- 4) x 10^-3\n",
      "equal-tail: 2.08 -0.12 +0.11, hpd: 2.08 +/- 0.11\n",
      "\n",
      "This is the result (with errors):\n",
      "equal-tail: 2.08 +/- 0.11, hpd: 2.08 -0.12 +0.10\n",
      "(1.9677351602852549, 2.1883956491832666)\n"
     ]
    }
   ],
   "source": [
    "p1 = ar.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(\"Propagating a+b, with a and b respectively:\")\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "print(\"\\nThis is the result (with errors):\")\n",
    "res = p1 + p2\n",
    "print(res)\n",
    "\n",
    "print(res.equal_tail_interval())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57aa53f7",
   "metadata": {},
   "source": [
    "The propagation accounts for covariances. For example this\n",
    "has error of zero (of course) since there is perfect covariance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f94f4966",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.808759Z",
     "iopub.status.busy": "2024-09-24T01:47:01.808524Z",
     "iopub.status.idle": "2024-09-24T01:47:01.812766Z",
     "shell.execute_reply": "2024-09-24T01:47:01.812126Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is 50 * a/a:\n",
      "equal-tail: (5.0 +/- 0) x 10, hpd: (5.0 +/- 0) x 10\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is 50 * a/a:\")\n",
    "print(50 * p1 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ba8a6c6",
   "metadata": {},
   "source": [
    "You can use arbitrary (np) functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6eb309b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.814581Z",
     "iopub.status.busy": "2024-09-24T01:47:01.814404Z",
     "iopub.status.idle": "2024-09-24T01:47:01.819395Z",
     "shell.execute_reply": "2024-09-24T01:47:01.818881Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is arcsinh(b + 5*) / np.log10(b) (why not?)\n",
      "equal-tail: 9.6 -0.5 +0.6, hpd: 9.6 -0.6 +0.5\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is arcsinh(b + 5*) / np.log10(b) (why not?)\")\n",
    "print(np.arcsinh(p1 + 5 * p2) / np.log10(p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1a8e72d",
   "metadata": {},
   "source": [
    "Errors can become asymmetric. For example, the ratio of two gaussians is\n",
    "asymmetric notoriously:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7e38da41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.821324Z",
     "iopub.status.busy": "2024-09-24T01:47:01.820929Z",
     "iopub.status.idle": "2024-09-24T01:47:01.825385Z",
     "shell.execute_reply": "2024-09-24T01:47:01.824870Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Ratio a/b:\n",
      "equal-tail: (0.4 -1.5 +1.0) x 10^3, hpd: (0.4 -1.5 +0.9) x 10^3\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nRatio a/b:\")\n",
    "print(p2 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63dbca13",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "You can always use it with arbitrary functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "98551e41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.827383Z",
     "iopub.status.busy": "2024-09-24T01:47:01.827015Z",
     "iopub.status.idle": "2024-09-24T01:47:01.831832Z",
     "shell.execute_reply": "2024-09-24T01:47:01.831310Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Propagating using a custom function:\n",
      "equal-tail: 2.08 +/- 0.11, hpd: 2.08 -0.11 +0.10\n"
     ]
    }
   ],
   "source": [
    "def my_function(x, a, b):\n",
    "    return b * x**a\n",
    "\n",
    "\n",
    "print(\"\\nPropagating using a custom function:\")\n",
    "print(my_function(2.3, p1, p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f660e2fe",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "This is an example of an error propagation to get the plot of the model with its errors\n",
    "(which are propagated without assuming linearity on parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ae2e1e45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.833769Z",
     "iopub.status.busy": "2024-09-24T01:47:01.833453Z",
     "iopub.status.idle": "2024-09-24T01:47:01.840312Z",
     "shell.execute_reply": "2024-09-24T01:47:01.839631Z"
    }
   },
   "outputs": [],
   "source": [
    "def go(fitfun, ar, model):\n",
    "    fig, ax = plt.subplots()\n",
    "\n",
    "    # Gather the parameter variates\n",
    "\n",
    "    arguments = {}\n",
    "\n",
    "    for par in fitfun.parameters.values():\n",
    "        if par.free:\n",
    "            this_name = par.name\n",
    "\n",
    "            this_variate = ar.get_variates(par.path)\n",
    "\n",
    "            # Do not use more than 1000 values (would make computation too slow for nothing)\n",
    "\n",
    "            if len(this_variate) > 1000:\n",
    "                this_variate = np.random.choice(this_variate, size=1000)\n",
    "\n",
    "            arguments[this_name] = this_variate\n",
    "\n",
    "    # Prepare the error propagator function\n",
    "\n",
    "    pp = ar.propagate(\n",
    "        ar.optimized_model.fake.spectrum.main.shape.evaluate_at, **arguments\n",
    "    )\n",
    "\n",
    "    # You can just use it as:\n",
    "\n",
    "    print(pp(5.0))\n",
    "\n",
    "    # Make the plot\n",
    "\n",
    "    energies = np.linspace(0, 50, 100)\n",
    "\n",
    "    low_curve = np.zeros_like(energies)\n",
    "    middle_curve = np.zeros_like(energies)\n",
    "    hi_curve = np.zeros_like(energies)\n",
    "\n",
    "    free_parameters = model.free_parameters\n",
    "\n",
    "    p = tqdm(total=len(energies), desc=\"Propagating errors\")\n",
    "\n",
    "    with use_astromodels_memoization(False):\n",
    "        for i, e in enumerate(energies):\n",
    "            this_flux = pp(e)\n",
    "\n",
    "            low_bound, hi_bound = this_flux.equal_tail_interval()\n",
    "\n",
    "            low_curve[i], middle_curve[i], hi_curve[i] = (\n",
    "                low_bound,\n",
    "                this_flux.median,\n",
    "                hi_bound,\n",
    "            )\n",
    "\n",
    "            p.update(1)\n",
    "\n",
    "    ax.plot(energies, middle_curve, \"--\", color=\"black\")\n",
    "    ax.fill_between(energies, low_curve, hi_curve, alpha=0.5, color=\"blue\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b0e07f7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:01.842153Z",
     "iopub.status.busy": "2024-09-24T01:47:01.841813Z",
     "iopub.status.idle": "2024-09-24T01:47:05.716466Z",
     "shell.execute_reply": "2024-09-24T01:47:05.715881Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 2.09 -0.12 +0.11, hpd: 2.09 -0.10 +0.12\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "293e47c647df422ebb12db1aa964e50b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar, model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fb1e9e1",
   "metadata": {},
   "source": [
    "## Bayesian Analysis Results\n",
    "Analysis Results work exactly the same under Bayesian analysis.\n",
    "\n",
    "Let's run the analysis first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "63e5a369",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:05.718559Z",
     "iopub.status.busy": "2024-09-24T01:47:05.718192Z",
     "iopub.status.idle": "2024-09-24T01:47:11.671448Z",
     "shell.execute_reply": "2024-09-24T01:47:11.670922Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e2d18d1f574c4089a5d3052c1390fd47",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b4d09ec1900444e2a1e235a4cd04c238",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Maximum a posteriori probability (MAP) point:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mMaximum a posteriori probability \u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mMAP\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m point:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.11 -0.18 +0.07</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(0.2 -2.8 +5) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.9 -0.5 +0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.522 -0.018 +0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.1 -1.1 +0.9) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                2.11 -0.18 +0.07   \n",
       "fake.spectrum.main.composite.b_1           (0.2 -2.8 +5) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2            (2.9 -0.5 +0.4) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.522 -0.018 +0.013) x 10   \n",
       "fake.spectrum.main.composite.sigma_2     (9.1 -1.1 +0.9) x 10^-1   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(posterior) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mposterior\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(posterior)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>-36.657638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>-36.657638</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(posterior)\n",
       "sim_data       -36.657638\n",
       "total          -36.657638"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>84.678912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>92.875391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIC</th>\n",
       "      <td>95.132421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PDIC</th>\n",
       "      <td>0.930032</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      statistical measures\n",
       "AIC              84.678912\n",
       "BIC              92.875391\n",
       "DIC              95.132421\n",
       "PDIC              0.930032"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for parameter in ar.optimized_model:\n",
    "    model[parameter.path].value = parameter.value\n",
    "\n",
    "model.fake.spectrum.main.composite.a_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.b_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.F_2.set_uninformative_prior(Log_uniform_prior)\n",
    "model.fake.spectrum.main.composite.mu_2.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.sigma_2.set_uninformative_prior(Log_uniform_prior)\n",
    "\n",
    "bs = BayesianAnalysis(model, data)\n",
    "bs.set_sampler(\"emcee\")\n",
    "bs.sampler.setup(n_iterations=1000, n_burn_in=100, n_walkers=20)\n",
    "samples = bs.sample()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3efe6e7",
   "metadata": {},
   "source": [
    "Again, we grab the results from the BayesianAnalysis object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4487a338",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:11.673501Z",
     "iopub.status.busy": "2024-09-24T01:47:11.673108Z",
     "iopub.status.idle": "2024-09-24T01:47:11.675955Z",
     "shell.execute_reply": "2024-09-24T01:47:11.675451Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2 = bs.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4687224",
   "metadata": {},
   "source": [
    "We can write and read the results to/from a file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "be760201",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:11.678070Z",
     "iopub.status.busy": "2024-09-24T01:47:11.677600Z",
     "iopub.status.idle": "2024-09-24T01:47:11.737598Z",
     "shell.execute_reply": "2024-09-24T01:47:11.736979Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "ar2.write_to(\"test_bayes.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0c3a17e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:11.739557Z",
     "iopub.status.busy": "2024-09-24T01:47:11.739174Z",
     "iopub.status.idle": "2024-09-24T01:47:11.788989Z",
     "shell.execute_reply": "2024-09-24T01:47:11.788489Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2_reloaded = load_analysis_results(\"test_bayes.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f89efa18",
   "metadata": {},
   "source": [
    "The AR holds the posterior samples from the analysis. We can see the saved and live reults are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "d3957005",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:11.791061Z",
     "iopub.status.busy": "2024-09-24T01:47:11.790683Z",
     "iopub.status.idle": "2024-09-24T01:47:11.849136Z",
     "shell.execute_reply": "2024-09-24T01:47:11.848616Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.allclose(ar2_reloaded.samples, ar2.samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9fcd441",
   "metadata": {},
   "source": [
    "**NOTE:** *MLE AR's store samples as well. These are the samples from the covariance matrix*\n",
    "\n",
    "We can examine the marginal distributions of the parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6d41f30a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:11.851051Z",
     "iopub.status.busy": "2024-09-24T01:47:11.850675Z",
     "iopub.status.idle": "2024-09-24T01:47:13.322676Z",
     "shell.execute_reply": "2024-09-24T01:47:13.321972Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1180x1180 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = ar2.corner_plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c739498d",
   "metadata": {},
   "source": [
    "We can return pandas DataFrames with equal tail or HPD results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "331a1ba0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:13.325039Z",
     "iopub.status.busy": "2024-09-24T01:47:13.324650Z",
     "iopub.status.idle": "2024-09-24T01:47:13.344356Z",
     "shell.execute_reply": "2024-09-24T01:47:13.343702Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.108104</td>\n",
       "      <td>-0.178526</td>\n",
       "      <td>0.074273</td>\n",
       "      <td>0.126399</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.000154</td>\n",
       "      <td>-0.002801</td>\n",
       "      <td>0.005001</td>\n",
       "      <td>0.003901</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>29.042480</td>\n",
       "      <td>-5.054129</td>\n",
       "      <td>3.792611</td>\n",
       "      <td>4.423370</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.221090</td>\n",
       "      <td>-0.177587</td>\n",
       "      <td>0.126171</td>\n",
       "      <td>0.151879</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.910721</td>\n",
       "      <td>-0.108510</td>\n",
       "      <td>0.087350</td>\n",
       "      <td>0.097930</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.108104       -0.178526   \n",
       "fake.spectrum.main.composite.b_1       0.000154       -0.002801   \n",
       "fake.spectrum.main.composite.F_2      29.042480       -5.054129   \n",
       "fake.spectrum.main.composite.mu_2     25.221090       -0.177587   \n",
       "fake.spectrum.main.composite.sigma_2   0.910721       -0.108510   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.074273  0.126399   \n",
       "fake.spectrum.main.composite.b_1            0.005001  0.003901   \n",
       "fake.spectrum.main.composite.F_2            3.792611  4.423370   \n",
       "fake.spectrum.main.composite.mu_2           0.126171  0.151879   \n",
       "fake.spectrum.main.composite.sigma_2        0.087350  0.097930   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"equal tail\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "43811334",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:13.346293Z",
     "iopub.status.busy": "2024-09-24T01:47:13.345944Z",
     "iopub.status.idle": "2024-09-24T01:47:13.368795Z",
     "shell.execute_reply": "2024-09-24T01:47:13.368152Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.108104</td>\n",
       "      <td>-0.178526</td>\n",
       "      <td>0.074262</td>\n",
       "      <td>0.126394</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.000154</td>\n",
       "      <td>-0.003193</td>\n",
       "      <td>0.004575</td>\n",
       "      <td>0.003884</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>29.042480</td>\n",
       "      <td>-4.589779</td>\n",
       "      <td>4.125846</td>\n",
       "      <td>4.357812</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.221090</td>\n",
       "      <td>-0.165963</td>\n",
       "      <td>0.134655</td>\n",
       "      <td>0.150309</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.910721</td>\n",
       "      <td>-0.112326</td>\n",
       "      <td>0.082507</td>\n",
       "      <td>0.097416</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.108104       -0.178526   \n",
       "fake.spectrum.main.composite.b_1       0.000154       -0.003193   \n",
       "fake.spectrum.main.composite.F_2      29.042480       -4.589779   \n",
       "fake.spectrum.main.composite.mu_2     25.221090       -0.165963   \n",
       "fake.spectrum.main.composite.sigma_2   0.910721       -0.112326   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.074262  0.126394   \n",
       "fake.spectrum.main.composite.b_1            0.004575  0.003884   \n",
       "fake.spectrum.main.composite.F_2            4.125846  4.357812   \n",
       "fake.spectrum.main.composite.mu_2           0.134655  0.150309   \n",
       "fake.spectrum.main.composite.sigma_2        0.082507  0.097416   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "945bbeda",
   "metadata": {},
   "source": [
    "Error propagation operates the same way. Internally, the process is the same as the MLE results, however, the samples are those of the posterior rather than the (assumed) covariance matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "512269ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:13.370914Z",
     "iopub.status.busy": "2024-09-24T01:47:13.370447Z",
     "iopub.status.idle": "2024-09-24T01:47:13.382747Z",
     "shell.execute_reply": "2024-09-24T01:47:13.382215Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: (1 +/- 4) x 10^-3, hpd: (1.5 -4 +3.3) x 10^-3\n",
      "equal-tail: 2.07 -0.14 +0.11, hpd: 2.07 -0.14 +0.11\n",
      "equal-tail: 2.07 -0.13 +0.11, hpd: 2.07 -0.13 +0.11\n"
     ]
    }
   ],
   "source": [
    "p1 = ar2.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar2.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "res = p1 + p2\n",
    "\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc561c08",
   "metadata": {},
   "source": [
    "To demonstrate how the two objects (MLE and Bayes) are the same, we see that our plotting function written for the MLE result works on our Bayesian results seamlessly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "5eb38f15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-24T01:47:13.384737Z",
     "iopub.status.busy": "2024-09-24T01:47:13.384363Z",
     "iopub.status.idle": "2024-09-24T01:47:17.283743Z",
     "shell.execute_reply": "2024-09-24T01:47:17.283062Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 2.07 -0.14 +0.12, hpd: 2.07 +/- 0.13\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3347533974914533abfcd01ee7bcd22e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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fZL3Xbz4dB155GfSzr3ppsMViQRyvI6MtN/3f/7njZo/Pzm161tvPa3f//7cjJ8r/fVofX3mM+/I6Uz211616ut68skfpN0vlzlzjtZHPrIqbdsvfnGY3nnnucR981m69Gode+yXE8/9/j794AedeY9Pdcklz6mrK/nJ17p1v9e9914w7HlNTR36/Od707b9+c9f1Nq1vxn23P33/6DOOOO2tG133XW2/P7tw557+um36MADk+3btWuT/vCHDyaeH3LIJ0Ugy7B+/Xo99NBDev7557V161a1trZq33331UUXXaTZs2eX6rYowPpHxPojIRmy2exyONL7vwSDu9KOTz6WUv/ha2hoTfuHx3pTlu8fyFRtbXPS/rEPBHYoGOzPe17y05wmtbfvkXatLVueVySSfzS6dY329j3U1pZ87cViYb355hpl/pFNfWz9Qz1nzpK0RWt37dqkd955dph7GnI4GrR48fvS9m3a9Lh27nx92HMnT16gPfY4Pm3fCy+sUCQSUOabkdQ/JpK0116nasqUfRLnDQ1t1Ysv3qp4PKp4PKpYLLL7cSTlsfl16qn/n1yu5sS5//rX7Vq79jdZbyjM483HktTZuVinn35LanN1//2XaOvWF2S3O9O+HA6X7HanbDbzk7l99jlL++//gcR50WhQd955Vtq10meOS77pOPHE72rq1H0Te958829avfpbieNsNnvKG8bkY6ezIeuNzbPP/kyvvfaQcr0Okn8QbZo16wgde+xX0s59/PFvKhDYkfZGNb3d5puNvfc+U7NnH5k4z+fbrjVrvq/U/zeTv+fkG1ZJOumk78njSU45+Prrf9batb/J+v8rnSGPZ7re/e7vpW198skfauvW57Pe6KZ/xbRw4XIdeujH08696abDFYtFFAzukt/fq3B4MOed99337LTX4QEHfFgdHYu0116nyu325G2xyyUdd1yBH6mOTZsm7bef9MoruXsx7LXXqbrkkmf1z3/erLlz02dE2bx5jQYH39bLL9+RfWKKxsZJ+sIXdqRt+8tfvpzS1TS//ff/gM44I/1N2YoVx8nn6xn23Mw3Wzt2/Fu//e1pw54nSZ/97Ja0QPbqq3/Un//8hWHPmzbtgKxA9tRT1yZm/yzkqKM+nxbIDCOuxx774ojau3Dhe9MCWX//Zj3//E3Dnmf9m5nqnXee1b/+9bthzw2F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ltcRRuPWW2/VTTfdpHnz5umWW25J27d27Vr97Gc/06uvviqPx6OlS5fq4osvVnNzc5lai0rx/PPP61Of+lTOfT/96U+17777Jp5X4+uIQFYi11xzjR5//HGdffbZmjVrlh588EF9/vOf13XXXacDDjig3M1DBerv79eKFSs0bdo0LViwQM8//3zO43p6enTFFVfI6/Xq4osvViAQ0O23367XX39dP//5z+VyuSa45agkv/3tb7V27VotXbpU8+fPV19fn+655x5ddNFF+ulPf6o999xTEq8jFLZ161b5/X4tW7ZMnZ2dCgaDeuKJJ3TVVVfpc5/7nJYvXy6J1xFGp6enR7fddpuampqy9m3cuFGf/vSnNXfuXF1++eXq6enRHXfcobfeeks/+MEPytBaVKIzzzxTe++9d9q2mTNnJh5X7evIQNG9/PLLxjHHHGP89re/TWwLBoPGeeedZ3ziE58oY8tQyUKhkNHb22sYhmGsX7/eOOaYY4wHHngg67gf/ehHxkknnWRs3bo1se2ZZ54xjjnmGOO+++6bsPaiMr300ktGOBxO2/bmm28aJ554ovG///u/iW28jjBa0WjUuPDCC40PfvCDiW28jjAaX//6141PfepTxhVXXGFccMEFafs+97nPGaeffroxNDSU2Hb//fcbxxxzjPH0009PdFNRYf75z38axxxzjLFq1aqCx1Xr64gxZCXwxBNPyOFwJD5BlKSGhgaddtppevnll7Vt27Yytg6Vyu12q6OjY9jjnnjiCR111FGaNm1aYtuhhx6q2bNna9WqVaVsIqrA/vvvn1WVmD17tvbYYw91d3cntvE6wmg5HA5NnTpVQ0NDiW28jjBSL7zwgp544gldccUVWft8Pp+effZZnXzyyfJ4PInt73nPe9TU1MRrCWn8fr+i0WjW9mp+HdFlsQQ2btyoWbNmpb0YJCVKrK+99lraHy9gpLZv366dO3dq0aJFWfv23ntvPfXUU2VoFSqdYRjauXOn9thjD0m8jjBygUBAoVBIPp9Pa9as0dNPP62lS5dK4nWEkYvFYrruuut02mmnaf78+Vn7X3/9dcVisazXksvl0l577aWNGzdOVFNR4a655hoFAgE5HA4dcMABuvTSS7V48WJJ1f06IpCVQF9fX85Kh7Wtt7d3opuEGtHX1ydJeV9fAwMDCofDcrvdE900VLBHH31U27dv18c+9jFJvI4wcjfccINWrlwpSbLb7Tr22GP16U9/WhKvI4zcfffdp23btunaa6/NuX+419KLL75Y0vah8jmdTh133HE64ogj1NbWpk2bNumOO+7Q5Zdfrp/85CdauHBhVb+OCGQlEAqFcg5ktv4ohUKhiW4SaoT12hnu9cUbIFi6u7t17bXXat9999WyZcsk8TrCyJ199tk6/vjj1dvbq1WrVikWiykSiUjidYSR6e/v1y9/+UtdcMEFeWfeHO61FA6HS9lEVIH9999f+++/f+L50UcfreOPP14XXnihbrzxRv3whz+s6tcRY8hKoKGhIfEHK5X1QmhoaJjoJqFGWK8dXl8Yib6+Pn3hC1+Qx+PRt771LTkcDkm8jjByc+fO1aGHHqply5bpe9/7ngKBgL74xS/KMAxeRxiRm266SS0tLTrzzDPzHjPca4lQj1xmzZqlo48+Ws8//7xisVhVv44IZCXQ0dGRKJumsrZ1dnZOdJNQI6wyfL7XV2tra0X/g4OJMzQ0pM9//vMaGhrSD3/4w7R/d3gdYayOP/54vfLKK9q8eTOvIwxr8+bNuv/++3XWWWept7dXW7Zs0ZYtWxQOhxWNRrVlyxYNDAwM+1rifRPymTp1qiKRiILBYFW/jghkJbBgwQK99dZb8vl8advXrVuX2A+MxZQpU9Te3q4NGzZk7Vu/fj2vLUgyu/988Ytf1ObNm/Xd7343MZmHhdcRxsrqEjQ0NMTrCMPq7e1VPB7Xddddp3PPPTfxtW7dOm3evFnnnnuuVqxYoXnz5snhcGS9liKRiDZu3MhrCXm98847crvdampqqurXEYGsBI4//njFYrHEQGjJLJU+8MAD2meffZhhEeNy3HHH6cknn0xbPuG5557T5s2bE7OfoX7FYjF94xvf0Msvv6xvfvOb2m+//XIex+sIhezcuTNrWzQa1cMPP6yGhoZEyOd1hELmzZunb3/721lf8+bN07Rp0/Ttb39bp512mrxerw499FA98sgj8vv9ifMffvhhBQIBXkvQrl27sra99tprWrNmjQ477DDZ7faqfh3ZDMMwyt2IWvT1r39dq1ev1jnnnKOZM2fqoYce0vr163XttdfqoIMOKnfzUKHuvvtuDQ0Nqa+vT/fee6+OPfZY7bXXXpLM1em9Xq+2bdumiy66SF6vV2eddZYCgYB+97vfacqUKbrxxhvpIlTnfvzjH+v3v/+9jjrqKJ1wwglZ+08++WRJ4nWEgr785S/L5/PpwAMP1JQpU9TX16dHH31Ub775pi677DKde+65kngdYWyuvPJK9ff365Zbbkls27Bhgy677DLNnTtXy5cvV09Pj+644w4deOCB+tGPflTG1qISfOpTn1JDQ4P2228/TZo0SZs2bdL9998vp9Opn/zkJ4kPiar1dUQgK5FQKKSbb75ZjzzyiIaGhrTnnnvqoosu0n/8x3+Uu2moYOecc462bt2ac98dd9yhrq4uSdIbb7yh66+/XmvXrpXT6dSRRx6pyy67TJMnT57I5qICXXnllXrhhRfy7l+9enXiMa8j5PPYY4/pT3/6k15//XX19/erublZixYt0hlnnKGjjz467VheRxitXIFMkl566SX97Gc/06uvvqrm5mYtXbpUH//4x9Xc3FymlqJS/P73v9ejjz6qt99+Wz6fT+3t7XrXu96lj370o5o1a1basdX4OiKQAQAAAECZMIYMAAAAAMqEQAYAAAAAZUIgAwAAAIAyIZABAAAAQJkQyAAAAACgTAhkAAAAAFAmBDIAAAAAKBMCGQAAAACUCYEMAAAAAMqEQAYAAAAAZUIgAwAAAIAyIZABAAAAQJn8/5jt5dNAQIrVAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar2, model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f445c83c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.20"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0266bab182984dc6be53aaf6609c89c4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "039a001a8bbe48e1b23dbf2ca404a199": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0606886c292a4eb4b4ab2a9369e7158c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0678c229628441929a3b8260456577a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ec1db35f5fe14340a3a766263f9f51a6",
       "placeholder": "​",
       "style": "IPY_MODEL_039a001a8bbe48e1b23dbf2ca404a199",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:03&lt;00:00, 27.19it/s]"
      }
     },
     "0c0f2b8a7b9c4eb6aafb1e95515186ac": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0cb99a5f585846f299b88db4db2e6a11": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1025f2a68a874cf487f5df513c3560fc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "293e47c647df422ebb12db1aa964e50b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f7efec2cb8434954ab56dfee7e532dae",
        "IPY_MODEL_7ee2d1e21e1041209e4e3c01e4d140f6",
        "IPY_MODEL_f3b4abdade2e4422ba2bd7609e6f9622"
       ],
       "layout": "IPY_MODEL_d96e1e47d449479c93b6afe86cf607ec",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2c3bebac136043eca3e68dc0c2730478": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2e21a96e268242db9e10d50d6b3aac3e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3347533974914533abfcd01ee7bcd22e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b7ad3b21dd9c4c3e96598de8ce80ecba",
        "IPY_MODEL_8a6b765352ec4868987233cfff07f32a",
        "IPY_MODEL_0678c229628441929a3b8260456577a6"
       ],
       "layout": "IPY_MODEL_a231a04d6a0c42f9b64b82849f15023f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "38a9550318524c20b47fd13bea6c0ff8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5af601e710734af187723bf959c45561",
       "placeholder": "​",
       "style": "IPY_MODEL_b3f6bc6ebcfd4611bd58790559757b15",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "3c49aa87682d490f9c9c4e06648845b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3c8e14b51a9c41409df94c99a3458d50": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_702e7647b34142a2b18a13653e642a3e",
        "IPY_MODEL_cc4ae8275a3445ae9366e5f3f5a26fd4",
        "IPY_MODEL_3fd66c939cc14a29abf3504b9e97f72c"
       ],
       "layout": "IPY_MODEL_94b7d050c3314c12a752533725cdb475",
       "tabbable": null,
       "tooltip": null
      }
     },
     "3f7fe77331184c74963ab84336de7ddb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3fd66c939cc14a29abf3504b9e97f72c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1025f2a68a874cf487f5df513c3560fc",
       "placeholder": "​",
       "style": "IPY_MODEL_c4abc6263ecb44449bae64561ee89484",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/1 [00:04&lt;00:00,  4.64s/it]"
      }
     },
     "4d2df7401b2849bd9f8f534fdfb06400": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5af601e710734af187723bf959c45561": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "609c486cc928459da66c6182fba04a34": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2c3bebac136043eca3e68dc0c2730478",
       "placeholder": "​",
       "style": "IPY_MODEL_6e042bdb3f8c40878d48a1175092e28a",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "6705e75237034182bcf0900eed591ad9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6aef44156d5f46ae93d04fed540baea0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6e042bdb3f8c40878d48a1175092e28a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "702e7647b34142a2b18a13653e642a3e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0266bab182984dc6be53aaf6609c89c4",
       "placeholder": "​",
       "style": "IPY_MODEL_b37894e89bd64459babf34a8b8cc5184",
       "tabbable": null,
       "tooltip": null,
       "value": "processing MLE analyses: 100%"
      }
     },
     "70c2b7cf54964221b5b23ac2274bc7c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3f7fe77331184c74963ab84336de7ddb",
       "placeholder": "​",
       "style": "IPY_MODEL_747e0d1aece148a198a04bf3490196d2",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:03&lt;00:00, 259.49it/s]"
      }
     },
     "747e0d1aece148a198a04bf3490196d2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7660194153af4d6a8c8c8458b27fcf15": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "7ee2d1e21e1041209e4e3c01e4d140f6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e53620e000384fda970cfdb11838d04b",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_cb515a5b204d473ca380c5a1984d5e44",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "87be9e0ccf7844f1a47e4bb280fb6f1e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "88403164bfbd4c69a2aaae9d90270a6c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8a6b765352ec4868987233cfff07f32a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fb51ea58f2f04b0bb209c0afa2927858",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_989f288edc564f75807733315f137e91",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "90172784584c403999e13fbcd8e6ea18": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d873d8d2ad394e8089b6e95edcbe9df5",
       "placeholder": "​",
       "style": "IPY_MODEL_0c0f2b8a7b9c4eb6aafb1e95515186ac",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:00&lt;00:00, 256.32it/s]"
      }
     },
     "94b7d050c3314c12a752533725cdb475": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "95cf03293cfb4462adcfdf1538424579": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "989f288edc564f75807733315f137e91": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "a231a04d6a0c42f9b64b82849f15023f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a9a8dc56bd044b28b5a24593e2d04c1a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b37894e89bd64459babf34a8b8cc5184": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b3f6bc6ebcfd4611bd58790559757b15": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b4d09ec1900444e2a1e235a4cd04c238": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_38a9550318524c20b47fd13bea6c0ff8",
        "IPY_MODEL_cc36c3717c1543538056c9ba69f5de50",
        "IPY_MODEL_70c2b7cf54964221b5b23ac2274bc7c6"
       ],
       "layout": "IPY_MODEL_a9a8dc56bd044b28b5a24593e2d04c1a",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b7ad3b21dd9c4c3e96598de8ce80ecba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2e21a96e268242db9e10d50d6b3aac3e",
       "placeholder": "​",
       "style": "IPY_MODEL_3c49aa87682d490f9c9c4e06648845b5",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "c4abc6263ecb44449bae64561ee89484": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cb515a5b204d473ca380c5a1984d5e44": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "cc36c3717c1543538056c9ba69f5de50": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6705e75237034182bcf0900eed591ad9",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6aef44156d5f46ae93d04fed540baea0",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "cc4ae8275a3445ae9366e5f3f5a26fd4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0606886c292a4eb4b4ab2a9369e7158c",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7660194153af4d6a8c8c8458b27fcf15",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "cd6db14fdcb848eba2b7834e7c384ed4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cec81a35d33f42a68645095cfebc1740",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_87be9e0ccf7844f1a47e4bb280fb6f1e",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "cec81a35d33f42a68645095cfebc1740": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d3c4a8571967430c8b9018198ff561d0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d873d8d2ad394e8089b6e95edcbe9df5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d96e1e47d449479c93b6afe86cf607ec": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e2d18d1f574c4089a5d3052c1390fd47": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_609c486cc928459da66c6182fba04a34",
        "IPY_MODEL_cd6db14fdcb848eba2b7834e7c384ed4",
        "IPY_MODEL_90172784584c403999e13fbcd8e6ea18"
       ],
       "layout": "IPY_MODEL_d3c4a8571967430c8b9018198ff561d0",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e53620e000384fda970cfdb11838d04b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ec1db35f5fe14340a3a766263f9f51a6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f3b4abdade2e4422ba2bd7609e6f9622": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4d2df7401b2849bd9f8f534fdfb06400",
       "placeholder": "​",
       "style": "IPY_MODEL_95cf03293cfb4462adcfdf1538424579",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:03&lt;00:00, 27.26it/s]"
      }
     },
     "f7efec2cb8434954ab56dfee7e532dae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0cb99a5f585846f299b88db4db2e6a11",
       "placeholder": "​",
       "style": "IPY_MODEL_88403164bfbd4c69a2aaae9d90270a6c",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "fb51ea58f2f04b0bb209c0afa2927858": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
