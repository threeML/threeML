{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "115da8f4",
   "metadata": {},
   "source": [
    "# Analysis Results\n",
    "\n",
    "3ML stores the results of a fit in a container we call an \"Analysis Result\" (AR). The structure of this object is designed to be useable in a *live* sense within an *active* analysis (python script, ipython interactive shell, jupyter notebook) as well as storable as a FITS file for saving results for later.\n",
    "\n",
    "The structure is nearly the same between MLE and Bayesian analyses in order to make a seamless functionality between all analyses.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0fd7b060",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:04.573628Z",
     "iopub.status.busy": "2025-01-30T22:58:04.573436Z",
     "iopub.status.idle": "2025-01-30T22:58:08.265798Z",
     "shell.execute_reply": "2025-01-30T22:58:08.265174Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")\n",
    "from threeML import *\n",
    "from threeML.analysis_results import *\n",
    "import astropy.units as u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "052925a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:08.268514Z",
     "iopub.status.busy": "2025-01-30T22:58:08.267958Z",
     "iopub.status.idle": "2025-01-30T22:58:08.311928Z",
     "shell.execute_reply": "2025-01-30T22:58:08.311381Z"
    }
   },
   "outputs": [],
   "source": [
    "silence_logs()\n",
    "from tqdm.auto import tqdm\n",
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "set_threeML_style()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4e511f0",
   "metadata": {},
   "source": [
    "Let's take a look at what we can do with an AR. First, we will simulate some data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1791994b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:08.314038Z",
     "iopub.status.busy": "2025-01-30T22:58:08.313652Z",
     "iopub.status.idle": "2025-01-30T22:58:10.310581Z",
     "shell.execute_reply": "2025-01-30T22:58:10.309824Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=2, b=0) + Gaussian(F=30.0, mu=25.0, sigma=1)\n",
    "\n",
    "# Generate a dataset using the line and a gaussian.\n",
    "# constant 20% error\n",
    "\n",
    "x = np.linspace(0, 50, 50)\n",
    "\n",
    "xy = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.2 * gen_function(x)\n",
    ")\n",
    "\n",
    "fig = xy.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3cbbe47",
   "metadata": {},
   "source": [
    "## MLE Results\n",
    "\n",
    "\n",
    "First we will demonstrate how AR's work for an MLE analysis on our synthetic data. As we will see, most of the functionality exists in the Bayesian AR's as well.\n",
    "\n",
    "Let's do a simple likelihood maximization of our data and model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "96610fff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:10.312513Z",
     "iopub.status.busy": "2025-01-30T22:58:10.312324Z",
     "iopub.status.idle": "2025-01-30T22:58:11.312059Z",
     "shell.execute_reply": "2025-01-30T22:58:11.311394Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.82 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(8 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.0 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.483 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(8.8 +/- 0.9) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.82 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (8 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.0 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.483 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (8.8 +/- 0.9) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140448558768720\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>-0.01</td><td>-0.06</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.01</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.20</td><td>0.05</td></tr>\n",
       "<tr><td>-0.01</td><td>-0.01</td><td>0.20</td><td>1.00</td><td>0.39</td></tr>\n",
       "<tr><td>-0.06</td><td>-0.00</td><td>0.05</td><td>0.39</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04 -0.01 -0.06\n",
       "-0.85  1.00 -0.00 -0.01 -0.00\n",
       "-0.04 -0.00  1.00  0.20  0.05\n",
       "-0.01 -0.01  0.20  1.00  0.39\n",
       "-0.06 -0.00  0.05  0.39  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>32.075205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>32.075205</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         32.075205\n",
       "total            32.075205"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>75.514047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>83.710526</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             75.514047\n",
       "BIC             83.710526"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fitfun = Line() + Gaussian()\n",
    "\n",
    "fitfun.b_1.bounds = (-10, 10.0)\n",
    "fitfun.a_1.bounds = (-100, 100.0)\n",
    "fitfun.F_2 = 25.0\n",
    "fitfun.F_2.bounds = (1e-3, 200.0)\n",
    "fitfun.mu_2 = 25.0\n",
    "fitfun.mu_2.bounds = (0.0, 100.0)\n",
    "fitfun.sigma_2.bounds = (1e-3, 10.0)\n",
    "\n",
    "model = Model(PointSource(\"fake\", 0.0, 0.0, fitfun))\n",
    "\n",
    "data = DataList(xy)\n",
    "\n",
    "jl = JointLikelihood(model, DataList(xy))\n",
    "_ = jl.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f67f9cfb",
   "metadata": {},
   "source": [
    "We can get our errors as always, but the results cannot be propagated (error propagation assumes Gaussian errors, i.e., symmetric errors)\n",
    "In this case though errors are pretty symmetric, so we are likely in the case\n",
    "where the MLE is actually normally distributed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "45337f5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:11.314382Z",
     "iopub.status.busy": "2025-01-30T22:58:11.313963Z",
     "iopub.status.idle": "2025-01-30T22:58:11.381628Z",
     "shell.execute_reply": "2025-01-30T22:58:11.381050Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.82 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(8 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.0 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.483 -0.013 +0.012) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(8.8 +/- 0.9) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                   1.82 +/- 0.11   \n",
       "fake.spectrum.main.composite.b_1               (8 +/- 4) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2              (3.0 +/- 0.4) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.483 -0.013 +0.012) x 10   \n",
       "fake.spectrum.main.composite.sigma_2       (8.8 +/- 0.9) x 10^-1   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.815579</td>\n",
       "      <td>-0.113242</td>\n",
       "      <td>0.113184</td>\n",
       "      <td>0.113213</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.008415</td>\n",
       "      <td>-0.003843</td>\n",
       "      <td>0.003844</td>\n",
       "      <td>0.003844</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>29.791353</td>\n",
       "      <td>-4.019448</td>\n",
       "      <td>4.012433</td>\n",
       "      <td>4.015941</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.833623</td>\n",
       "      <td>-0.129710</td>\n",
       "      <td>0.123354</td>\n",
       "      <td>0.126532</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.881271</td>\n",
       "      <td>-0.087308</td>\n",
       "      <td>0.092076</td>\n",
       "      <td>0.089692</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       1.815579       -0.113242   \n",
       "fake.spectrum.main.composite.b_1       0.008415       -0.003843   \n",
       "fake.spectrum.main.composite.F_2      29.791353       -4.019448   \n",
       "fake.spectrum.main.composite.mu_2     24.833623       -0.129710   \n",
       "fake.spectrum.main.composite.sigma_2   0.881271       -0.087308   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.113184  0.113213   \n",
       "fake.spectrum.main.composite.b_1            0.003844  0.003844   \n",
       "fake.spectrum.main.composite.F_2            4.012433  4.015941   \n",
       "fake.spectrum.main.composite.mu_2           0.123354  0.126532   \n",
       "fake.spectrum.main.composite.sigma_2        0.092076  0.089692   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jl.get_errors()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64b26159",
   "metadata": {},
   "source": [
    "We need to get the AnalysisResults object that is created after a fit is performed. The AR object is a member of the JointLikelihood object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "80587422",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:11.383577Z",
     "iopub.status.busy": "2025-01-30T22:58:11.383378Z",
     "iopub.status.idle": "2025-01-30T22:58:11.386227Z",
     "shell.execute_reply": "2025-01-30T22:58:11.385694Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = jl.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28b71638",
   "metadata": {},
   "source": [
    "We can display the results of the analysis. Note, when a fit is performed, the post display is actaully from the internal AR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "200de2bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:11.388020Z",
     "iopub.status.busy": "2025-01-30T22:58:11.387820Z",
     "iopub.status.idle": "2025-01-30T22:58:11.419192Z",
     "shell.execute_reply": "2025-01-30T22:58:11.418537Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.82 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(8 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.0 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.483 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(8.8 +/- 0.9) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.82 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (8 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.0 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.483 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (8.8 +/- 0.9) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140448541421184\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>-0.01</td><td>-0.06</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.01</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.20</td><td>0.05</td></tr>\n",
       "<tr><td>-0.01</td><td>-0.01</td><td>0.20</td><td>1.00</td><td>0.39</td></tr>\n",
       "<tr><td>-0.06</td><td>-0.00</td><td>0.05</td><td>0.39</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04 -0.01 -0.06\n",
       "-0.85  1.00 -0.00 -0.01 -0.00\n",
       "-0.04 -0.00  1.00  0.20  0.05\n",
       "-0.01 -0.01  0.20  1.00  0.39\n",
       "-0.06 -0.00  0.05  0.39  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>32.075205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>32.075205</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         32.075205\n",
       "total            32.075205"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>75.514047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>83.710526</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             75.514047\n",
       "BIC             83.710526"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2132e14b",
   "metadata": {},
   "source": [
    "By default, the equal tail intervals are displayed. We can instead display highest posterior densities (equal in the MLE case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "33cc1d1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:11.421330Z",
     "iopub.status.busy": "2025-01-30T22:58:11.421099Z",
     "iopub.status.idle": "2025-01-30T22:58:11.453896Z",
     "shell.execute_reply": "2025-01-30T22:58:11.453224Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.82 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(8 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.0 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.483 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(8.8 +/- 0.9) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.82 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (8 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.0 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.483 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (8.8 +/- 0.9) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140449218194784\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>-0.01</td><td>-0.06</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.01</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.20</td><td>0.05</td></tr>\n",
       "<tr><td>-0.01</td><td>-0.01</td><td>0.20</td><td>1.00</td><td>0.39</td></tr>\n",
       "<tr><td>-0.06</td><td>-0.00</td><td>0.05</td><td>0.39</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04 -0.01 -0.06\n",
       "-0.85  1.00 -0.00 -0.01 -0.00\n",
       "-0.04 -0.00  1.00  0.20  0.05\n",
       "-0.01 -0.01  0.20  1.00  0.39\n",
       "-0.06 -0.00  0.05  0.39  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>32.075205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>32.075205</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         32.075205\n",
       "total            32.075205"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>75.514047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>83.710526</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             75.514047\n",
       "BIC             83.710526"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af1c5e6a",
   "metadata": {},
   "source": [
    "The AR stores several properties from the analysis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9720ea9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:11.455966Z",
     "iopub.status.busy": "2025-01-30T22:58:11.455590Z",
     "iopub.status.idle": "2025-01-30T22:58:11.459671Z",
     "shell.execute_reply": "2025-01-30T22:58:11.459135Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'MLE'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.analysis_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "08a32fd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:11.461589Z",
     "iopub.status.busy": "2025-01-30T22:58:11.461242Z",
     "iopub.status.idle": "2025-01-30T22:58:11.465490Z",
     "shell.execute_reply": "2025-01-30T22:58:11.464957Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.28171334e-02, -3.69414907e-04, -1.96069454e-02,\n",
       "        -8.70725591e-05, -5.99328061e-04],\n",
       "       [-3.69414907e-04,  1.47734399e-05, -1.73928485e-06,\n",
       "        -6.02090699e-06, -1.21515423e-07],\n",
       "       [-1.96069454e-02, -1.73928485e-06,  1.61230167e+01,\n",
       "         1.00742008e-01,  1.95227960e-02],\n",
       "       [-8.70725591e-05, -6.02090699e-06,  1.00742008e-01,\n",
       "         1.57143866e-02,  4.34708073e-03],\n",
       "       [-5.99328061e-04, -1.21515423e-07,  1.95227960e-02,\n",
       "         4.34708073e-03,  7.94713139e-03]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.covariance_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b95083ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:11.467473Z",
     "iopub.status.busy": "2025-01-30T22:58:11.466998Z",
     "iopub.status.idle": "2025-01-30T22:58:16.098921Z",
     "shell.execute_reply": "2025-01-30T22:58:16.098282Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4499c6454b294fd0bd25e0ef08ddc24a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "processing MLE analyses:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flux</th>\n",
       "      <th>low bound</th>\n",
       "      <th>hi bound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake: total</th>\n",
       "      <td>2.0253020188207115e-05 erg / (s cm2)</td>\n",
       "      <td>1.89330848634884e-05 erg / (s cm2)</td>\n",
       "      <td>2.1612594793874427e-05 erg / (s cm2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             flux  \\\n",
       "fake: total  2.0253020188207115e-05 erg / (s cm2)   \n",
       "\n",
       "                                      low bound  \\\n",
       "fake: total  1.89330848634884e-05 erg / (s cm2)   \n",
       "\n",
       "                                         hi bound  \n",
       "fake: total  2.1612594793874427e-05 erg / (s cm2)  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.get_point_source_flux(1 * u.keV, 0.1 * u.MeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8c66a561",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.101075Z",
     "iopub.status.busy": "2025-01-30T22:58:16.100611Z",
     "iopub.status.idle": "2025-01-30T22:58:16.119193Z",
     "shell.execute_reply": "2025-01-30T22:58:16.118682Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (5):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.815579</td>\n",
       "      <td>-100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.008415</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>s-1 cm-2 keV-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>29.791353</td>\n",
       "      <td>0.001</td>\n",
       "      <td>200.0</td>\n",
       "      <td>s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.833623</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.881271</td>\n",
       "      <td>0.001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (2):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (0):<br><br>(none)<br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     1\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (5):\n",
       "--------------------\n",
       "\n",
       "                                          value min_value max_value  \\\n",
       "fake.spectrum.main.composite.a_1       1.815579    -100.0     100.0   \n",
       "fake.spectrum.main.composite.b_1       0.008415     -10.0      10.0   \n",
       "fake.spectrum.main.composite.F_2      29.791353     0.001     200.0   \n",
       "fake.spectrum.main.composite.mu_2     24.833623       0.0     100.0   \n",
       "fake.spectrum.main.composite.sigma_2   0.881271     0.001      10.0   \n",
       "\n",
       "                                                unit  \n",
       "fake.spectrum.main.composite.a_1      keV-1 s-1 cm-2  \n",
       "fake.spectrum.main.composite.b_1      s-1 cm-2 keV-2  \n",
       "fake.spectrum.main.composite.F_2            s-1 cm-2  \n",
       "fake.spectrum.main.composite.mu_2                keV  \n",
       "fake.spectrum.main.composite.sigma_2             keV  \n",
       "\n",
       "Fixed parameters (2):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (0):\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.optimized_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c85c3ba",
   "metadata": {},
   "source": [
    "## Saving results to disk\n",
    "\n",
    "The beauty of the analysis result is that all of this information can be written to disk and restored at a later time. The statistical parameters, best-fit model, etc. can all be recovered.\n",
    "\n",
    "AR's are stored as a structured FITS file. We write the AR like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fa6a0a07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.120996Z",
     "iopub.status.busy": "2025-01-30T22:58:16.120806Z",
     "iopub.status.idle": "2025-01-30T22:58:16.169959Z",
     "shell.execute_reply": "2025-01-30T22:58:16.169089Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "ar.write_to(\"test_mle.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd8b138b",
   "metadata": {},
   "source": [
    "The FITS file can be examines with any normal FITS reader."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "77f63fbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.172487Z",
     "iopub.status.busy": "2025-01-30T22:58:16.172022Z",
     "iopub.status.idle": "2025-01-30T22:58:16.175302Z",
     "shell.execute_reply": "2025-01-30T22:58:16.174754Z"
    }
   },
   "outputs": [],
   "source": [
    "import astropy.io.fits as fits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9a0cc5c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.177300Z",
     "iopub.status.busy": "2025-01-30T22:58:16.176898Z",
     "iopub.status.idle": "2025-01-30T22:58:16.182710Z",
     "shell.execute_reply": "2025-01-30T22:58:16.182035Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: test_mle.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       6   ()      \n",
      "  1  ANALYSIS_RESULTS    1 BinTableHDU     38   5R x 9C   [36A, D, D, D, D, 16A, 5D, D, D]   \n"
     ]
    }
   ],
   "source": [
    "ar_fits = fits.open(\"test_mle.fits\")\n",
    "ar_fits.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3487751d",
   "metadata": {},
   "source": [
    "However, to easily pull the results back into the 3ML framework, we use the ${\\tt load\\_analysis\\_results}$ function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "81bee65b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.184846Z",
     "iopub.status.busy": "2025-01-30T22:58:16.184404Z",
     "iopub.status.idle": "2025-01-30T22:58:16.251200Z",
     "shell.execute_reply": "2025-01-30T22:58:16.250496Z"
    }
   },
   "outputs": [],
   "source": [
    "ar_reloaded = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f4319d00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.253849Z",
     "iopub.status.busy": "2025-01-30T22:58:16.253433Z",
     "iopub.status.idle": "2025-01-30T22:58:16.260080Z",
     "shell.execute_reply": "2025-01-30T22:58:16.259544Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>32.075205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>32.075205</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         32.075205\n",
       "total            32.075205"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_statistic_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89a57ea2",
   "metadata": {},
   "source": [
    "You can get a DataFrame with the saved results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bc99c233",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.262057Z",
     "iopub.status.busy": "2025-01-30T22:58:16.261679Z",
     "iopub.status.idle": "2025-01-30T22:58:16.279459Z",
     "shell.execute_reply": "2025-01-30T22:58:16.278885Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.815579</td>\n",
       "      <td>-0.115485</td>\n",
       "      <td>0.110061</td>\n",
       "      <td>0.112773</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.008415</td>\n",
       "      <td>-0.003721</td>\n",
       "      <td>0.003903</td>\n",
       "      <td>0.003812</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>29.791353</td>\n",
       "      <td>-4.073397</td>\n",
       "      <td>3.913248</td>\n",
       "      <td>3.993323</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.833623</td>\n",
       "      <td>-0.124890</td>\n",
       "      <td>0.119802</td>\n",
       "      <td>0.122346</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.881271</td>\n",
       "      <td>-0.090125</td>\n",
       "      <td>0.086750</td>\n",
       "      <td>0.088437</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       1.815579       -0.115485   \n",
       "fake.spectrum.main.composite.b_1       0.008415       -0.003721   \n",
       "fake.spectrum.main.composite.F_2      29.791353       -4.073397   \n",
       "fake.spectrum.main.composite.mu_2     24.833623       -0.124890   \n",
       "fake.spectrum.main.composite.sigma_2   0.881271       -0.090125   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.110061  0.112773   \n",
       "fake.spectrum.main.composite.b_1            0.003903  0.003812   \n",
       "fake.spectrum.main.composite.F_2            3.913248  3.993323   \n",
       "fake.spectrum.main.composite.mu_2           0.119802  0.122346   \n",
       "fake.spectrum.main.composite.sigma_2        0.086750  0.088437   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_data_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2110fa66",
   "metadata": {},
   "source": [
    "## Analysis Result Sets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc5d9415",
   "metadata": {},
   "source": [
    "When doing time-resolved analysis or analysing a several objects, we can save several AR's is a set. This is achieved with the analysis result set. We can pass an array of AR's to the set and even set up descriptions for the different entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "34e72ec0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.281530Z",
     "iopub.status.busy": "2025-01-30T22:58:16.281336Z",
     "iopub.status.idle": "2025-01-30T22:58:16.354955Z",
     "shell.execute_reply": "2025-01-30T22:58:16.354298Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "from threeML.analysis_results import AnalysisResultsSet\n",
    "\n",
    "analysis_set = AnalysisResultsSet([ar, ar_reloaded])\n",
    "\n",
    "# index as time bins\n",
    "analysis_set.set_bins(\"testing\", [-1, 1], [3, 5], unit=\"s\")\n",
    "\n",
    "# write to disk\n",
    "analysis_set.write_to(\"analysis_set_test.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "012456d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.357141Z",
     "iopub.status.busy": "2025-01-30T22:58:16.356648Z",
     "iopub.status.idle": "2025-01-30T22:58:16.479354Z",
     "shell.execute_reply": "2025-01-30T22:58:16.478756Z"
    }
   },
   "outputs": [],
   "source": [
    "analysis_set = load_analysis_results(\"analysis_set_test.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4e364343",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.481797Z",
     "iopub.status.busy": "2025-01-30T22:58:16.481317Z",
     "iopub.status.idle": "2025-01-30T22:58:16.513807Z",
     "shell.execute_reply": "2025-01-30T22:58:16.513276Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.82 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(8 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.0 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.483 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(8.8 +/- 0.9) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.82 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (8 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.0 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.483 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (8.8 +/- 0.9) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140448537506000\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>-0.01</td><td>-0.06</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.01</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.20</td><td>0.05</td></tr>\n",
       "<tr><td>-0.01</td><td>-0.01</td><td>0.20</td><td>1.00</td><td>0.39</td></tr>\n",
       "<tr><td>-0.06</td><td>-0.00</td><td>0.05</td><td>0.39</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04 -0.01 -0.06\n",
       "-0.85  1.00 -0.00 -0.01 -0.00\n",
       "-0.04 -0.00  1.00  0.20  0.05\n",
       "-0.01 -0.01  0.20  1.00  0.39\n",
       "-0.06 -0.00  0.05  0.39  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>32.075205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>32.075205</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         32.075205\n",
       "total            32.075205"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>75.514047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>83.710526</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             75.514047\n",
       "BIC             83.710526"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis_set[0].display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1bc6778",
   "metadata": {},
   "source": [
    "## Error propagation\n",
    "In 3ML, we propagate errors for MLE reults via sampling of the covariance matrix *instead* of Taylor exanding around the maximum of the likelihood and computing a jacobain. Thus, we can achieve non-linear error propagation.\n",
    "\n",
    "You can use the results for propagating errors non-linearly for analytical functions:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "97ada2fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.515877Z",
     "iopub.status.busy": "2025-01-30T22:58:16.515425Z",
     "iopub.status.idle": "2025-01-30T22:58:16.522797Z",
     "shell.execute_reply": "2025-01-30T22:58:16.522262Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Propagating a+b, with a and b respectively:\n",
      "equal-tail: (8 +/- 4) x 10^-3, hpd: (8 +/- 4) x 10^-3\n",
      "equal-tail: 1.81 +/- 0.11, hpd: 1.81 -0.12 +0.11\n",
      "\n",
      "This is the result (with errors):\n",
      "equal-tail: 1.82 +/- 0.11, hpd: 1.82 -0.11 +0.10\n",
      "(1.7132715455717145, 1.9302560844224192)\n"
     ]
    }
   ],
   "source": [
    "p1 = ar.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(\"Propagating a+b, with a and b respectively:\")\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "print(\"\\nThis is the result (with errors):\")\n",
    "res = p1 + p2\n",
    "print(res)\n",
    "\n",
    "print(res.equal_tail_interval())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1480d63a",
   "metadata": {},
   "source": [
    "The propagation accounts for covariances. For example this\n",
    "has error of zero (of course) since there is perfect covariance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "84033a28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.524844Z",
     "iopub.status.busy": "2025-01-30T22:58:16.524372Z",
     "iopub.status.idle": "2025-01-30T22:58:16.528796Z",
     "shell.execute_reply": "2025-01-30T22:58:16.528292Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is 50 * a/a:\n",
      "equal-tail: (5.0 +/- 0) x 10, hpd: (5.0 +/- 0) x 10\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is 50 * a/a:\")\n",
    "print(50 * p1 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03830247",
   "metadata": {},
   "source": [
    "You can use arbitrary (np) functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f6eead5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.530752Z",
     "iopub.status.busy": "2025-01-30T22:58:16.530427Z",
     "iopub.status.idle": "2025-01-30T22:58:16.535683Z",
     "shell.execute_reply": "2025-01-30T22:58:16.535112Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is arcsinh(b + 5*) / np.log10(b) (why not?)\n",
      "equal-tail: (1.12 -0.08 +0.11) x 10, hpd: (1.12 -0.10 +0.08) x 10\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is arcsinh(b + 5*) / np.log10(b) (why not?)\")\n",
    "print(np.arcsinh(p1 + 5 * p2) / np.log10(p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e52ff1f3",
   "metadata": {},
   "source": [
    "Errors can become asymmetric. For example, the ratio of two gaussians is\n",
    "asymmetric notoriously:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ca188e3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.537669Z",
     "iopub.status.busy": "2025-01-30T22:58:16.537166Z",
     "iopub.status.idle": "2025-01-30T22:58:16.541724Z",
     "shell.execute_reply": "2025-01-30T22:58:16.541065Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Ratio a/b:\n",
      "equal-tail: (2.1 -0.7 +1.8) x 10^2, hpd: (2.1 -1.1 +0.8) x 10^2\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nRatio a/b:\")\n",
    "print(p2 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4235bb5b",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "You can always use it with arbitrary functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c306f0c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.543825Z",
     "iopub.status.busy": "2025-01-30T22:58:16.543480Z",
     "iopub.status.idle": "2025-01-30T22:58:16.548585Z",
     "shell.execute_reply": "2025-01-30T22:58:16.548027Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Propagating using a custom function:\n",
      "equal-tail: 1.83 +/- 0.11, hpd: 1.83 +/- 0.11\n"
     ]
    }
   ],
   "source": [
    "def my_function(x, a, b):\n",
    "    return b * x**a\n",
    "\n",
    "\n",
    "print(\"\\nPropagating using a custom function:\")\n",
    "print(my_function(2.3, p1, p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66caf46a",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "This is an example of an error propagation to get the plot of the model with its errors\n",
    "(which are propagated without assuming linearity on parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "49487375",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.550713Z",
     "iopub.status.busy": "2025-01-30T22:58:16.550251Z",
     "iopub.status.idle": "2025-01-30T22:58:16.557201Z",
     "shell.execute_reply": "2025-01-30T22:58:16.556678Z"
    }
   },
   "outputs": [],
   "source": [
    "def go(fitfun, ar, model):\n",
    "    fig, ax = plt.subplots()\n",
    "\n",
    "    # Gather the parameter variates\n",
    "\n",
    "    arguments = {}\n",
    "\n",
    "    for par in fitfun.parameters.values():\n",
    "        if par.free:\n",
    "            this_name = par.name\n",
    "\n",
    "            this_variate = ar.get_variates(par.path)\n",
    "\n",
    "            # Do not use more than 1000 values (would make computation too slow for nothing)\n",
    "\n",
    "            if len(this_variate) > 1000:\n",
    "                this_variate = np.random.choice(this_variate, size=1000)\n",
    "\n",
    "            arguments[this_name] = this_variate\n",
    "\n",
    "    # Prepare the error propagator function\n",
    "\n",
    "    pp = ar.propagate(\n",
    "        ar.optimized_model.fake.spectrum.main.shape.evaluate_at, **arguments\n",
    "    )\n",
    "\n",
    "    # You can just use it as:\n",
    "\n",
    "    print(pp(5.0))\n",
    "\n",
    "    # Make the plot\n",
    "\n",
    "    energies = np.linspace(0, 50, 100)\n",
    "\n",
    "    low_curve = np.zeros_like(energies)\n",
    "    middle_curve = np.zeros_like(energies)\n",
    "    hi_curve = np.zeros_like(energies)\n",
    "\n",
    "    free_parameters = model.free_parameters\n",
    "\n",
    "    p = tqdm(total=len(energies), desc=\"Propagating errors\")\n",
    "\n",
    "    with use_astromodels_memoization(False):\n",
    "        for i, e in enumerate(energies):\n",
    "            this_flux = pp(e)\n",
    "\n",
    "            low_bound, hi_bound = this_flux.equal_tail_interval()\n",
    "\n",
    "            low_curve[i], middle_curve[i], hi_curve[i] = (\n",
    "                low_bound,\n",
    "                this_flux.median,\n",
    "                hi_bound,\n",
    "            )\n",
    "\n",
    "            p.update(1)\n",
    "\n",
    "    ax.plot(energies, middle_curve, \"--\", color=\"black\")\n",
    "    ax.fill_between(energies, low_curve, hi_curve, alpha=0.5, color=\"blue\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8b3c9506",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:16.558972Z",
     "iopub.status.busy": "2025-01-30T22:58:16.558787Z",
     "iopub.status.idle": "2025-01-30T22:58:20.452376Z",
     "shell.execute_reply": "2025-01-30T22:58:20.451637Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 1.86 +/- 0.11, hpd: 1.86 +/- 0.11\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b91a374096a7427892797819c4935375",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar, model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b04c5f0",
   "metadata": {},
   "source": [
    "## Bayesian Analysis Results\n",
    "Analysis Results work exactly the same under Bayesian analysis.\n",
    "\n",
    "Let's run the analysis first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5fb5889c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:20.454630Z",
     "iopub.status.busy": "2025-01-30T22:58:20.454152Z",
     "iopub.status.idle": "2025-01-30T22:58:26.643344Z",
     "shell.execute_reply": "2025-01-30T22:58:26.642669Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e5620643e4c042ba9570cb77e3dee514",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "91536e315b154a9c8ad275d9f8b931bc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Maximum a posteriori probability (MAP) point:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mMaximum a posteriori probability \u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mMAP\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m point:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.82 +/- 0.12</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(8 -4 +5) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.92 -0.6 +0.32) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.482 -0.013 +0.017) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(8.5 -0.7 +1.4) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                   1.82 +/- 0.12   \n",
       "fake.spectrum.main.composite.b_1               (8 -4 +5) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2          (2.92 -0.6 +0.32) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.482 -0.013 +0.017) x 10   \n",
       "fake.spectrum.main.composite.sigma_2     (8.5 -0.7 +1.4) x 10^-1   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(posterior) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mposterior\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(posterior)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>-35.37946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>-35.37946</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(posterior)\n",
       "sim_data        -35.37946\n",
       "total           -35.37946"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>82.122557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>90.319035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIC</th>\n",
       "      <td>-77.416250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PDIC</th>\n",
       "      <td>-158.136298</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      statistical measures\n",
       "AIC              82.122557\n",
       "BIC              90.319035\n",
       "DIC             -77.416250\n",
       "PDIC           -158.136298"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for parameter in ar.optimized_model:\n",
    "    model[parameter.path].value = parameter.value\n",
    "\n",
    "model.fake.spectrum.main.composite.a_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.b_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.F_2.set_uninformative_prior(Log_uniform_prior)\n",
    "model.fake.spectrum.main.composite.mu_2.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.sigma_2.set_uninformative_prior(Log_uniform_prior)\n",
    "\n",
    "bs = BayesianAnalysis(model, data)\n",
    "bs.set_sampler(\"emcee\")\n",
    "bs.sampler.setup(n_iterations=1000, n_burn_in=100, n_walkers=20)\n",
    "samples = bs.sample()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50471226",
   "metadata": {},
   "source": [
    "Again, we grab the results from the BayesianAnalysis object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "165cafcc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:26.645305Z",
     "iopub.status.busy": "2025-01-30T22:58:26.645083Z",
     "iopub.status.idle": "2025-01-30T22:58:26.648019Z",
     "shell.execute_reply": "2025-01-30T22:58:26.647485Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2 = bs.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6c183a7",
   "metadata": {},
   "source": [
    "We can write and read the results to/from a file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "5a1bed58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:26.649886Z",
     "iopub.status.busy": "2025-01-30T22:58:26.649695Z",
     "iopub.status.idle": "2025-01-30T22:58:26.709851Z",
     "shell.execute_reply": "2025-01-30T22:58:26.709176Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "ar2.write_to(\"test_bayes.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "035fdd4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:26.711776Z",
     "iopub.status.busy": "2025-01-30T22:58:26.711577Z",
     "iopub.status.idle": "2025-01-30T22:58:26.762642Z",
     "shell.execute_reply": "2025-01-30T22:58:26.761975Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2_reloaded = load_analysis_results(\"test_bayes.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f04615e",
   "metadata": {},
   "source": [
    "The AR holds the posterior samples from the analysis. We can see the saved and live reults are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "07416643",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:26.764628Z",
     "iopub.status.busy": "2025-01-30T22:58:26.764435Z",
     "iopub.status.idle": "2025-01-30T22:58:26.777916Z",
     "shell.execute_reply": "2025-01-30T22:58:26.777397Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.allclose(ar2_reloaded.samples, ar2.samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce0e474b",
   "metadata": {},
   "source": [
    "**NOTE:** *MLE AR's store samples as well. These are the samples from the covariance matrix*\n",
    "\n",
    "We can examine the marginal distributions of the parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "de92d3ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:26.779779Z",
     "iopub.status.busy": "2025-01-30T22:58:26.779588Z",
     "iopub.status.idle": "2025-01-30T22:58:28.233495Z",
     "shell.execute_reply": "2025-01-30T22:58:28.232764Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1180x1180 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = ar2.corner_plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47e8e30b",
   "metadata": {},
   "source": [
    "We can return pandas DataFrames with equal tail or HPD results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "42ad1c7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:28.235994Z",
     "iopub.status.busy": "2025-01-30T22:58:28.235569Z",
     "iopub.status.idle": "2025-01-30T22:58:28.255564Z",
     "shell.execute_reply": "2025-01-30T22:58:28.254842Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.823280</td>\n",
       "      <td>-0.124740</td>\n",
       "      <td>0.115488</td>\n",
       "      <td>0.120114</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.007819</td>\n",
       "      <td>-0.003723</td>\n",
       "      <td>0.004592</td>\n",
       "      <td>0.004158</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>29.155324</td>\n",
       "      <td>-5.631279</td>\n",
       "      <td>3.185640</td>\n",
       "      <td>4.408460</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.822287</td>\n",
       "      <td>-0.125411</td>\n",
       "      <td>0.168451</td>\n",
       "      <td>0.146931</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.851993</td>\n",
       "      <td>-0.070434</td>\n",
       "      <td>0.137469</td>\n",
       "      <td>0.103952</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       1.823280       -0.124740   \n",
       "fake.spectrum.main.composite.b_1       0.007819       -0.003723   \n",
       "fake.spectrum.main.composite.F_2      29.155324       -5.631279   \n",
       "fake.spectrum.main.composite.mu_2     24.822287       -0.125411   \n",
       "fake.spectrum.main.composite.sigma_2   0.851993       -0.070434   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.115488  0.120114   \n",
       "fake.spectrum.main.composite.b_1            0.004592  0.004158   \n",
       "fake.spectrum.main.composite.F_2            3.185640  4.408460   \n",
       "fake.spectrum.main.composite.mu_2           0.168451  0.146931   \n",
       "fake.spectrum.main.composite.sigma_2        0.137469  0.103952   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"equal tail\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7688d576",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:28.257838Z",
     "iopub.status.busy": "2025-01-30T22:58:28.257471Z",
     "iopub.status.idle": "2025-01-30T22:58:28.280361Z",
     "shell.execute_reply": "2025-01-30T22:58:28.279698Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.823280</td>\n",
       "      <td>-0.129145</td>\n",
       "      <td>0.108686</td>\n",
       "      <td>0.118916</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.007819</td>\n",
       "      <td>-0.002971</td>\n",
       "      <td>0.005255</td>\n",
       "      <td>0.004113</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>29.155324</td>\n",
       "      <td>-6.262621</td>\n",
       "      <td>2.420747</td>\n",
       "      <td>4.341684</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.822287</td>\n",
       "      <td>-0.143912</td>\n",
       "      <td>0.147941</td>\n",
       "      <td>0.145927</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.851993</td>\n",
       "      <td>-0.082221</td>\n",
       "      <td>0.123279</td>\n",
       "      <td>0.102750</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       1.823280       -0.129145   \n",
       "fake.spectrum.main.composite.b_1       0.007819       -0.002971   \n",
       "fake.spectrum.main.composite.F_2      29.155324       -6.262621   \n",
       "fake.spectrum.main.composite.mu_2     24.822287       -0.143912   \n",
       "fake.spectrum.main.composite.sigma_2   0.851993       -0.082221   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.108686  0.118916   \n",
       "fake.spectrum.main.composite.b_1            0.005255  0.004113   \n",
       "fake.spectrum.main.composite.F_2            2.420747  4.341684   \n",
       "fake.spectrum.main.composite.mu_2           0.147941  0.145927   \n",
       "fake.spectrum.main.composite.sigma_2        0.123279  0.102750   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "decd3f58",
   "metadata": {},
   "source": [
    "Error propagation operates the same way. Internally, the process is the same as the MLE results, however, the samples are those of the posterior rather than the (assumed) covariance matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "9dbf7b03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:28.282151Z",
     "iopub.status.busy": "2025-01-30T22:58:28.281962Z",
     "iopub.status.idle": "2025-01-30T22:58:28.293984Z",
     "shell.execute_reply": "2025-01-30T22:58:28.293440Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: (9 +/- 4) x 10^-3, hpd: (9 -4 +5) x 10^-3\n",
      "equal-tail: 1.81 -0.11 +0.13, hpd: 1.81 +/- 0.12\n",
      "equal-tail: 1.82 -0.11 +0.12, hpd: 1.82 -0.12 +0.11\n"
     ]
    }
   ],
   "source": [
    "p1 = ar2.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar2.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "res = p1 + p2\n",
    "\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c97337a1",
   "metadata": {},
   "source": [
    "To demonstrate how the two objects (MLE and Bayes) are the same, we see that our plotting function written for the MLE result works on our Bayesian results seamlessly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f7a46424",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-30T22:58:28.295666Z",
     "iopub.status.busy": "2025-01-30T22:58:28.295476Z",
     "iopub.status.idle": "2025-01-30T22:58:32.178880Z",
     "shell.execute_reply": "2025-01-30T22:58:32.178182Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 1.86 -0.11 +0.13, hpd: 1.86 -0.13 +0.10\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "da83f34117ba4ba6b148b3dc18eddbbc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar2, model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dae84451",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.21"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "06f17dc38079437984d4c0e44aebb710": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f6ea2a9cfa02498cbbdda241db87dfa5",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b01d2f850c2a4933a8c3e83b8aa796a3",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "09d379fb75fe4048ad04f7a3b6118887": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_227946aa60b74aadaf59449902bb7b45",
       "placeholder": "​",
       "style": "IPY_MODEL_32f97609a48e4e6d99f60be71fd34090",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "0d65b9921246451c907df520417dce5f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1d74b844812d48fe8c681d835a0bbf0d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_358eb0ccede84e609840ecb0ab09fe26",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d267afe656f347ff996b6689e7265db4",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "227946aa60b74aadaf59449902bb7b45": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2dfb9be0e8df4b9d9017f68a85b9f51b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3039845f023c46198fe8c30f93a8161c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "32f97609a48e4e6d99f60be71fd34090": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "358eb0ccede84e609840ecb0ab09fe26": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3631c1be24f94a76b96ff71050a86dc5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_49ab6ad0283e423daa2694a7fa0b92f5",
       "placeholder": "​",
       "style": "IPY_MODEL_f2eaa6eb2eaa4d7ea65f0149ee82b4fe",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:03&lt;00:00, 26.97it/s]"
      }
     },
     "4499c6454b294fd0bd25e0ef08ddc24a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9ba2aaab3d4c44e480b9caa9d0ab8c87",
        "IPY_MODEL_7a68d30faf154755ba7c0331f05631c9",
        "IPY_MODEL_be7079b5f1e1458f9b9601fc2db4abd5"
       ],
       "layout": "IPY_MODEL_c15878b1fec34da4a401bbfe9f470b7e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "49ab6ad0283e423daa2694a7fa0b92f5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4c4ddb564e2d42b9ace85885ef5e407a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4da9ae71de904d0eba3f10096301d344",
       "placeholder": "​",
       "style": "IPY_MODEL_5c5bb17f415a4703bae60ac4dc0c81ae",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "4da9ae71de904d0eba3f10096301d344": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5298709c65fa40febc5c060a1f2b3bd0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3039845f023c46198fe8c30f93a8161c",
       "placeholder": "​",
       "style": "IPY_MODEL_f462651a59444a4da87f6e0dd9a8a1a2",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:00&lt;00:00, 258.28it/s]"
      }
     },
     "578f97efee9d40759d80e4346be6e4f9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0d65b9921246451c907df520417dce5f",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b36786e68e754e418136a4e2623a7469",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "5b0d562226984925b8ecfe953c2c6277": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cb21c77acab74c05af145402b57a5dfa",
       "placeholder": "​",
       "style": "IPY_MODEL_f29e6370ad724bfcba6bb6fe70681bb3",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:03&lt;00:00, 27.13it/s]"
      }
     },
     "5c5bb17f415a4703bae60ac4dc0c81ae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5e28350179ed41e9b345fefce49c1f80": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "64545af085e2410b846f388a56782e5c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6cd3d1e3c1934c278ec119a91a70ee57": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7319e8ef33504f278fd3d54f38d07159": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7a68d30faf154755ba7c0331f05631c9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2dfb9be0e8df4b9d9017f68a85b9f51b",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d4c51aa4530244719c34252fe5a2fd04",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "91536e315b154a9c8ad275d9f8b931bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_09d379fb75fe4048ad04f7a3b6118887",
        "IPY_MODEL_1d74b844812d48fe8c681d835a0bbf0d",
        "IPY_MODEL_fc4204bdc7a0403986509b669f242215"
       ],
       "layout": "IPY_MODEL_ed15151945674866b8a7226e6a695c2a",
       "tabbable": null,
       "tooltip": null
      }
     },
     "9211155786db40829d78c6a1134f3cab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "9ba2aaab3d4c44e480b9caa9d0ab8c87": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cc94d15f57b44508bc701de54b773f88",
       "placeholder": "​",
       "style": "IPY_MODEL_6cd3d1e3c1934c278ec119a91a70ee57",
       "tabbable": null,
       "tooltip": null,
       "value": "processing MLE analyses: 100%"
      }
     },
     "9c2e5fceeb03464e9892cc6e5d3c31fa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "af380a450bad4723b01766e78f0f5256": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f81c10f9c254410dae49af6cacd21bc1",
       "placeholder": "​",
       "style": "IPY_MODEL_f7f2850221b64be0b13ccdc64f48499e",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "b01d2f850c2a4933a8c3e83b8aa796a3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b36786e68e754e418136a4e2623a7469": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b5bb1f532e94449c980d1d97c0fb7ede": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b91a374096a7427892797819c4935375": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4c4ddb564e2d42b9ace85885ef5e407a",
        "IPY_MODEL_ee544d31d9d24bfb8f2961eca8a939d8",
        "IPY_MODEL_5b0d562226984925b8ecfe953c2c6277"
       ],
       "layout": "IPY_MODEL_9c2e5fceeb03464e9892cc6e5d3c31fa",
       "tabbable": null,
       "tooltip": null
      }
     },
     "be7079b5f1e1458f9b9601fc2db4abd5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b5bb1f532e94449c980d1d97c0fb7ede",
       "placeholder": "​",
       "style": "IPY_MODEL_64545af085e2410b846f388a56782e5c",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/1 [00:04&lt;00:00,  4.62s/it]"
      }
     },
     "c15878b1fec34da4a401bbfe9f470b7e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "c758d298861e4b6ebf2cb8da304a012f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c9dcb3f0e59c46848c6d4af71fe79d55": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cb21c77acab74c05af145402b57a5dfa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cc94d15f57b44508bc701de54b773f88": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d267afe656f347ff996b6689e7265db4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d475123bb9c24367881fb77f8c446aa6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d4c51aa4530244719c34252fe5a2fd04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "da83f34117ba4ba6b148b3dc18eddbbc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_fc96b5854bfa448086026a6dab3be85a",
        "IPY_MODEL_578f97efee9d40759d80e4346be6e4f9",
        "IPY_MODEL_3631c1be24f94a76b96ff71050a86dc5"
       ],
       "layout": "IPY_MODEL_d475123bb9c24367881fb77f8c446aa6",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e5620643e4c042ba9570cb77e3dee514": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_af380a450bad4723b01766e78f0f5256",
        "IPY_MODEL_06f17dc38079437984d4c0e44aebb710",
        "IPY_MODEL_5298709c65fa40febc5c060a1f2b3bd0"
       ],
       "layout": "IPY_MODEL_5e28350179ed41e9b345fefce49c1f80",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ed15151945674866b8a7226e6a695c2a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ee544d31d9d24bfb8f2961eca8a939d8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c9dcb3f0e59c46848c6d4af71fe79d55",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9211155786db40829d78c6a1134f3cab",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "f29e6370ad724bfcba6bb6fe70681bb3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f2eaa6eb2eaa4d7ea65f0149ee82b4fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f462651a59444a4da87f6e0dd9a8a1a2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f6e43ef5e9814b6a911f2fdc846b9af8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f6ea2a9cfa02498cbbdda241db87dfa5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f7f2850221b64be0b13ccdc64f48499e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f81c10f9c254410dae49af6cacd21bc1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "faa2ce141b0342449456c92582699004": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fc4204bdc7a0403986509b669f242215": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_faa2ce141b0342449456c92582699004",
       "placeholder": "​",
       "style": "IPY_MODEL_f6e43ef5e9814b6a911f2fdc846b9af8",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:04&lt;00:00, 235.75it/s]"
      }
     },
     "fc96b5854bfa448086026a6dab3be85a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c758d298861e4b6ebf2cb8da304a012f",
       "placeholder": "​",
       "style": "IPY_MODEL_7319e8ef33504f278fd3d54f38d07159",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
