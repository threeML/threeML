{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "993aedba",
   "metadata": {},
   "source": [
    "# Analysis Results\n",
    "\n",
    "3ML stores the results of a fit in a container we call an \"Analysis Result\" (AR). The structure of this object is designed to be useable in a *live* sense within an *active* analysis (python script, ipython interactive shell, jupyter notebook) as well as storable as a FITS file for saving results for later.\n",
    "\n",
    "The structure is nearly the same between MLE and Bayesian analyses in order to make a seamless functionality between all analyses.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ad1515f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:32.738773Z",
     "iopub.status.busy": "2024-05-16T04:26:32.738299Z",
     "iopub.status.idle": "2024-05-16T04:26:36.587725Z",
     "shell.execute_reply": "2024-05-16T04:26:36.587094Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")\n",
    "from threeML import *\n",
    "from threeML.analysis_results import *\n",
    "import astropy.units as u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f2be6cac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:36.590616Z",
     "iopub.status.busy": "2024-05-16T04:26:36.590102Z",
     "iopub.status.idle": "2024-05-16T04:26:36.687328Z",
     "shell.execute_reply": "2024-05-16T04:26:36.686773Z"
    }
   },
   "outputs": [],
   "source": [
    "silence_logs()\n",
    "from tqdm.auto import tqdm\n",
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "set_threeML_style()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57557f82",
   "metadata": {},
   "source": [
    "Let's take a look at what we can do with an AR. First, we will simulate some data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4c5b26c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:36.689650Z",
     "iopub.status.busy": "2024-05-16T04:26:36.689263Z",
     "iopub.status.idle": "2024-05-16T04:26:38.640265Z",
     "shell.execute_reply": "2024-05-16T04:26:38.639560Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=2, b=0) + Gaussian(F=30.0, mu=25.0, sigma=1)\n",
    "\n",
    "# Generate a dataset using the line and a gaussian.\n",
    "# constant 20% error\n",
    "\n",
    "x = np.linspace(0, 50, 50)\n",
    "\n",
    "xy = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.2 * gen_function(x)\n",
    ")\n",
    "\n",
    "fig = xy.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48f266c4",
   "metadata": {},
   "source": [
    "## MLE Results\n",
    "\n",
    "\n",
    "First we will demonstrate how AR's work for an MLE analysis on our synthetic data. As we will see, most of the functionality exists in the Bayesian AR's as well.\n",
    "\n",
    "Let's do a simple likelihood maximization of our data and model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e89d4a95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:38.642893Z",
     "iopub.status.busy": "2024-05-16T04:26:38.642512Z",
     "iopub.status.idle": "2024-05-16T04:26:39.450365Z",
     "shell.execute_reply": "2024-05-16T04:26:39.449822Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.17 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-6 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.2 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.510 +/- 0.018) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.21 +/- 0.15</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.17 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-6 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.2 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.510 +/- 0.018) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.21 +/- 0.15               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140423844345696\">\n",
       "<tr><td>1.00</td><td>-0.84</td><td>-0.05</td><td>0.07</td><td>-0.11</td></tr>\n",
       "<tr><td>-0.84</td><td>1.00</td><td>-0.00</td><td>-0.03</td><td>0.01</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>1.00</td><td>-0.01</td><td>-0.25</td></tr>\n",
       "<tr><td>0.07</td><td>-0.03</td><td>-0.01</td><td>1.00</td><td>-0.39</td></tr>\n",
       "<tr><td>-0.11</td><td>0.01</td><td>-0.25</td><td>-0.39</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.84 -0.05  0.07 -0.11\n",
       "-0.84  1.00 -0.00 -0.03  0.01\n",
       "-0.05 -0.00  1.00 -0.01 -0.25\n",
       " 0.07 -0.03 -0.01  1.00 -0.39\n",
       "-0.11  0.01 -0.25 -0.39  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>23.827528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>23.827528</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         23.827528\n",
       "total            23.827528"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>59.018693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>67.215172</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             59.018693\n",
       "BIC             67.215172"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fitfun = Line() + Gaussian()\n",
    "\n",
    "fitfun.b_1.bounds = (-10, 10.0)\n",
    "fitfun.a_1.bounds = (-100, 100.0)\n",
    "fitfun.F_2 = 25.0\n",
    "fitfun.F_2.bounds = (1e-3, 200.0)\n",
    "fitfun.mu_2 = 25.0\n",
    "fitfun.mu_2.bounds = (0.0, 100.0)\n",
    "fitfun.sigma_2.bounds = (1e-3, 10.0)\n",
    "\n",
    "model = Model(PointSource(\"fake\", 0.0, 0.0, fitfun))\n",
    "\n",
    "data = DataList(xy)\n",
    "\n",
    "jl = JointLikelihood(model, DataList(xy))\n",
    "_ = jl.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c420837",
   "metadata": {},
   "source": [
    "We can get our errors as always, but the results cannot be propagated (error propagation assumes Gaussian errors, i.e., symmetric errors)\n",
    "In this case though errors are pretty symmetric, so we are likely in the case\n",
    "where the MLE is actually normally distributed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "039ae65f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:39.452577Z",
     "iopub.status.busy": "2024-05-16T04:26:39.452382Z",
     "iopub.status.idle": "2024-05-16T04:26:39.524470Z",
     "shell.execute_reply": "2024-05-16T04:26:39.523856Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.17 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-6 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.2 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.510 -0.018 +0.019) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.21 -0.14 +0.17</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                   2.17 +/- 0.11   \n",
       "fake.spectrum.main.composite.b_1              (-6 +/- 4) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2              (2.2 +/- 0.4) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.510 -0.018 +0.019) x 10   \n",
       "fake.spectrum.main.composite.sigma_2            1.21 -0.14 +0.17   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.165474</td>\n",
       "      <td>-0.114013</td>\n",
       "      <td>0.113916</td>\n",
       "      <td>0.113964</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.006115</td>\n",
       "      <td>-0.003840</td>\n",
       "      <td>0.003850</td>\n",
       "      <td>0.003845</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>22.030273</td>\n",
       "      <td>-3.868754</td>\n",
       "      <td>3.859917</td>\n",
       "      <td>3.864335</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.098677</td>\n",
       "      <td>-0.182645</td>\n",
       "      <td>0.192059</td>\n",
       "      <td>0.187352</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.205845</td>\n",
       "      <td>-0.143211</td>\n",
       "      <td>0.174455</td>\n",
       "      <td>0.158833</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.165474       -0.114013   \n",
       "fake.spectrum.main.composite.b_1      -0.006115       -0.003840   \n",
       "fake.spectrum.main.composite.F_2      22.030273       -3.868754   \n",
       "fake.spectrum.main.composite.mu_2     25.098677       -0.182645   \n",
       "fake.spectrum.main.composite.sigma_2   1.205845       -0.143211   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.113916  0.113964   \n",
       "fake.spectrum.main.composite.b_1            0.003850  0.003845   \n",
       "fake.spectrum.main.composite.F_2            3.859917  3.864335   \n",
       "fake.spectrum.main.composite.mu_2           0.192059  0.187352   \n",
       "fake.spectrum.main.composite.sigma_2        0.174455  0.158833   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jl.get_errors()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab8e1a58",
   "metadata": {},
   "source": [
    "We need to get the AnalysisResults object that is created after a fit is performed. The AR object is a member of the JointLikelihood object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "13279344",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:39.526766Z",
     "iopub.status.busy": "2024-05-16T04:26:39.526391Z",
     "iopub.status.idle": "2024-05-16T04:26:39.529256Z",
     "shell.execute_reply": "2024-05-16T04:26:39.528737Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = jl.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e05762a9",
   "metadata": {},
   "source": [
    "We can display the results of the analysis. Note, when a fit is performed, the post display is actaully from the internal AR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cac5e9c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:39.531554Z",
     "iopub.status.busy": "2024-05-16T04:26:39.531189Z",
     "iopub.status.idle": "2024-05-16T04:26:39.562598Z",
     "shell.execute_reply": "2024-05-16T04:26:39.561959Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.17 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-6 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.2 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.510 +/- 0.018) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.21 +/- 0.15</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.17 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-6 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.2 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.510 +/- 0.018) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.21 +/- 0.15               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140423837330928\">\n",
       "<tr><td>1.00</td><td>-0.84</td><td>-0.05</td><td>0.07</td><td>-0.11</td></tr>\n",
       "<tr><td>-0.84</td><td>1.00</td><td>-0.00</td><td>-0.03</td><td>0.01</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>1.00</td><td>-0.01</td><td>-0.25</td></tr>\n",
       "<tr><td>0.07</td><td>-0.03</td><td>-0.01</td><td>1.00</td><td>-0.39</td></tr>\n",
       "<tr><td>-0.11</td><td>0.01</td><td>-0.25</td><td>-0.39</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.84 -0.05  0.07 -0.11\n",
       "-0.84  1.00 -0.00 -0.03  0.01\n",
       "-0.05 -0.00  1.00 -0.01 -0.25\n",
       " 0.07 -0.03 -0.01  1.00 -0.39\n",
       "-0.11  0.01 -0.25 -0.39  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>23.827528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>23.827528</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         23.827528\n",
       "total            23.827528"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>59.018693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>67.215172</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             59.018693\n",
       "BIC             67.215172"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7eb091a0",
   "metadata": {},
   "source": [
    "By default, the equal tail intervals are displayed. We can instead display highest posterior densities (equal in the MLE case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "24837fd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:39.564894Z",
     "iopub.status.busy": "2024-05-16T04:26:39.564537Z",
     "iopub.status.idle": "2024-05-16T04:26:39.594103Z",
     "shell.execute_reply": "2024-05-16T04:26:39.593570Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.17 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-6 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.2 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.510 +/- 0.018) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.21 +/- 0.15</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.17 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-6 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.2 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.510 +/- 0.018) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.21 +/- 0.15               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140425036615152\">\n",
       "<tr><td>1.00</td><td>-0.84</td><td>-0.05</td><td>0.07</td><td>-0.11</td></tr>\n",
       "<tr><td>-0.84</td><td>1.00</td><td>-0.00</td><td>-0.03</td><td>0.01</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>1.00</td><td>-0.01</td><td>-0.25</td></tr>\n",
       "<tr><td>0.07</td><td>-0.03</td><td>-0.01</td><td>1.00</td><td>-0.39</td></tr>\n",
       "<tr><td>-0.11</td><td>0.01</td><td>-0.25</td><td>-0.39</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.84 -0.05  0.07 -0.11\n",
       "-0.84  1.00 -0.00 -0.03  0.01\n",
       "-0.05 -0.00  1.00 -0.01 -0.25\n",
       " 0.07 -0.03 -0.01  1.00 -0.39\n",
       "-0.11  0.01 -0.25 -0.39  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>23.827528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>23.827528</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         23.827528\n",
       "total            23.827528"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>59.018693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>67.215172</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             59.018693\n",
       "BIC             67.215172"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5754a1eb",
   "metadata": {},
   "source": [
    "The AR stores several properties from the analysis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "86b5704c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:39.596275Z",
     "iopub.status.busy": "2024-05-16T04:26:39.595904Z",
     "iopub.status.idle": "2024-05-16T04:26:39.599759Z",
     "shell.execute_reply": "2024-05-16T04:26:39.599128Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'MLE'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.analysis_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b9e46241",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:39.601845Z",
     "iopub.status.busy": "2024-05-16T04:26:39.601653Z",
     "iopub.status.idle": "2024-05-16T04:26:39.605870Z",
     "shell.execute_reply": "2024-05-16T04:26:39.605269Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.29870403e-02, -3.69954654e-04, -2.02681942e-02,\n",
       "         1.38410896e-03, -1.97492016e-03],\n",
       "       [-3.69954654e-04,  1.47860609e-05, -2.28082380e-05,\n",
       "        -2.24166407e-05,  5.53597749e-06],\n",
       "       [-2.02681942e-02, -2.28082380e-05,  1.49349788e+01,\n",
       "        -9.81653089e-03, -1.48983183e-01],\n",
       "       [ 1.38410896e-03, -2.24166407e-05, -9.81653089e-03,\n",
       "         3.33683588e-02, -1.10289733e-02],\n",
       "       [-1.97492016e-03,  5.53597749e-06, -1.48983183e-01,\n",
       "        -1.10289733e-02,  2.35860828e-02]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.covariance_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "91e5c735",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:39.607896Z",
     "iopub.status.busy": "2024-05-16T04:26:39.607708Z",
     "iopub.status.idle": "2024-05-16T04:26:44.156693Z",
     "shell.execute_reply": "2024-05-16T04:26:44.156027Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ff6e9baa54654c0186b7b183d868f191",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "processing MLE analyses:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flux</th>\n",
       "      <th>low bound</th>\n",
       "      <th>hi bound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake: total</th>\n",
       "      <td>1.4968865842581609e-05 erg / (s cm2)</td>\n",
       "      <td>1.3607661810885183e-05 erg / (s cm2)</td>\n",
       "      <td>1.6326165070300384e-05 erg / (s cm2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             flux  \\\n",
       "fake: total  1.4968865842581609e-05 erg / (s cm2)   \n",
       "\n",
       "                                        low bound  \\\n",
       "fake: total  1.3607661810885183e-05 erg / (s cm2)   \n",
       "\n",
       "                                         hi bound  \n",
       "fake: total  1.6326165070300384e-05 erg / (s cm2)  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.get_point_source_flux(1 * u.keV, 0.1 * u.MeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b7b8a0de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.158945Z",
     "iopub.status.busy": "2024-05-16T04:26:44.158746Z",
     "iopub.status.idle": "2024-05-16T04:26:44.176875Z",
     "shell.execute_reply": "2024-05-16T04:26:44.176342Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (5):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.165474</td>\n",
       "      <td>-100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.006115</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>s-1 cm-2 keV-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>22.030273</td>\n",
       "      <td>0.001</td>\n",
       "      <td>200.0</td>\n",
       "      <td>s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.098677</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.205845</td>\n",
       "      <td>0.001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (2):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (0):<br><br>(none)<br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     1\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (5):\n",
       "--------------------\n",
       "\n",
       "                                          value min_value max_value  \\\n",
       "fake.spectrum.main.composite.a_1       2.165474    -100.0     100.0   \n",
       "fake.spectrum.main.composite.b_1      -0.006115     -10.0      10.0   \n",
       "fake.spectrum.main.composite.F_2      22.030273     0.001     200.0   \n",
       "fake.spectrum.main.composite.mu_2     25.098677       0.0     100.0   \n",
       "fake.spectrum.main.composite.sigma_2   1.205845     0.001      10.0   \n",
       "\n",
       "                                                unit  \n",
       "fake.spectrum.main.composite.a_1      keV-1 s-1 cm-2  \n",
       "fake.spectrum.main.composite.b_1      s-1 cm-2 keV-2  \n",
       "fake.spectrum.main.composite.F_2            s-1 cm-2  \n",
       "fake.spectrum.main.composite.mu_2                keV  \n",
       "fake.spectrum.main.composite.sigma_2             keV  \n",
       "\n",
       "Fixed parameters (2):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (0):\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.optimized_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19064aad",
   "metadata": {},
   "source": [
    "## Saving results to disk\n",
    "\n",
    "The beauty of the analysis result is that all of this information can be written to disk and restored at a later time. The statistical parameters, best-fit model, etc. can all be recovered.\n",
    "\n",
    "AR's are stored as a structured FITS file. We write the AR like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7d09bf97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.179366Z",
     "iopub.status.busy": "2024-05-16T04:26:44.178827Z",
     "iopub.status.idle": "2024-05-16T04:26:44.219450Z",
     "shell.execute_reply": "2024-05-16T04:26:44.218894Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "ar.write_to(\"test_mle.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e2f7abf",
   "metadata": {},
   "source": [
    "The FITS file can be examines with any normal FITS reader."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3f835c2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.221670Z",
     "iopub.status.busy": "2024-05-16T04:26:44.221335Z",
     "iopub.status.idle": "2024-05-16T04:26:44.224180Z",
     "shell.execute_reply": "2024-05-16T04:26:44.223618Z"
    }
   },
   "outputs": [],
   "source": [
    "import astropy.io.fits as fits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "af5a8103",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.226429Z",
     "iopub.status.busy": "2024-05-16T04:26:44.225961Z",
     "iopub.status.idle": "2024-05-16T04:26:44.231057Z",
     "shell.execute_reply": "2024-05-16T04:26:44.230539Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: test_mle.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       6   ()      \n",
      "  1  ANALYSIS_RESULTS    1 BinTableHDU     38   5R x 9C   [36A, D, D, D, D, 16A, 5D, D, D]   \n"
     ]
    }
   ],
   "source": [
    "ar_fits = fits.open(\"test_mle.fits\")\n",
    "ar_fits.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75f9b9ba",
   "metadata": {},
   "source": [
    "However, to easily pull the results back into the 3ML framework, we use the ${\\tt load\\_analysis\\_results}$ function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "56fb674a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.233423Z",
     "iopub.status.busy": "2024-05-16T04:26:44.233012Z",
     "iopub.status.idle": "2024-05-16T04:26:44.293347Z",
     "shell.execute_reply": "2024-05-16T04:26:44.292738Z"
    }
   },
   "outputs": [],
   "source": [
    "ar_reloaded = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "098d790a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.295803Z",
     "iopub.status.busy": "2024-05-16T04:26:44.295446Z",
     "iopub.status.idle": "2024-05-16T04:26:44.301329Z",
     "shell.execute_reply": "2024-05-16T04:26:44.300740Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>23.827528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>23.827528</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         23.827528\n",
       "total            23.827528"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_statistic_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e9ecc37",
   "metadata": {},
   "source": [
    "You can get a DataFrame with the saved results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2d6930b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.303630Z",
     "iopub.status.busy": "2024-05-16T04:26:44.303288Z",
     "iopub.status.idle": "2024-05-16T04:26:44.320489Z",
     "shell.execute_reply": "2024-05-16T04:26:44.319842Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.165474</td>\n",
       "      <td>-0.116251</td>\n",
       "      <td>0.114242</td>\n",
       "      <td>0.115247</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.006115</td>\n",
       "      <td>-0.004028</td>\n",
       "      <td>0.003845</td>\n",
       "      <td>0.003937</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>22.030273</td>\n",
       "      <td>-3.776218</td>\n",
       "      <td>3.833907</td>\n",
       "      <td>3.805062</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.098677</td>\n",
       "      <td>-0.177563</td>\n",
       "      <td>0.184327</td>\n",
       "      <td>0.180945</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.205845</td>\n",
       "      <td>-0.149905</td>\n",
       "      <td>0.152210</td>\n",
       "      <td>0.151058</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.165474       -0.116251   \n",
       "fake.spectrum.main.composite.b_1      -0.006115       -0.004028   \n",
       "fake.spectrum.main.composite.F_2      22.030273       -3.776218   \n",
       "fake.spectrum.main.composite.mu_2     25.098677       -0.177563   \n",
       "fake.spectrum.main.composite.sigma_2   1.205845       -0.149905   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.114242  0.115247   \n",
       "fake.spectrum.main.composite.b_1            0.003845  0.003937   \n",
       "fake.spectrum.main.composite.F_2            3.833907  3.805062   \n",
       "fake.spectrum.main.composite.mu_2           0.184327  0.180945   \n",
       "fake.spectrum.main.composite.sigma_2        0.152210  0.151058   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_data_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74a83e41",
   "metadata": {},
   "source": [
    "## Analysis Result Sets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b4f0fd2",
   "metadata": {},
   "source": [
    "When doing time-resolved analysis or analysing a several objects, we can save several AR's is a set. This is achieved with the analysis result set. We can pass an array of AR's to the set and even set up descriptions for the different entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6477bf7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.322663Z",
     "iopub.status.busy": "2024-05-16T04:26:44.322331Z",
     "iopub.status.idle": "2024-05-16T04:26:44.392866Z",
     "shell.execute_reply": "2024-05-16T04:26:44.392241Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "from threeML.analysis_results import AnalysisResultsSet\n",
    "\n",
    "analysis_set = AnalysisResultsSet([ar, ar_reloaded])\n",
    "\n",
    "# index as time bins\n",
    "analysis_set.set_bins(\"testing\", [-1, 1], [3, 5], unit=\"s\")\n",
    "\n",
    "# write to disk\n",
    "analysis_set.write_to(\"analysis_set_test.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8245c5b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.395251Z",
     "iopub.status.busy": "2024-05-16T04:26:44.394818Z",
     "iopub.status.idle": "2024-05-16T04:26:44.511863Z",
     "shell.execute_reply": "2024-05-16T04:26:44.511356Z"
    }
   },
   "outputs": [],
   "source": [
    "analysis_set = load_analysis_results(\"analysis_set_test.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "824e6bf4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.513864Z",
     "iopub.status.busy": "2024-05-16T04:26:44.513679Z",
     "iopub.status.idle": "2024-05-16T04:26:44.545829Z",
     "shell.execute_reply": "2024-05-16T04:26:44.545216Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.17 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-6 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.2 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.510 +/- 0.018) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.21 +/- 0.15</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.17 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-6 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.2 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.510 +/- 0.018) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.21 +/- 0.15               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140423855632336\">\n",
       "<tr><td>1.00</td><td>-0.84</td><td>-0.05</td><td>0.07</td><td>-0.11</td></tr>\n",
       "<tr><td>-0.84</td><td>1.00</td><td>-0.00</td><td>-0.03</td><td>0.01</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>1.00</td><td>-0.01</td><td>-0.25</td></tr>\n",
       "<tr><td>0.07</td><td>-0.03</td><td>-0.01</td><td>1.00</td><td>-0.39</td></tr>\n",
       "<tr><td>-0.11</td><td>0.01</td><td>-0.25</td><td>-0.39</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.84 -0.05  0.07 -0.11\n",
       "-0.84  1.00 -0.00 -0.03  0.01\n",
       "-0.05 -0.00  1.00 -0.01 -0.25\n",
       " 0.07 -0.03 -0.01  1.00 -0.39\n",
       "-0.11  0.01 -0.25 -0.39  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>23.827528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>23.827528</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         23.827528\n",
       "total            23.827528"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>59.018693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>67.215172</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             59.018693\n",
       "BIC             67.215172"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis_set[0].display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c62e1819",
   "metadata": {},
   "source": [
    "## Error propagation\n",
    "In 3ML, we propagate errors for MLE reults via sampling of the covariance matrix *instead* of Taylor exanding around the maximum of the likelihood and computing a jacobain. Thus, we can achieve non-linear error propagation.\n",
    "\n",
    "You can use the results for propagating errors non-linearly for analytical functions:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "cf1ad944",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.547923Z",
     "iopub.status.busy": "2024-05-16T04:26:44.547736Z",
     "iopub.status.idle": "2024-05-16T04:26:44.555121Z",
     "shell.execute_reply": "2024-05-16T04:26:44.554606Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Propagating a+b, with a and b respectively:\n",
      "equal-tail: (-6 +/- 4) x 10^-3, hpd: (-6 +/- 4) x 10^-3\n",
      "equal-tail: 2.16 +/- 0.11, hpd: 2.16 -0.11 +0.12\n",
      "\n",
      "This is the result (with errors):\n",
      "equal-tail: 2.16 +/- 0.11, hpd: 2.16 -0.10 +0.11\n",
      "(2.048358901748794, 2.2689325563031812)\n"
     ]
    }
   ],
   "source": [
    "p1 = ar.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(\"Propagating a+b, with a and b respectively:\")\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "print(\"\\nThis is the result (with errors):\")\n",
    "res = p1 + p2\n",
    "print(res)\n",
    "\n",
    "print(res.equal_tail_interval())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e880189",
   "metadata": {},
   "source": [
    "The propagation accounts for covariances. For example this\n",
    "has error of zero (of course) since there is perfect covariance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "08026b2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.557432Z",
     "iopub.status.busy": "2024-05-16T04:26:44.556972Z",
     "iopub.status.idle": "2024-05-16T04:26:44.561408Z",
     "shell.execute_reply": "2024-05-16T04:26:44.560890Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is 50 * a/a:\n",
      "equal-tail: (5.0 +/- 0) x 10, hpd: (5.0 +/- 0) x 10\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is 50 * a/a:\")\n",
    "print(50 * p1 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce9802d7",
   "metadata": {},
   "source": [
    "You can use arbitrary (np) functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d16f1617",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.563760Z",
     "iopub.status.busy": "2024-05-16T04:26:44.563313Z",
     "iopub.status.idle": "2024-05-16T04:26:44.568360Z",
     "shell.execute_reply": "2024-05-16T04:26:44.567762Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is arcsinh(b + 5*) / np.log10(b) (why not?)\n",
      "equal-tail: 9.2 -0.4 +0.5, hpd: 9.2 -0.5 +0.4\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is arcsinh(b + 5*) / np.log10(b) (why not?)\")\n",
    "print(np.arcsinh(p1 + 5 * p2) / np.log10(p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc2311b9",
   "metadata": {},
   "source": [
    "Errors can become asymmetric. For example, the ratio of two gaussians is\n",
    "asymmetric notoriously:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "808f2365",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.570711Z",
     "iopub.status.busy": "2024-05-16T04:26:44.570370Z",
     "iopub.status.idle": "2024-05-16T04:26:44.574549Z",
     "shell.execute_reply": "2024-05-16T04:26:44.573904Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Ratio a/b:\n",
      "equal-tail: (-3.2 -3.5 +1.2) x 10^2, hpd: (-3.2 -1.9 +1.7) x 10^2\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nRatio a/b:\")\n",
    "print(p2 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f62c0608",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "You can always use it with arbitrary functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "13ebd5c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.576737Z",
     "iopub.status.busy": "2024-05-16T04:26:44.576394Z",
     "iopub.status.idle": "2024-05-16T04:26:44.581352Z",
     "shell.execute_reply": "2024-05-16T04:26:44.580842Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Propagating using a custom function:\n",
      "equal-tail: 2.15 +/- 0.11, hpd: 2.15 -0.10 +0.11\n"
     ]
    }
   ],
   "source": [
    "def my_function(x, a, b):\n",
    "    return b * x**a\n",
    "\n",
    "\n",
    "print(\"\\nPropagating using a custom function:\")\n",
    "print(my_function(2.3, p1, p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9740961a",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "This is an example of an error propagation to get the plot of the model with its errors\n",
    "(which are propagated without assuming linearity on parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "24ba28e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.583498Z",
     "iopub.status.busy": "2024-05-16T04:26:44.583308Z",
     "iopub.status.idle": "2024-05-16T04:26:44.589914Z",
     "shell.execute_reply": "2024-05-16T04:26:44.589391Z"
    }
   },
   "outputs": [],
   "source": [
    "def go(fitfun, ar, model):\n",
    "    fig, ax = plt.subplots()\n",
    "\n",
    "    # Gather the parameter variates\n",
    "\n",
    "    arguments = {}\n",
    "\n",
    "    for par in fitfun.parameters.values():\n",
    "        if par.free:\n",
    "            this_name = par.name\n",
    "\n",
    "            this_variate = ar.get_variates(par.path)\n",
    "\n",
    "            # Do not use more than 1000 values (would make computation too slow for nothing)\n",
    "\n",
    "            if len(this_variate) > 1000:\n",
    "                this_variate = np.random.choice(this_variate, size=1000)\n",
    "\n",
    "            arguments[this_name] = this_variate\n",
    "\n",
    "    # Prepare the error propagator function\n",
    "\n",
    "    pp = ar.propagate(\n",
    "        ar.optimized_model.fake.spectrum.main.shape.evaluate_at, **arguments\n",
    "    )\n",
    "\n",
    "    # You can just use it as:\n",
    "\n",
    "    print(pp(5.0))\n",
    "\n",
    "    # Make the plot\n",
    "\n",
    "    energies = np.linspace(0, 50, 100)\n",
    "\n",
    "    low_curve = np.zeros_like(energies)\n",
    "    middle_curve = np.zeros_like(energies)\n",
    "    hi_curve = np.zeros_like(energies)\n",
    "\n",
    "    free_parameters = model.free_parameters\n",
    "\n",
    "    p = tqdm(total=len(energies), desc=\"Propagating errors\")\n",
    "\n",
    "    with use_astromodels_memoization(False):\n",
    "        for i, e in enumerate(energies):\n",
    "            this_flux = pp(e)\n",
    "\n",
    "            low_bound, hi_bound = this_flux.equal_tail_interval()\n",
    "\n",
    "            low_curve[i], middle_curve[i], hi_curve[i] = (\n",
    "                low_bound,\n",
    "                this_flux.median,\n",
    "                hi_bound,\n",
    "            )\n",
    "\n",
    "            p.update(1)\n",
    "\n",
    "    ax.plot(energies, middle_curve, \"--\", color=\"black\")\n",
    "    ax.fill_between(energies, low_curve, hi_curve, alpha=0.5, color=\"blue\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c5af0d36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:44.591854Z",
     "iopub.status.busy": "2024-05-16T04:26:44.591666Z",
     "iopub.status.idle": "2024-05-16T04:26:48.451027Z",
     "shell.execute_reply": "2024-05-16T04:26:48.450345Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 2.14 -0.12 +0.11, hpd: 2.14 +/- 0.11\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cc315fecff294ff3aa3a42e86db276ec",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar, model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12f329fd",
   "metadata": {},
   "source": [
    "## Bayesian Analysis Results\n",
    "Analysis Results work exactly the same under Bayesian analysis.\n",
    "\n",
    "Let's run the analysis first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "29bc358b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:48.453603Z",
     "iopub.status.busy": "2024-05-16T04:26:48.453226Z",
     "iopub.status.idle": "2024-05-16T04:26:54.274545Z",
     "shell.execute_reply": "2024-05-16T04:26:54.273870Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "09fa449c7b9b4605b5857300b0c2703c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "48f5e98881814ead8b6abb828eb87691",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Maximum a posteriori probability (MAP) point:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mMaximum a posteriori probability \u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mMAP\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m point:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.14 -0.08 +0.14</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-5.5 -4 +3.1) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.17 -0.7 +0.15) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.513 -0.026 +0.024) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.20 -0.18 +0.23</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                2.14 -0.08 +0.14   \n",
       "fake.spectrum.main.composite.b_1          (-5.5 -4 +3.1) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2          (2.17 -0.7 +0.15) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.513 -0.026 +0.024) x 10   \n",
       "fake.spectrum.main.composite.sigma_2            1.20 -0.18 +0.23   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(posterior) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mposterior\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(posterior)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>-27.131096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>-27.131096</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(posterior)\n",
       "sim_data       -27.131096\n",
       "total          -27.131096"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>65.625827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>73.822306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIC</th>\n",
       "      <td>64.868625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PDIC</th>\n",
       "      <td>5.099386</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      statistical measures\n",
       "AIC              65.625827\n",
       "BIC              73.822306\n",
       "DIC              64.868625\n",
       "PDIC              5.099386"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for parameter in ar.optimized_model:\n",
    "    model[parameter.path].value = parameter.value\n",
    "\n",
    "model.fake.spectrum.main.composite.a_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.b_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.F_2.set_uninformative_prior(Log_uniform_prior)\n",
    "model.fake.spectrum.main.composite.mu_2.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.sigma_2.set_uninformative_prior(Log_uniform_prior)\n",
    "\n",
    "bs = BayesianAnalysis(model, data)\n",
    "bs.set_sampler(\"emcee\")\n",
    "bs.sampler.setup(n_iterations=1000, n_burn_in=100, n_walkers=20)\n",
    "samples = bs.sample()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecc7e309",
   "metadata": {},
   "source": [
    "Again, we grab the results from the BayesianAnalysis object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "34971d59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:54.276846Z",
     "iopub.status.busy": "2024-05-16T04:26:54.276482Z",
     "iopub.status.idle": "2024-05-16T04:26:54.279524Z",
     "shell.execute_reply": "2024-05-16T04:26:54.278904Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2 = bs.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70a9071e",
   "metadata": {},
   "source": [
    "We can write and read the results to/from a file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4f73f6b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:54.281710Z",
     "iopub.status.busy": "2024-05-16T04:26:54.281409Z",
     "iopub.status.idle": "2024-05-16T04:26:54.341309Z",
     "shell.execute_reply": "2024-05-16T04:26:54.340681Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "ar2.write_to(\"test_bayes.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "1f7ffcd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:54.343653Z",
     "iopub.status.busy": "2024-05-16T04:26:54.343281Z",
     "iopub.status.idle": "2024-05-16T04:26:54.395510Z",
     "shell.execute_reply": "2024-05-16T04:26:54.395015Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2_reloaded = load_analysis_results(\"test_bayes.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95f98bea",
   "metadata": {},
   "source": [
    "The AR holds the posterior samples from the analysis. We can see the saved and live reults are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a940de0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:54.397863Z",
     "iopub.status.busy": "2024-05-16T04:26:54.397526Z",
     "iopub.status.idle": "2024-05-16T04:26:54.415831Z",
     "shell.execute_reply": "2024-05-16T04:26:54.415347Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.allclose(ar2_reloaded.samples, ar2.samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b18a56c2",
   "metadata": {},
   "source": [
    "**NOTE:** *MLE AR's store samples as well. These are the samples from the covariance matrix*\n",
    "\n",
    "We can examine the marginal distributions of the parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "500dcc91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:54.417833Z",
     "iopub.status.busy": "2024-05-16T04:26:54.417535Z",
     "iopub.status.idle": "2024-05-16T04:26:55.797150Z",
     "shell.execute_reply": "2024-05-16T04:26:55.796501Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABHMAAASOCAYAAABG2WCwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3yV9d3/8fd1nX2yQ0JCIAQIENACah2l7j2q/Fq1jg6tddFtb++qHa7WtrbaVml718FdUWur1NFae9cquC3uvUBWCBBCyCLjrGv8/jgQQDNO1klO8no+HnmYc67x/V4Joc2bz/fzNVzXdQUAAAAAAICMYA73BAAAAAAAAJA6whwAAAAAAIAMQpgDAAAAAACQQQhzAAAAAAAAMghhDgAAAAAAQAYhzAEAAAAAAMgghDkAAAAAAAAZhDAHAAAAAAAggxDmAAAAAAAAZBDCHAAAAAAAgAxCmAMMk8bGRl100UXaZ599dPzxx2vFihXdnvvnP/9Zn/vc57T33nvrt7/9bcrHAAAAAACjD2EOMISuuOIKPfjgg10eu/baa1VUVKQVK1bosssu0yWXXKLm5uYuzx0/fry++c1v6rjjjuvTMQAAAADA6EOYAwyD9vZ2LV++XN/+9rcVCoV09NFHa+bMmVq+fHmX5x9zzDE6+uijlZOT06djAAAAAIDRxzvcE8Do1t7erv/93//Vm2++qbffflstLS36+c9/rlNPPTXtc3nrrbf0t7/9TS+++KI2bdqk/Px8zZs3T5dccommTp06ZNd2pbq6WuFwWKWlpZ3vzZw5U6tXr+7zvQAAAAAAYwthDoZUU1OTfv/736usrExVVVV66aWXhm0uixcv1muvvaYTTjhBVVVVqq+v1z333KNTTz1V9913n2bOnDkk13alo6ND2dnZe7yXnZ2tpqamfj0bAAAAAGDsIMzBkBo/fryee+45FRcX6+2339bpp58+bHP5yle+ohtvvFF+v7/zvZNOOkmnnHKKbrvtNt14442Dcu3FF1+sV199VZIUjUb1r3/9Sz/72c8kSRdddJEuuugihcNhtbW17TFGW1ubsrKyBuVZAQAAAACjF2EOurRp0ybdfvvtWrFihWpraxUKhXTQQQfpsssu06RJk1K+j9/vV3Fx8RDONHX77bffx96bMmWKZsyYobVr1w7atbfeemvn51dccYUOPPDAjy0rq6ioUEdHh+rq6lRSUiJJWrVqlT772c+m+jgAAAAAgDGKMAddevvtt/X666/rM5/5jEpLS7Vp0yb95S9/0TnnnKN//vOfCoVCaZlHIpFQa2trSufm5+fLNPvW09t1XW3btk0zZszo89wGcm1WVpaOOuooLVq0SFdeeaVWrFihVatW6eijj+7yfMuyZNu2HMeRZVmKxWLyer3yeDw9HgMAAAAAjD6EOejSEUccoRNOOGGP94488kideeaZ+ve//522CpLXXntN55xzTkrnLl++vE9VQ5L08MMPq66uTt/+9rf7PLeBXCtJ11xzjS6//HIddNBBKi0t1W9+8xvl5+dLki644ALtv//+WrhwoSTpD3/4g373u991XnvLLbd0NpLu6RgAAAAAYPQxXNd1h3sSGNkSiYTa2trkuq6OP/54fe5zn9MPfvCDPt9nZ8+cvgQNLS0tevfdd1M695Of/KQCgUDK81mzZo3OOOMMzZgxQ/fcc0+fKlkGci0AAAAAAANBZQ66FI1Gdeutt+rBBx9UXV2dds/8Ul32NBjy8vL06U9/etDvW19fr4svvlg5OTm6+eab+xTGDORaAAAAAAAGijAHXfrJT36iBx98UOeee6722Wcf5eTkyDAMffe731U6i7ni8bhaWlpSOrewsDClYKW1tVUXXnihWltbdc8993Q2IE7FQK4FAAAAAGAwEOagSzv74lxxxRWd78VisbRW5UjS66+/Pqg9c2KxmBYuXKj169frjjvu0PTp01Oey0Cu7UpjY6OuuOIKvfTSSyopKdE111yj+fPnd3nun//8Z/31r3/VqlWrtHDhQn3rW99K6RgAAAAAYPQhzEGXuqpwufvuu2XbdlrnMWvWLN1xxx0pndvbFui2beuSSy7RG2+8of/5n//Rvvvu2+25kUhEmzdvVkFBgQoLC/t0baquvfZaFRUVacWKFfrPf/6jSy65RP/+9787myDvbvz48frmN7+pRx55pE/HAAAAAACjD2EOunTEEUfo73//u7KzszV9+nS98cYb+s9//tNl0NCbP/3pT9q+fbu2bt0qSXryySe1ZcsWSdKXv/xl5eTkdHvtYPbMuf766/XEE0/oyCOPVHNzs/7+97/vcfz//b//1/n5W2+9pXPOOUff/OY39a1vfatP16aivb1dy5cv17JlyxQKhXT00Udr5syZWr58uU477bSP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8PAwlmXx05/+lHvuuYedO3dSXl7OM888w7333svhw4e54oorClaZU1tbS21tbUH2JTau9RTorGZoVKz2RyEKRVa7EieCO++8k9NOO43R0dF5t3vzm98MwK9//evVOC0hhBBCzGJDhTmVlZW8+tWv5p577uEDH/gATU1N7N+/n/e+971ceOGF1NfX09HRwY9+9CP+z//5P2zevHnO304JUSzrYWnv1W7nkhYrIcRS/dM//RN//dd/Pet9l112GZ/+9KcX3McTTzzBPffcwwMPPEBnZyeVlZWcfvrpXHHFFav+fWlsbIxvfvObPP744zz55JMMDQ1xzTXXzPlzylNPPcWXv/xlHn30UbTWnHnmmfzlX/4lJ5100rKOPzAwwO23385dd93F5z//+ZU8FSGEEEKsgnUf5ky2SU3+/bGPfYyqqiqef/55RkZG2L59O+eee26uaqalpYULL7yQX/7ylzz88MOcf/75RKPRNX4W4kSzkkBnMUFLsfd/IvI8b95h5u3t7bS2tq7iGQkhAD71qU/R0tIy7XO7d+9e1GNvvfVWHnnkEd761reyZ88eenp6+N73vseFF17InXfeuej9FMLAwABf+9rXaG5uZs+ePTz44INzbvv000/zvve9j6amJj7xiU8QBAHf//73+aM/+iN++MMfsn379iUf/8tf/jIf/OAHKS8vX8nTEEIIIcQqWbdhzuHDh6moqMgNwlRK4fs+pmly8cUXA9Dd3c03vvENamtrMQwD13WxbZvNmzdTW1vL6Ogopmmu5dMQJ7DlBC5LCVqKvf8TTVtb27yBTWtr64JzVVbLZz/7WYaGhqioqCj6nJmNeiyxfpx99tkLzniZyyWXXML//t//m0gkkvvc29/+dn7v936Pm2++mf/9v/93oU5zQfX19dx///3U1dXx5JNP8gd/8AdzbnvdddcRi8W44447qKqqAsLZfW95y1v48pe/zPXXX5/b9vLLL+fhhx8GwtmCP/3pT3OVNx/5yEf4yEc+wv79+3nqqae46qqrivgMhRBCCFFI6zLM+cUvfsENN9zAu971Li688EJSqRQApmnOGGi8f/9+/r//7//jXe96F8lkkiAIePrpp+nv7+eMM85Yo2cgRGgpgctygpZi7/9E09raui7mprzwwgv09PRQV1cnxxJiHi972ctmfG7r1q3s2rWLl156aVXPJRKJLPq1/V//9V+8/vWvzwU5EIZBr3zlK7nvvvsYGxsjmUwC8I1vfCO3zVwDkB988EEOHjzI2WefDcDIyAimadLe3s4111yz0qcmhBBCiCJYd2HOk08+yXXXXcfw8DA/+tGPiEQivOMd78gFOlODnIaGBpqbm7nzzjtxXZfzzz+fp556in/9138lCALe9a53yTKyYs0tJnBZSdBS7P0LIUKydPnaGB0dpb+/f9rnqqurl70/rTW9vb3s2rVrwW1d12VkZGRR+62srMQwjGWf11SO4xCLxWZ8PhaL4bouL7zwwpJ+YXXRRRdx/vnn527//d//PS0tLXzkIx+ZdXvP8/B9nyAI8DyPbDaLZVlS7SyEEEKsonX1U+Xg4CB33XUXSik+97nP8bOf/YxvfvObANMCHQiX1zQMg7/5m7/hL//yL7ntttu47bbbiMVi1NfX8+Uvf1nmW4iSMV/gUoigpdj7F+JEJ0uXr51LLrlkxueee+65Ze/vxz/+Md3d3XzqU59acNtHHnmED3zgA4va77/927/NmO2zXNu2beOxxx7LtZdDGPA88cQTQNhmvhTxeJx4PJ67HYvFSCQSufk5H/7whznrrLP46Ec/CsBNN93EDTfckNv+61//+rzDmoUQQghReOsqzInH4xw6dIhXvepVnHPOOfzu7/4uf/VXfzVroGMYBkEQUF5ezk033cTdd99NOp1m06ZNnHbaaVKmL0rObIFLIYOWYu9fiBOZLF2+dj73uc8VbOWpAwcO8Ld/+7eceeaZvOtd71pw+7179/Ltb397Ufsu5M8d73vf+/ibv/kb/sf/+B98+MMfJggCbrrpJnp6eoBwNs5sFjtr6vjtbr311mm3P/nJT/LJT35yGWcuhBBCiEJZN2FOEAREo1FuvvnmXJm6ZVlce+21fPazn50R6Ez+tmry7/e85z1refpCLMrUwKUYQUux9y+EEKvttNNOW/YA5Kl6enq4/PLLSaVSXHfddYtqGaqoqOB3fud3VnzspXrve99LV1cX3/zmN/k//+f/AHDqqady6aWX8vWvfz03L0cIIYQQG9e6CXMmK22mlgEHQUAkEpkR6Lz97W/PrXI1PDxMMpnMrVRx/IBkIUpNsUOWUghxSuEcjidLj4tik5k6pWtkZITLLruMkZERvve979HQ0LCoxzmOw9DQ0KK2ra6uLuhMmT/7sz/jT/7kT3jhhRdIpVLs2bOHL33pS0A4xFkIIYQQG1tJ/9TY0dFBNptlbGyMXbt25YKcyWobwzDQWs8IdAzD4Pzzz+eFF17gu9/9Lu985zt5/etfDyBBjhBiVutp6XGx/ixmps5CgaGEPcWRzWb56Ec/yqFDh/j2t7/Nzp07F/3YRx99dE1m5kyqqKjgrLPOyt3+j//4DxobG9m+ffuy9/noo4/y3ve+l0996lN8/OMfn3O7W265he9+97sMDw+zZcsWvvvd71JWVrbs4wohhBBiaUr2p8J7772XW2+9lYGBARzHYefOnbzuda/jkksumdY+pZTKBTqf//znufLKK7nlllvo6Ohg//79vPjii9LXLcQJYKHKmoVMXkjL3BNRDAvN1NmyZcuClWEgA5QLzfd9rrjiCh577DFuvPFGzjzzzCU9fq1m5szmJz/5CU8++SSf+cxnlr1qVhAEXHPNNQu2rX3ve9/jN7/5DT/4wQ9oamriueeey1VACyGEEGJ1lGSY8+CDD/KFL3yB888/n3379pFKpbj99tu54447eOyxx/jCF75ANBrNrVillMLzPGKxGNdccw2f/OQn+fGPf0wymeRb3/rWmpcbZ7NZgBVdaApRSoKku6LHz7bSzJYtW2ZdanfS5PvooYceoqOjY8b9k6u3LLY9Yq5jrGQVnFLhum7u72I/n416rFLj+z4PPPAAhw4dmnOblpaWBd9HYrprr72WX/7yl7zxjW9kcHCQf/7nf552/+///u/P+/hCz8yZrHQ5duwYAPfddx9dXV0A/PEf/3FukYeHHnqIr33ta7z2ta+lsrKSxx9/nH/6p3/i9a9//aIrhWZz5513ctpppzE6OjrnNr7vc9NNN/H973+f5uZmIAy1hBBCCLG6SjLMeeihh2hubuY973lPriT5lFNO4e677+YHP/gBH//4x/nKV75CKpXC8zwsy8qVnu/fvx/XdUmlUtxwww1rHuQAuR/Err766jU+EyEK5IyVPfyyyy6b8blbbrmFPXv2zPmYyffRzTffvLKDn0AGBwdn/VrLsTauhd5HYrpnn30WCEOT++67b8b9C4U5hfatb32Lzs7O3O17772Xe++9F4ALLrggF+Y0NDRgmibf/OY3GRsbo6WlhSuuuIJLLrlk2a14AwMD3H777dx11118/vOfn3O7rq4uMpkMP/vZz7jttttIpVJceuml/OEf/uGyjiuEEEKI5Sm5MCcIAg4dOkQsFssFOa7rUlZWxkUXXURlZSU333wzn/70p7npppuwLCtXodPW1pZrsbrxxhtLIsgBeOUrX8mVV15JU1MTR48e5eqrr+bKK69c1/M32tra5HmUmPX+XBY656nvo6WW86+3r42cb/Gsp3OFpZ/venhOhXLhhRdy4YUXrmgf3/nOdwp0NoXxy1/+clHbbd68ObfoQ6F8+ctf5oMf/CDl5eXzbtfd3c3IyAiHDh3il7/8JYcOHeKSSy5h+/bt0+b3CCGEEKK4Si7MMQyDffv28f3vf5/9+/dz8sknY9s2QRAQi8V461vfSjab5Zvf/CbXXnst//2///dcb3hjYyM7duzgz//8z1c0/K/QKisrOe+88wByF6FbtmzZEL89ledRejbSc5lq6vtoudbb10bOt3jW07nC+jtfUTre+9738sgjj8x630c/+lH+7M/+jP379/PUU09x1VVXLbi/yTa+P/3TPyUWi7F3717OP/98fv3rX0uYI4QQQqyikgtzAHbv3k0QBPzsZz+jsbGR6urq3NLk0WiU888/n+eff54HH3yQxx57jDPOOAPP84hGo1xxxRWyYpUQQghxAvN9n/7+/nm3SSQSJJPJVTqjtfODH/xgwW0efPBBDh48yNlnnw2ES7Wbpkl7ezvXXHPNtG23bt2KbdvTftaSn7uEEEKI1VeSYc6rX/1qLrjgAu6++242b97M29/+dhKJBIZh4Ps+yWSSSy+9lPvvv5/HH3+cM844I9cjLj9QCCGEECe2o0ePcs4558y7zSc+8QlZ7XLCRRddxPnnn5+7/fd///e0tLTwkY98ZMa2iUSCt7zlLXz961/nyiuvpL29nZ/85Cd89atfXc1TFkIIIU54JRfmTM6/ufzyyzl27Bi33HILtm3zpje9iVQqlQtr6urqqK2t5ciRI2t8xkIIIYQoJXV1dQsuGd7a2rpKZ1P64vE48Xg8dzsWi5FIJHLzcz784Q9z1lln8dGPfhSAq666iv/xP/4Hr3rVq6iqquK//bf/Ji1WQgghxCoruTBncv6Nbdt84hOfwPd9rr/+evr6+jj33HNzP3wdPHgQx3Fyy2IKIYQQQgBEo9GCLhl+orn22mun3b711lun3S4vL+f6669fzVMSQgghxHFKLsyZqr6+ns985jPcdNNN3H777fz2t7/lLW95C9lslocffph0Os2b3/zmtT5NIYQQQgghhBBCiFWz6mHO4OAg2WyWRCKBbdvEYjG01nPOuikvL+czn/kMe/bs4b777uOGG26gsrKSxsZGvvKVr7Bp06ZVfgYrU1NTwyWXXEJNTc1an8qKyPMoPRvpuRTaevvayPkWz3o6V1h/5yuEEEIIIVaH0lrr1TrYv/3bv/GP//iPdHV1YVkWe/fu5X3vex8vf/nL53zM1KAnm80yODhINBrFtu11swpFJpOhra2NLVu25Jb0FEIsjbyPhFg5eR8JIYQQQmwMqxbm3H///Vx11VW84Q1v4PTTT+fIkSP8x3/8B21tbXzkIx/h937v93KD9ubi+z6maa7G6RbUc889x2WXXcYtt9zCnj171vp0NoRzzYtwTu5DVzkAJA6cjApmf21ow2d8x34A1ECEyP7i/4b75/6dRT/GiWYjvo/Osy8u6v7vde9Y0eNnOz/npD6Cyiww//tuqvHNz6OjWfAUsYeaCnZ+Yuk24vtordx5552MjY2RTCa56KKLNsTxVvs5CSGEEGL5it5mpbUmCAL+9V//lX379vGxj32M2tpaAN70pjfxz//8z9xyyy0MDAzw/ve/n6qqqmmP7+7uZmRkhJ07d67LIEcIIYQQG89dd91FT08PdXV1qxJ8rMbxVvs5CSGEEGL5jGIfQCmFYRh0dHRQXl5ObW0tnucBsHv3bi677DLe//7386Mf/Yi77747dx/A6Ogo11xzDZdeeilPPPFEsU9ViEUJki5B0l3r0xBCCCGEEEIIcYJalQHISinq6+vp7OwMD2pZuZapyspKLr74YrLZLN/97nfZtm0b55xzDgBlZWXs2bOHF198kerq6tU4VbFOacOft82qUPzqDN7eAQDsp6sxhqIF27cQ681877vcNmgwglU6IyGEEEIIIU4MRa/MCYLwh/hzzjmHtrY2vv3tbwNgmia+H15kp1IpLrzwQs466yyuv/76XOgD8LGPfYzvf//7tLS0FPtUxTpjpPNZpFN7dNZtNHrafVMfs1TaCPC2D4ECFHibRpe1n3PNizjXlPJ1UXwrmckz12PVce87zfxj1/zkMNoOK9lUZtUXUBRCCCGEEGJDKnqYYxjhIV72spdx8skn89Of/pSf//znwPRAp7m5mfPOO4+hoSHa29sBcvctNBhZnJjMjjJww5XO/NQwXtngjG38siH81HB4wzXCxyyT3zIK0XyFga5yCOJLa7eaGuJIoCNWYwDwcgKd+R5jdZSBG35f91PDZFpewo+Nz7ptGKZ2TX+sEEIIIYQQYsWKHuZAOAS5traWK664gkwmw7e//W3uu+8+IAx0stlwZZTzzjsP0zR5/vnnc/cJMRflmlgvVeRuZ+uOoM38zCVtemTrj+RuWwfKUe7yXlNB3MPfNDbj837T7Bexs5ktvJFAR5RaoLPQtsozsae874L4OJnWA2QaDxPY2WnbehV96Ei44pwajmAMyFLYQgghhBBCFMKqhDlKKXzfZ/v27Xzxi19kYGCAm2++mbvvvhuAaDScO/LYY48Rj8dpbGxc0fG01kyuuD7Z5iU2JqM3htE7cYFo+WTrwhY9jQ4/Nv3cdmZffFnH0Gi8bUO5d4s1WA1BeCOoT6PNhV9j84U2EuiI5QQ6euK/xVpMoLPY0Mfsj2M/U41K58NRPzVEessLZGuPoA0Pbfg4Ncdy99uHylGoRZ+vEEIIIYQQYm6rVpkzWWWzZ88evvrVr2LbNrfeeitXXnklDz/8MP/3//5f7rjjDmzb5rTTTlvR8ZRSKBVeNEy2eU2GO2JjUSisl8pntFsd315lvbT8Vr2gJoOumqgucG0ivU1Yw5XhnabGb5i/OmcxYY0EOmIpgU6QcMm+7BjZlx0jSDqLftx8Yc1S27HMwRiRx+vD6jhn4n8lSuNV9TG+9TkyTW35MLUnjjEWWdL+hRBCCCGEEHMr+jRKrXUuWPnBD35Aa2srr3vd67j22mu55557+NWvfsWf//mfk0wmqaur44tf/OKKKnOefPJJHnroIZ5++mm2bt3Keeedx86dO6VlawObbLfy9gwCYbvV1AKAlbRXaSPA2zacux3paUJpA3uoBq+yHwC/cRzzSHLWqoOlhDTnmhfxc//OZZ2n2Bjude9YMFTRto+ztx+iYVDinNxHZH/NosOS8+yLZwRHyx2UrLTC6k5i9sTxNo3iN42BqcEMCBITbYkB2IdTy9q/EKXsG9/4BkEQ5H5ptBGOt9rPSQghhBDLV9QwZ2qQ853vfIdbb72Vyy67jFe84hU0Nzdz2WWXcckll/D0009TU1NDdXU1lZWVyz7evffeyw033EAqFV44PPnkkzzwwAP86Z/+Ka95zWumnU+h9fb20tfXN+t9bW1tRTmmyDN6Yxg1MYLaDFj+tM8vt70Kpg89NsfKMMfCCh/DiWGMlxEkRiHuE1RlMY+bB7KcapsTPdCR99H8gY42gmlBDgCWXlGgs5IVryapwMBuL8fqSuK1juDXj+cCVfNoGcqRVazExlNbW7vhjrfaz0kIIYQQy1e0n7CnBie333473/rWt/jQhz7E29/+9tyMHNu2sW2bV7ziFSs+3oMPPshXv/pVzj33XC644AKam5t5/vnn+bu/+zt++MMf8prXvKZoQQ7Aj3/8Y2677bai7V/Mb7LdyqnNTPu8MRhFo5c1q0NbQX7osVZEepqn7ccerCGbCJcnD+rT08KclbRNnciBjryPQnMFOl7zKLpsYplv10Z5NkF8HCyNu3uAyKP1i36tFyLEOZ5yTeyXKjG7kmGVTiArWAkhhBBCCFEMRQlzZgtyPvjBD/LOd75zRZU3cxkaGuKee+5hz549vPOd72TLli0A7Nu3j/e85z3ccMMNPPbYY5xxxhkFP/akCy64gNe+9rWz3tfW1sbVV19dtGMfb7FBwnIDg0LNdyl0YDFbK5W3cwjVOIbZnsLojy491JnYXPkmyp1e9WBk8+HNYoYgL8WJGuiU0vtorc0a6Ex5+ZrpMozxJE48nNmkS2i2sDFuYxyoXNE+ihE2LcdqrDYmhBBCCCHEUhU8zJkryLnwwguLEuQADA8P8+///u98+MMfzgU5k0455RSUUnO2bhRKbW1tSZQnF3tGSyEH9RY6sAji7qyf12Ue3kkDqFFrSaGO8gyMgShBdRZtefjJEayx/CDlIJYffGyMTg96fu7fueKv1YkY6JTK+6hUWV1J/MYxsDReagCSQ7n77LaNs1pUqQQ5MPuMISEgrCRMp9PE43EuuOCCDXG81X5OQgghhFi+gk64W4sgB6C1tZW/+Zu/4W1vexswfTny2tpaUqkUR48eBcDzvBnnvFEsd0ZLMfe/mvv0m/LhSqSnieiRLRiZKdUzE6GOe3ovQWVmtl3MYHQlch975f3TjxefEuYM2zMeW4ggRla5ElMp18TqnGhbUsBERZjRt7LZUKWklIKcSaV4TmLt3X777Xzta1/j9ttv3zDHW+3nJIQQQojlK2iYMxnk3Hrrrdx2221FDXJGRkbo7u7ODUV94xvfmDvO1FUYysrKiEajjI6Gs00sKyxGGhoawnGcos7RWU0rndGylG30xH+FUojAQpsBQX06vBEYWMNVWGPlxNp3zhrquKcM4NekF9yvMRCFbPh68pMjBFZ+GeggNjlPB9TI7INnJdARhWYeLUNlprQUugb2SxVrd0IFVMqhSSmfmxBCCCGEOPEUfO3J559/nrvuuouLL764aEHOb37zGz73uc9x6aWX8md/9mdcddVVQBjUTK3KgbDyxjAMstls7nOHDh3ixhtv5I477tgQlTmFuNifbx9T7wuSLs7Le3BecQxv02jBZsWs9Dn4DePhksiANVyJCsKLXYWaM9TxdgyjbX/W/U1SKMzuxOQNvPIBALTyCaJhdY8at1D+3G8lCXREISmtsA5WgAY02C9VoLyZ86LWm6lhiVYat3UYd+sQflUGbRR2JtVySaAjhBBCCCFKRcHDnG3btnH99ddz0UUXFSXIuffee7n66quJRCK85z3v4YwzzuD+++/nK1/5CjC9KgcgGo0Sj8fJZMIL7wMHDnDTTTfxi1/8grPPPnvdV+Ys9SI/KHNwTu/BOb13xoyZ2fZ1fJDjntoHMR8iAf7WEZyXFy7UWW5godH4jfmWJ3uwZsY2U0Mdc2Ri7o0d4G0fXnD/ZneCyUIkr3wAjSaIpfPDkeeoyplKAh1RSOZgjMiTtUSerMXsX//tVTOCnL39+C2j+E1juHv7yb6iC+ekXrymUYK4W9DKwJWcqxBrwfM8Dhw4MOef49vJhRBCCLExFXwAsm3b7Nmzp9C7BeCBBx7g+uuv521vext/+Id/SHNzM5lMhhdffJHOzs5p2/q+j2maWJZFLBZjdHSUjo4Ovv71r/Pkk0/y9a9/na1btxblPFfLUi/u/fpxvB1DuQjPPbUf+6lqjHR+3svUobuzBjnWcRdRtsbfOoK/aRSzswzzSBK1gmV1ljP0N6jKQjyssDHHyjDc2JzbKhTRnk2Mx8fA8glqM/iD4xjd8TmHxyrHzA9Ctt2w3SqSn7kz27yc2chQZFFIxtjCIeJy6YhPkHTA0OCaKMdEOQYqKHj+P2uQE1Rmp29kQFDpEFROtDlmTMzBKGps/veekbYwRqKFPmUZiizWlO/PXVHa3t4OwI4dO1brdIQQQgixRoqyNHkxjIyM8JOf/ITt27fzrne9i+bmZoIgwDAMGhsb8TyPJ598Eq01J598cm42zuQPPb29vdx888088cQTfO1rX2Pnzp1r+XRWbDkVOd6uiZVvfAOMACIB3q4hIk9MXz3o+H1rNO7egVyQY4wnifQ24Vb24qcGwwqViVAnqMpi769a0UXfUgOLYEpVjjU0syrneMq3iPY0k20Kf+j1dg7B1mGM4QhqMIoxFEEFiiDlEJS56JSLTuarmLzUIKh8JdJiKnMmSaAjSo02g/B1Xha+3oMyByJzVNr5CuUY4Jgo10RlTVTawsiEf+MZS1pR6/gqF3fHYD7ICQwivY0EkQx+cgRtT6kkjPnTqvHmYz9XVZTqJQl0xFoxTVPCGiGEEEKsnzAnHo9zxhlnkEwmc8uPG4bBT3/6Ux544AEaGhq4/fbb2b9/P3V1dfzVX/0Vp5xyCqZpUl5ezoMPPkgqleKGG2444YKcgjDyFTmR3ibMbByzu5Wgvx6n+lgu1NEVDu7JA8sOdDSaoCbDm+ovwOiLLXhhqNEEqYnf1nsW5lhqUccxRyswR4bxUxMBl6UJqrNQnWX+KTqgtIGeUn2kUw5kpr+V1rIl6s2xPwiHMi8wR0UCofkttp1muRf0a9muE8Rd/MYxggoHHV9CS4ap0XEf4v7sjU6eQqUtVMYKq2KGI4uujPFrxwnq8kPMY51bMTNJAHSPRttZ/OQIXnI0HD5uLK7Vyt0+FAa1G2CukBBCCCGEEJPWTZhjWRbnn38+kUi+CuI//uM/+NKXvsQf/MEfcN5557F161buv/9+br/9dq655hq+8Y1vkEwmOe2003j00Ue54YYbTrjWqknGaATrhYqwzWpyvo1jYL2w8Co4CoV5JIm/dQQAr7IXs7s13K8bJdbdij9YQ2bTQTCDfKDzXCXKXfwFlLYC3N2D6KrwN/NGTwzrhcr527bsAOzwos7MLhz+TH1O0a5WvLEUfnIEPz4G1twXtSobxcwkMDIJrJFKgmgav3wQAH/TGEbP3G1aq+lNDRfgnTUIgHWgAvNYYs5tpcJnbksJWpZToXGefXFu7stqvW40mqDcwW8eDVsT5+IbGNkEZiaO8k205RGYLtrywj+mm/8ecjxLh5VsKZfJLczuBNah8nnD3SDq4W4byt2OHtuUC3Ig/BopN4YxGMMerEMrHz8+hp7nPeuXDeEnR8EOcLcPEXm+eu7nvAxSlSOEEEIIIdbSuglzgFyQo7VGKUUmk+Ev/uIvOOecc0gmwx/8X/va1zI6OsqXvvQlfvKTn/Ce97yHP/qjP+KCCy6gomJ9L9+70moP81gCNW7h7QiH/lrPV0yblzPvY7sS+JtGwdZ4qUHs/noMN/8bdzObINa5ncyml3KBjnNmD9ZLFRi9C4csQZkTtnJF8xeJQV0G1+7HfrZqztWidCJ/MaecuWflzEahsEeqsEeqwsXWI1n8xGgY7KAxMgnMbBwjk8itjjXJyCQw0gmC+Dg66RFUZTEHFj5+EPfwN4ehmHWwHOUUrlrgTQ0X4O0ezA1m9nYNoU2NdTQ552Mk0JlpORUzSwl0zrMvJkg6OHv6wQ5QYzbGaARj1EaNRlAZs6ABz2S1m9c8ii6bPvScQGE4sfD1nIljZhIoN7JwRZzyw5DHdtB2liCSDT+OZKe3QxGuNBekHOznqjAyM7/faDTuznwbpzlciTVSOe/xlTaxxsvn3cYaK2d8y/Ng+gQ1GfyaNGZfYdqtJMgRQgghhBBrbV2FOZMmV6B605vehOd5ufk4nucRi8U4++yz+dKXvoTrurntT/QgZ5IxGiHyeO3CGx5H+QZmZ1lYnaPArT5GdKI6Z5KZjYeBTvNBsPww+NkziFETw3qpfNYqHY3GbxrH3zqcX1vNM8OZPoZGVzq4+/qw91fPGnwEU8Icw1n+oFOFQjkxDCeGPbjw10ehsAfqyMbbAPBbRucNczQav3ksDHImnoZTkQ0vcIdWPqD1+CBnkr99GKwAs71szgt0CXTyVtL6tJhAJxfknJwfJq5TLn7Kzbf3eSoMdsYiYZvSUHRZQ8W1EeDXj+M3jaFj05sHlWtjD9ZiDVWh9NIDRaXDmTlhoDu9tVGrAG07+PFRnNqu8H2c8HBO68V+qQKzd3q1mN8yii53c+cV7Wle8vnMeo6+RfRYfjaWu20onIe1wnYrCXLEpJaWFpLJJFVVVat2PNu2KS+fP8hc6TFW8zkJIYQQYvnWZZgz1WSQEwRB7uP//M//JBaL5WbrrHelsiT18dU51mANZnb6hZmZjZM4vJtsXSd+KqwACmozOBXZGVU62gzwdg4R1E5ZGSqdIHp0M9p2yTQdAstHJycuBPdXY4xP/83+1MHERnZplTkrZY6lUNkoOppFl7sEKQdjlmHIQdzD2zmYu2DNsTXuKf2Yh8swO+YOWxZyfJBjDVWjPAu35hgA/ubRMNA5WC6BzjwKMcNmvkBntiAH35jZsmTpcNWmSgd/E+AYmL1xzJ7EjNf/8bTSBJVZ/Jo0QVVmxupzRiZsUzJHKorW3qW0kQtGzfEyMk2H0dEsmBp31yBBuZNruwrKHLyWkYmTh2hX64wquJUIZ2MNhd+LCtBuJUGOmOq6665b9eMdOHCg6McQQgghxPpQ+HVm18DkqlYAL7zwAvfeey8tLS2cdNJJa3xmK1cqQQ7kq3PCG5DZdBA/mp5lO4to12aiR1vBn7gwm6jS8fYMom2fIOHint47Lcix+2uJdWzH8G3MTIJ4xw6UMxGORAPcfX0EFdNnfegCVeYsx2R1ziS/ZXTa/RqN1zyKe3pPPsjRYA3UYI6mJneCv2UU76QB9FxzSOYxW5ATOdZMpL+BSE9T/tyax8O2q9nH1gKl9VpbbYUcRjzbvmYLcox0gsTBvSQOnES0cyt2bwPmaArlHZexRwL85jGc03vI7uvBaxxDW/nXilYavyqDs3OA7Fld4dLedelpQY45VkasYxux9p1YI5WrNqfHcGPE23diDeV/y+83jOPs6w1bK3cN5F67dn/9tDk5haBQRHs25b4PTbZbLYcEOUIIIYQQopSs+8ocIBfk3Hvvvfz0pz/lueee44YbbqC6urADL1dbKV5cm0eSBFVZdIUDZkBm00vEOrdjZqfPolAorNFKzHTZrFU6GDrXboRvEO1uxRqbXjpuuFHiHTvINB8iiIUXp+7J/VgvVmD2JNBWkAtzlGsvq11kpayRCtyabrTtElRnCRIuxrhNEPPwdk2vxlFOhGh3C2YmGc4JqerBrekGBUF1Fuf03rDtamxxc4zmCnImL9TtwVrwTZyGjvAY9Wk8M8B6rmrOtp0TsUKnGKtKTa3QmSvIiXVuDV+zGqzxFIyHAZ9Gh/NoYuN4ZYP4ZSOgJlqyyly8siG8LUPgGRAosIIZFTgA+AbWaAX2YA2GU/iluRdLaYPosRaMdBKnvjPfdrWvN7eNkU5g99cX5/gFaLeSIEcIIYQQQpSaDRHmeJ7HV7/6VR544AHKysr42te+xrZt29b6tFakFIMcAKUV9v4q3JMHcoFOtqmN+KE9s/62f7JKxx8dIlt/BEw/t/oUhG0f0aNbMLyZ7UmTj491bCfbeDi8qDXA2z2Et3NoWl3ZardY5c4PA3uwFqfuKADejiHsZ6tw9/VBZKJ6QoM1WEOkrxGljYnHKSID9RjZONnG9vDrEvdx9/VhPVe54DDlNyfejfeywTmDnEn2SLhEfLaxHQxNUJPFbx3FOjz3Eu4nUqBTzOXBJ/etjQBnb//sQc4sFArl2RijFVijFWjDw0sN4pUPhqEmhK/9yCyVXL6BNVYetheNl+Veb6XAHqnCzMTzbVeTfCNsrypitdDx7VZeyyj2ocXNUZMgR6wmz/Noa2ub8/729nZaW1vnvF8IIYQQJ44NEeZYlsV73vMe9u7dyyte8Qrq6uoWftAa+Pgr/npa1cV6vWBWgYH9TBXOK7vBAG36828/R5WONVRNpKdpwQtOpQ2iR7fg1B3Bq+wPP3ncQ8zxsmU/n5Wyhqpwq3rCZZvLXZwze3KB1dRqnFkfO57COLyTbNPh8ELd1HgnDcBL5Zhdc7ecaEvnvgbGeHLWICd3jLEK9LEAp7EjfKy9cDvXiRToFJvfOJYLXhYKcmajAgt7qBZ7qJYgksEtH8Cr6p22jTVcWZIBzvEm266cuiN4FQPhnJxjm+YMcwslbLdqZnyyQjDpLPqxCwV+EvacuP72b/+WoaEhKioq+NznPleQfba1tc0Z2HzjG99gZGSExsZGrrrqqoIc73jFeE5CCCGEKI4NEeYAtLa20tLSklvpaj1Y7gVzkHJAhytTFYJWGh3z0ImJP3EP5RqYbSlUMMeS4HEvFyaY44sb3jtZpRMMjoePW8J8DIUi0tOMkUmEbU2mh5GNh8spp8swx+auNCk2pU2iR7bmlmXPVR5piB3ZOm0J99kYXiSsPmrowE8NgQJvx3C4rHjn7CGVyk4PAxb8+hv5AMcYW9zb/kQIdO517yhqdY42ArzmiVlKGqLdLStqBzScGJG+hmlhjjlSMWNluVI22XZlDdYAYK5SC5jy7fzA6UUEmou1lGXpxcby+OOP09PTU/BfILW2trJjx44Znz9w4AA9PT0cO3asoMebqljPSQghhBCFt2HCHGBdBTmTlnrB7DeO4e2YqGw5MH/1xlyClENQmc0FN1ODmWnbJT3s/VWzBjpBVb5NYilBikIte8ipQmGPVGGPVKHRqzbEdTFyy7JPBjqANVK5YJAzSemw1cR1bdzq8ELd3xqu8jNroOOp8I+l0fbCVQZBND9oWi1yJg9IoLNSfuNYLtwzl/B6mHefieMGbVuLrzIpJasV4kylfAttOouqTpuPNoPcKlxWR0oCHSGEEEIIsepKtx7/BLLY+Th+dQZv+3Dutrd9GL86M88jZvI2jeKe1oe/eZSgNoNOzh7kAOgKJ5yNY8y88JkW5qxBi1MpBTmTJgMd5doo18bua1jS4xWKSF8Tdm/+cf7WEbxNo7NuqzJhhYe23HlXqQIIIvkVfNT40jLcUp3fVEjFuBA/vionUqABv37Z0LTbQcRZ8N9fhJQ/8dq3NFot72umbR/nlF785rFwlbGT+tBmUNQKLyGEEEIIIY4nYU6JWOiCOUg5eLvzy/gCYTvO7oGw7WoRvE2juWqPHK1Q2SjmSAV2Xz3Ro5uJdm4J2xGYPdDRVoAuC1dpUtlo0eddrCdmNk780B7ih/Ys++sSGahfXKCTmbgwVWGgMxeNzlfmpE2Uv/S3vQQ6S1eMqhytArzk8PRPmj4Y88+tEqFcmAPhKmBLFMQ8nFN7wxB8gk65EugIIYQQQohVJ2FOCZnrgjmIe7gn9eeW8raGK7GGK8MbJrgn9RPEvVkfO+n4IMfuqyN+aBeJF08hcXg3sa7NRPobsEYrsMbLiXVunzPQCSqz+VWU1nBWTalSE/+txGICncnKHGDeVittO+FS8LDoZc9nI4HO4mmzSFU5idFcG99UQSQ7y9bieMqf+p5ZWpgTJJ0wyImFwZlybZjYnwQ6QgghhBBitUmYU2KOv2DWto97cn/uN/zGWBmR7k1EujdhTLY32Rr35H60Pftv52cEOb2NRPobMdzYnKHDZMvQ8YFOUOYQ1ORbu8xxCXOKZa5AZ7KlZmqYE9hzX8wH0SktVoscfjwXCXQWps2JpcgLXJUD01usjMF85ZeEOYsztTJnru+Xs/ErMzin9OUGJxvZGLH2HcQ6tkmgI4QQQggh1oSEOSVo8oJZK4170gBM/CbYyMSIHd2MwkBhEDu6GSMTCx8UC0Mffdxv7WcNcgYWt0rFrIHO6X0EtRNhTmBgpBMreaolyY+m8acEIGtp1kBnzyB+wzh+03ju89qeu81q2vDj8eVX5kySQGd2QdzF3TZI9uXd6PKJSinfILLE2Unz8ZL593JQma/GWswQ7MXSKsCPj+LUdOFW9qA3UAvX1DAnqM7MO2tIK41fkyZ7as9EZeREoD6eJNaxHcO3MZ34zEDn5D605UugI4QQQgghimpDrWa10Xjbh9Gpidk0rk30yNZpyxqrYGJJ7NYDaNtFl3m4ewawn6lGabWiIGfSbKs05e4bLUetQR7oRyeWNs8WNkjShk+2rhO/fCi3jLQ1UlXQYyxHZKAeULi1XQAEtZl8oDZBuXPP5wmmXOgvdfjxXNbDKleTF9PFXGVIowmqsviNY2H74XEMLzJ9TssKKd9EmzPDFeWt7BiB5eAnR/ATI/iJsWlL2TtVPUT6GrGGq0py8PhSGOn8Snp+4zhBwkN5BhgB2tRg6om/g7A18bhvb+ZoOdGuVpTO3zEZ6GRaDoLpo8tcnFN7ieyvWVSgI6tgCSGEEEKI5ZDKnBLl140TNE5UXgSK6JEtGP7MqgrDt4l1bs3/ZrjKwds5VJAgZ5KZjRNv202kpwlrqAojE8ccTRHtaVrW/pZLGz6ZxsNkNh8gs/kATnV3wVbx8WNjpDe/EAY5AAqy9Z0EkaWtFlYskYE6okc3g2dO+7yRiRPpasEanjt00mZ+npJyCveWL+UKnakX0cupkFjoMRqN1ziGc+Yx3L3904OcIP81DqIZvPKBJR9/LrGO7VgDNblqOQBrqAprqGbR+9AqIIhk8JJDZGuPML7lOdLbnsOpP4JfNjItyAkP4OM0dJJpfRE/Nlaop7ImzGycyLFmJr9t6HKHoDpDUOmgUy464UHUB2t6kGNkY0S6NxE9unlakJPbrxMn3rEd5Yahmo77ZE/tJYjPXTE3SSp4hBBCCCHEckhlTgkKki7ejvxsjMixTZhOfM7tDTdG7MgWMpsOgqEJ6qe3CK0kyMkdw7cxBmtXtI+V8OOjZBs6prUTuTXHQAXYfY3LrhjQaNyabtyqntxQZ83Eh4Ym03SY+OEd0yqi1oo1WoGZTuJUHwOlw2AtG1/wuedWuvIUKihsfluKFTqzXRyfZ1+86AqIBYMcI8DdNUhQfVx1lBPBHqrBGq4i3XIAHQ0DHj8xgr2EsGU+hm8T7W0m0teInxwGrTDHymd9DQSmSxAbJ7AddCQb/m074ethnpdMYEbxy+rxy+oxR7qwhzvDz8cyZFpfwhyuINLXhOGtvGVvPsWqwLOHalCeRbahY+Yw6cAI3yMTfys3ij1UjZFOLvg+M5wYsY4dZDYdREcciAZhhc5z1RjD889MWsrrU5SOd7zjHYyNjZFMJhfeeJ0cb7WfkxBCCCGWT8KcEqOtAHfPQH7lqqFq7EW0+piZJNGuVrJNh6ddqBUiyFlLWgU4Nd14Vb35zxkWKgirTdzqXrQREOlpXnKgE9hZso3tBLF8+OUnasg0n0ms4yHMzBA6kiXb0Bm2VpRAi4nyLaI9zUt6jLbCr1Uhq3KmKqVAZ74gZjEXzAsGObaPs7cfXZYPFc2xMqyhGsyxFAqFHxvLBTkAfmIMTVDQlkSlDazRyjnv91IDZOs7c6uYzUejCBLVeGUN+GUNBLEKUOFr3avcjDvWS7TrCcxMGDD75UOky4ax++uxB2tnrVRZCU2AU3cUr7IfALu/dkWB7WyssQrMg6kw2JoMcLSx4mMYXoR4xw4yzYfC7yuWxjmpD+tgBdax+S+OJdBZfz70oQ8t+TGe59HW1jbn/e3t7bS2thbseEu1GscQQgghRGFIm1UJ0VaAe2ofxCcHHseJLKGVyRqrIDLlQr9UgxytfALLWbBFKohkSLcemBbkeMk6xne+mUzTGblHe5X9OA2di2650mjc8n7Sm1/IBTkaRbb+ZNJbX4+Opsi0vBJthFmnnxrCq+hf+hMtAVr5+bYZt3jVRaXQcrWYdpWFwp75BAmX7L7efJDjG0Q7txI7sg1rSnXMjLYqIyCIj7Na3Mpeso0dswY52ozgx6twK1px6vaSbn0lY3vfTnrb2bh1ewjilbkgZ1KQrCW9/Y3he86cqMYxNG5tN+ktz+NUdxNYhRnAHJgumZaXckEOhIFttrEdrZa2lPhClDYw3CiGb6O0WbCwSPkWsY5tmGMTqw0a4O0Ywt0ytOD3KGm52vja2tpob2+f8/7W1la2bNmyimckhBBCiPVKKnNKxGSQo5MTVRSeNed8hvnYQzWYE0M+DSdW8PNcCW34ONXH8Cp7w+qhwMDIRjGcGEY2lvubwMSr7MWp6c5dkGpl4NSfgluzA5TCq94Ghkm082EU4QW0VsGCFTRBJINT0xXOBsl9roxMy1kE8XwFlI6Wkdn0MuLtDwLg1B4NZwUVuOWj2CarcqB4lTmT1rJCZykXwbNVQCz0eL8ig7t7IJylQjiQPHZk64z3mFYBXmpo5uMTo5jpskWf43JoNG51N25NT+5zbkUrfqqBIFJGEEmCOfeg7HlNvOe88k1Eep7B7j+IQqNtF7fmGG71MczxMqzh6rBCaRnVOn5sjGzT4dxrVisDdIAiDFQzlkvsyBZUUPr/21I6HE7v1B7Fq+oDwG8eQ8c97BeqUP7cXx+p0Nn4Wltb2bFjx1qfhhBCCCHWudL/qfgEMFuQE+vYjuEt78Kr5EIcNF5qEKe2C6aEC2HFQpogftwy4L4xbZaFHy0n23JW2P4xhVe5GW2YxDoeQmmNnxoiqwKiXdNDMG34+LExvMp+/ClLOwO4VVvJNu4DY+ZbwS/fhFO9g0j/ATA02abDxA/vXBcXk5Ny83IA5RR/7s9aBDrLHXA8ecG80OO9+jG87UO59kUjE59zILlXNpSrhDL6Y7m5On5iBPoal3yei6XROHVHplW0OHV7cer2zqi0WRErgtN0Ol7VNiLdT2OOdoVfFgV+chQ/OQq+iTVciTVaiZFZxEwnNF5lH07t0dzXOLDjZFpfhfKyxDoeRAU+QXycdOuBMERz559BUwoUimhvM4YTw6nvBAVBVRbn1F7sZ6sxsnN/H5FARwghhBBCLGT9XJVuYN72oZlBzjq4WFksr7IPp+5o7rZWBn6yFiM7iuHO0n4yEeRowK3ZiVN/MhizBxF++SYyrSax9gdQOsAvGyHTegBroJYgmiaIjxFEMzMGvgZmhGzzmfjl88+fcRpOxUz3Y6YH0LZLevOLRI9twhxPLelrsBa06eJOaVGjyJU5k1Yz0FlJW8piHhsknWnDyGdbmnqqqe14VmcZbiRcqjqIZdCmV9Blyqdyq3qmBTnZxtPCKrYiCWLlZLa8BuWOYw0cxh5sy7+XTR+vqi+sSAkUhhNFORMVeE40vO1Gc/OFnLqj0+ZWeck6Mi2vACv8Hpjeejaxw7/F8DLoiDMR6GzBzKyPAa32cDWGGyHTdDhcujzh4e4aIPrU/C2wEuiUvne/+9309PRQV1fH3XffXTLHm6+NC2DLli1Y1uzfi1b7OQkhhBBi+STMWUU3PnQNe/bsAabPGNFWvgolenTzhgpyAjuLU9OVu+2VN5NtOBUdmbgQ812M7AhGZggjO4yRGcbIDqPtBE7jqfjJhWf++KlGMlt+h9jh34a/wY9mcBo75jifOG7NLtyqLbNW48xgGGRaX0niwH0o30HbLplNhzDSCdAKlAYVoJXOf2xoDCca/lvOUr1RbBqNXzZEtv4ImH7+qYwus8XmRDY1BPSNeYOcwHJys3HUuIUatTFGbfyJGTuB5WIWIcwJTBe3+hgwMftp08vxKmcfoFpo2k7g1u/FrduDOdaDNdCGNXIEpSe+pxmaIJaBWAafKe1nWqFcO1z1aQqndhdO/SnTqomCeCXpbb9L7PBvMbPDYPpkNh0k2t2KNTq9Wq9UGekkRiZOkBxd61MRG9xC83Ymgx5p8xJCCCHWPwlzSoAxGsGvCi9qprbFrHcaHS7/OzH3xqnegdN02vSNTJsgUU2QqF7RsfxkHeltv0u04yHMbL6VSgNBtBw/WRv+STWBWlqFirYTjG/7XWJHHsUcDytdFhpoG8THcRo6iB7ZuqqrYGk02cZ2/KlzW1wD60A5xvDGC3Pude8o6tBYNWpjDEYIKh0wA9zKXiID9bNu66UGcx+bPRPtRd6U15rhz3xQAbi1+dlSbvW2VQtyplEqt5x51nOwhjsxx3owM0MoZwx1/OBfpacFOX40hdN4Gn7Z7F9bHUmQ3nY2sfYHsMZ6cm2PQW8j9kBtSaw0NxeNxmnozAc5nsJ+qXJNz0lsXJZlSVAjhBBCnCAkzCkBajhfveHHxuddcjhsSzgCqDnndpQKr7I3F3oEkSROw8lFPV4QqyC9/Y3Y/QdQvoefqMZPVC9/6OsUOlpGeuvrsAbbiHQ/jeHnL0Q1KmwDUwZaGSjfRWkfPzmKV96PPVyz4uMvllc+MC3IMXpjWC+Vo4q4ktVaK2ago1BYhypwTu8BBW71MayRKgxv+vtOo/HKB3O3zd54+Pgpg261Wfgwx4+m8VLh6lnasMMZOWvNioTDkqu3hbcDH8MZQ2VHwuq77Ej4xxlFW1Gc2j14VVsWDllNm8yW3yF65FHswcMAuLVd6EiGyLFNBV8ivVDcmu78CmcB2M9VY4yX7vdtIYQQQgixPkiYUwKMkXzYMFfFR7hSTbhqzOQvoZ26o8S6Nq/GKS5Z2F7VDYTVMZnmly2urWmlDBO3dndx9q0UXtVWvMot4DsTAY45Y8CsOdJF/PBvgfDfyEyXrVrr3NTqEOv5Csye9bX61nIVM9Ax0jZmVxK/aQwMjVM7830XRDPoSBYANRxBOROvdS//2tAFrszR6GlDg526vbk5MyXFMAli5RArx2dT/vNaL304szLINr+MwE4S7XkGAK98kMDOEj269HBbo4ta1eNW9OJW90weDPuFKszhEvw3EkIIIYQQ605p/irzBKN8AzUWXvwF0TRaBdPuDyyHTMtLuDXHps3w8FND+LGx1TzVRTm+vcqt3kGQrF3jsyogpcKLZsOa9WLUTzXiVm0Nbxjh10If32ZSBNp0CeLh60GlTYyeeNGPWUqKOSzWak+BG367nO19N1kdA2GL1SRVxDYrPzlMkAjPI4gkcau3F3T/RbfcVbaUwq3fS6blFWgVVpwF8TSZzS/iR+dvf4SJYDw1wPjWZ0lveZ4gklneecyxb60CtOnhpgamDX63DlVg9p9Y70khhBBCCFE8UplTItRIJFzRSkEQG8dMlwHhRWK27kh+qW4NxkCUoDqsAnDqjhBr31lSMyNWu72qFGUb9mGO9mC4YwTxcdyqXiIDCw9zXgmvbDi/fHZvrKReE6ulWBU6yjewDqdyK1tNfd9pdL61LQCzb8oFe5HarLQKcGrzg8WzDaeCcWJl815FC0GkjFj7f2K4abTlkWl5ieixTVgjVbM+JrCzZOs7cyEYQKapjXj7DlSw+P8dauXjVh/Dj6XB8NFGEP77GkE4CP04ZkcZVtf6WH1LCCGEEEKsDyfWT/8lzDhubo42fDIN7WQbO/JBTsbEfrIG65kq1OhEJU8sk5/HsMY0Gi85tDbtVaXGtMi0vDxXj+PWdONH0/M+ZKW8sqmzck7cCoBiVeiYxxL5Crop7zs/MYq2PGCiZXLKtbwqQpuVNjwymw7mBgj7iYnB3iegIF5Jevsb8RMTc6kMTbaxA6f26LRqOK0CnOpu0ptfmBbkAOiIQ6bpMJrpFZFz0aZHpuUgbnUvQWIsXHY+4oQrx80W5BxLhJVdQgghhBBCFNAJeJVdmqbOzfFSg/hlQ+GSvpP3H4uHg2wnftNvHazA3dcHgFPTjTVcteqVGFoFBLFx/PgYfnyMIDaea62CDdhetURBoga3dheR3hdAaTKtB7BGKrAGazGzhQ1btOHnWqzImKjxE/utXYwKHYXCPliBc2r4vnMn3nd+2XBum6DCIfuqLnANVNZER/MBTiHCHG34ZFoOEkTD7w1amWSbTlt+y9IGoK0o6S2vI9r1OPbAIQDcql4CyyXa04Rb0Y9b2ReGLRMCO4FTfxKR7qcwvCxBYgyvsh97cOHvV9m6IwSxKcFsAPgGylfghyuYhR8bGCMRzO7ECVklJ4QQQgghiuvEvuJbZR9/xV9jjM0xoHPiAlwnPHQ0m/+dsqewDlTkVseZpEbs8MLB1KAW9xvlQggimTBsSowSRNPMdY3ix6tOyPaq4zl1J2GOHsPMDIEKVzzyygcxxpPYg7WYY6nCXehpFVYGRH10uYvagEuRL0VRWq4cM6y8UeQrP4JZChztAG1Pf18aTmxFh9YqINN8KBfkBFaUzObXEMQqVrTfDcEwyDadgR+rIHr0CdRE69t42dC071EahVu7MxwWbVgQeMSOPh7et9iwbUr1jXU4hdUpVTdCCCGEEGL1SZhTIhQK69lK3FP7ITJxEegY2E9VY6RnBkBBZTYMcgBrrLyov/kNLDcMcFKDuQvJ2beL4ydr8BO1eJWbw9WeTnSGSXrr64j0voA9cBDluwAEiTGyiTGUE8EerMUarkTp5X+9VGAS6WvAqesKl9DePYAxFA3bfDwjrBaY+Fh5BmrcmrZsdiH93L+zKPtdjpUEOrM91m8ezYUD9lANCkWkrwEzEyeIZNG2Q2C5aNtBWy4EBma6DHO0HGukctnPQ6PJNrbnZ1GZEdJbz0ZHy5a9zw1HKbzq7Wg7Qaz9AZQOcv9WGoVX0YJbuztcWWuCkRme8vHiVn6zB2pz1Vhe4xhmV7Jo7yVR2q688kpc18W2V2ep+dU43mo/JyGEEEIsn4Q5JcRI29hPVePtCmefWC9UzBrkAAS1+VDFHC38b+a14eOVDeGlBsP2nVmyoiCawk/UTPypRUdOjGWwl8yM4DScglO3B2uwnUjfixjOKBDO63Dqj+DUdGEPVWMN1WB4y6uosQZr8cqGwwv+aEBQP8+MHh+slyowjxX236yUgpxJywl0Zpu7o20fv35itaTAyLXkKG1gjVbO3H6icmelQatG49R35gIEbVhktvyOBDlz8FONZDa/hljHgxD4uFVbcWt2oiMzBxCb42HLHBrMRYY5ZiaJOVoe/ntEApxTe7GfrcbIyv9OTzRnnnnmhjveaj8nIYQQQiyf/PRZYoy0TeSJ+ec2aKUJqifCHN/AHC/cRZ1WAU7dEbzU4LT5N5P8eBVexWa8ima0tbK2kROOYeFVb8Or2oo52o3d9yLWWE94nxngVvfiVvVijlZgD9Qtea6OQhHtbiGz6SW07c2/sQneriGCMhfrYDlKr7yyqxSDnElLCXTmGqDsNY3mRsbbg9WoYP5KqkJVy7k13XgV4bBlrRSZ1lcRxGdfrUmE/LJ6xna/FVBzVwh6DkY2DMiMbGzBf8+pIj1NpONjYProhIezrwf7+WrM4WgBzl4IIYQQQoiFnRBhjtYatYEGhAaVWbCmtFjpwpX4O/WdeOWD048XSeJWbMaraJFqgEJQCj/ViJ9qxMgMhaHOUEeuLcRPDeGXDRHpacIeWtoAacONEj+0F0wPbfho0w9ngUz8rU2fIJLNLaUdNI3jJjzs5ypR7vLbvEo5yJm0mEBnriBHWwF+42RVjsJaxKDc+WgV4JcNoU0f5UQxnCjKs2cEQG5FL251GPhpILvpLPyy+hUd+4SxwCp6Zrov99U20ktbNtzwIsTbd5BpbkNHsmBr3JP60AcrsI7JEuRCCCGEEKL4NmyY89xzz2GaJjt37txQQQ4Ur8XKSw3kghytTNyqLXgVrWEVwAb7GpaKIFZBdtPLcepPwR44iNX/EobvgAKn/ija9LD7G5ZU5aFQ4Nso3wZ39m3c8X6cuiNgaHSFg3N6L/azVRijS2/xWg9BzqT5Ap35ljT3G8fyM6qGqzD85c2T0CrAK+/Hre7JLWeeExgYThTDiaGy0XD2UU1X7m6n8TS8ipZlHVfMZI715T9eYpgDE8Fp+w6yjYfxk2HVlrdjCB33sNqKO8dMlIZHH300N19mNdqTVuN4q/2chBBCCLF8GzLM+dWvfsVVV13FW9/6Vi666CK2b99e9GP29vbS19c3631tbW0FOYYmXKmoGC1WgZ0lW38kdzvbfCZeZWtB9l0yfBfDGUM5Y2grWlLLpms7hlN/Ek7tbiI9zxLpfR4Atya86I8c21TQi0N7uBojGyPb1Ba2ZEUD3H19WAcqMI7FF32sQgc5q/E+mi3QmS/I0UaA1zg6cQPsgbolH1MT4FXMEeJMMgKCWHr6stcTnNo9uDU7lnzctWSM9aJ8lyBehbZLryXTHO/Nf5xZXjWNCkyiR7bi1B7Fqwpft37zGDruYb9QJYORN7irr76anp4e6urquPvuuzfE8Vb7OQkhhBBi+TZkmPP44+FSs7/85S8JgoD3v//9bN26tajH/PGPf8xtt91WsP3lgpukiy5zCco8dJkLU5Y7LmSLlVPbBUa4b7dy87oOcpQzijk+gHLGMJzRiQBnNKx4mSJbfxJu3d41Oss5GCZOwyloK0ak6wkU4FUMoDyLSH9jQQ9lZhPE2neSbTocDk02wjk6qi6NdbAcY3z+6pNiVOQU+n00l6mBznxBDoBfmwY7rMoxRyuWPKDaj4+SrTuCjmanfd5LNeGlGjGyoxjZEYzsCModmxGjuVVbcepPWtIx15TvED3yOPZwR+5TgR3Hj1cTxKvwE9UEscq1Xe0u8DHSgwAoJ4ryl/+/QoUi2tuM4cRw6jtBQVCVxd01gP1stVToCCGEEEKIothQYc7kbJzXvOY1PP/885x66qnccccd+L7PBz7wgaIGOhdccAGvfe1rZ72vra2Nq6++elH70WaAt32YoCo7LbiZjTVcyCGo+WHH63mwsTHWS/zQ/ShmDm8+XvTYM6jAx6k/ueTayNyaHWgrSrTjv1Bo3KperJEqDLewA1YN3ybWsQ2n7iheZT8AutLBPb0X++lqjDkGuhartapQ76PFWCjEyVXvTBkO7cfHCCwXw1u4zSowXZy6o7n5RJO8VBNO3V6CeOUsD/Imwp1hjOwI2orhVm8vudfnXMzRY0Q7H8HwplcXGW4aw+2E4U4gXCo8iFXgpZpwa3etQbCjwhX6NLCI7xWLYQ9XY7gRMk2HwfQJqrIE1RnM/qUNMp/qPPviBV+nQgghhBDixLShwpzJ2TgtLS28+OKLfPCDH2TTpk38wz/8A0op/viP/7hogU5tbS21tSscimoGuKf2ocvmaMPwTMxsHCMbxxxLLbs1YDaRvkbSyVFQGrv3BbzyTbNfbJYyHRA9+visQY5dYRKptYjWWaCg/7djAGE7k/ZxGvaV3AWzV9GCkRkKz9HQOHVHiB7ZWvDf9CsMoj2bMMdTOLVH0REHDHB3DxJ5tG5VW0UK8T4qhKltWGZPnKA2PTF43CPb2Easc/u8VXGBnSXdegBMP/c5P15Ftun0+VeiMiyCeOX6e+8FPpFjTxPpO5D7lBlXVJ2VJH3UJX3YIXDy70uFxswMhn+yQ2RaXrm67z/DIIhXYY73oyMOgekuew7SVGa6jOixTWSbDgPgbh3GGIyigqW/hyaXtpdARwghhBBCzGZDhTkAvu/T3NzMmWeeybPPPssHPvABRkZGuPnmmwG45JJLaG1t5cCBA+zYUTozKGYEOb6BmUlgZOMYmTDAmW21m0IxnBh2fx1uzTEUmmjnw6S3vxGM9TPzwRo4hDmx1HCs2abxreVE6iyiNRZGZPrziDfbdN49CECk7wAqCMg2nV5ygY5TtwdrqB3DTeMnR/GTw1hjhRt6PZU1Vo45Xkam+RBBYgyiAd6OIeznT6xlsI+fp6NQ2C9Ukd3XAzGfIJ7GqT1KtGfTnPtwao/mghxt2mQbTsWr3JJ/ffkekWNPh9s27gO1ft5nxzPSg0Q7/wszO5L7XNnuKK3vqyZSGf4vRgeaTJfLeJvD+CGH8bYsmW4PNFjDR4geeZRs85mr+v7zE3WY42E1WhAfwxitLMh+zdFyzLGycChy1Mc5qZ/IM9WLDnQ0mqAmg7tlGKXBfr5KAh1RUO3t7XPe53lz/DJJCCGEECVnXYc5xy85rrXGNMNy/ebmZn7+85/zvve9j/e///0YhsHXv/51giCgs7OTbDbLddddR2Vl5Rqdfd7xQY7yLGId2zDc1W13svvr8cuGCaIZzOww1nAHXuXm1TsBrTEyg1hD7aAsnLo9i2+/8Byix/bnbra8p4rktrlbkmpfn0LZio47ByaG2h4E7ZNtfllpBTqGRbZxH/H2BwFw6o5ijqcKuhz9VEobRLtbSG9+AcyAoC6D35/G7F1+q8h6MtdKV8oziDxfhXNqbzhbqLIfI5PAHpkZdPmxMfyyMNgIrBjjO94E1vTXYrT7SeyBQ+E2sQq8qq0FfR6rQmvsvheIHNuP0mEVibKg6fcqqX19GcrIv4+UoYg3R4g3R6h5Tfi54WfSHLq1F+2DPdiGNm2chlNX7f3nJ2uh97nw48QYVoHCHIUi0tNMOvYimAG63Fl0oKNtH3fbEEFNOOReA87JfUT210igIwpiy5Yt897v+/689wshhBCidKzrMEcpRTabJRKJoJRCKYXneViWxete9zoeeOABBgcHqa2t5b3vfS++73PLLbcQjUb54Ac/KEHOccKLkCYyLQcBMEe6VifM8RzsofZplTUARmaQTOurF1UdFOl5BuWH63BXvjwxb5AzqebVZRiW4vD3+yEAe/Aw6IDsppeXVKWEn2rGS9ZjjR1D2y5u9TEifYUdhjyV4UWI9mwi2xj+9tbbMYQxHEE5aziwdhXMFeRMMsYiWC9V4u0cBMCp78RwYpjZfNCl0eEw8QlO/UkzghxjrDcX5ACYY73rK8zRGnOsh0jPM7nKFoDYJpstf1RDrGlx7UrlJ8XZ/Ec1tP1jH2iI9L2INiO4dXuKdebT+IlqNAqFxo+PFXTfhhsl1rmdzKaXFhXo5Kpxtg3NnJVmaQl0RMFYljVvVfLkL8SEEEIIUfpK54p1iR588EH+/u//ng984ANcccUV/OM//iMQ/qACsGvXLgYGBvj3f/93ALLZLM888wyRSIRsNsvBgwc5dOjQWp0+UPggR6MJ7AxuRR9e2dDCD5iFkU6CH/4wZ412g55/CPOyaY052kO04yGSz/+UaNcT04KcyePHOh9a8ByMzDB2fxhAGRFF8+8tvg2p6qwkWz5Yk3sn2EMdxNofgqBIz3s5lCLbdBp6omLBrewlsLMLPGhlrJFKzJGJr6OlcXcN5mZ4bEQLBTmTrJ4EZlcivGHocGl3Y8pcnORwuDIY4EdTM8PQwCd25JFpn5q6RPZqUW6G+IH7iB+4D+XOXAp9VoGPNdBG/MAvibf9ez7IUVB3Topdf9aw6CBnUuWZCVr+MF/dFD22H6v/pSXtY9kMKze/SEeyBKZb0N2b2Tixzu0wMXNqMtDRxvTvLdr2cXcP4O4eyAc5nkmkqwUjPfFamwh0gqSz6NeqEEIIIYTY2NZlmHPvvffyt3/7t7S1tbFnzx76+vr43ve+x1e/+tXcNvF4nH379tHZGa6ectVVV/Hoo4/yP//n/+Tyyy/n5z//OT/84Q9x3cL+AL9YhQxy/NgY6ZYDjG/fT3rrCzj1R8g2HcZLLj3QUSjM8bLw48DDHO9b8j7mpQPs3hdIvHAv8bb7sYc6UFPCmsSWCI1vL0fZYXBhDR8h2vkI6DmCBK0nlvAO768/txy7cmkFZ5WnJ9j6J7WoiV9IWiNHiLX/JwSlU26uoyncml3hjYlhyMUOV6LHNqHc8OJcVzr4zYWtXigVS704tg5VoEYmvi62i1c2GH6Mxqntzm0XrpI2/VtspOdZDGf619Fw0yhnfBlnvnyR7qdyA4ijRx5FefOEg76L3fMciRf+ldiRR6aFrpFaix2fqKP59yoxrOW1R9W8poymC/IBbPTo41iDc8/0KCQ/mR+2HRS4OgcWDnT86jTZ03tybVUA5kg5icO7sUeqiHVulUBHCCGEEELMat21WT322GPceOONnHvuubz73e+mpaWF/v5+rr76au677z7e8pa3sGfPHizL4rTTTuOee+7hxRdf5Nlnn+Uv//IvedWrXsXZZ59NNBrl5S9/Oba98hVMlsPbMlKYICc6TqZ19t9ke+WDyxqWa42lcsspmyPd+Mm6Je9jLnb/S0S7n5r2OTNpUHVWgppXl+V+sx9vjeTnaQy1YzijZJvPJIhNeT6BT7TrCayxHgAiNSZ1b0gt67wqTo2z7bI6Dn6zF+3qsCqo/UEyra8qmSHQxw9DDmLjBV3R7HgqMIl2t+Ta7vwtI5jHEiivNL4ehbCci2KlFfahCpx9YUVNEEvDMPhlw+hIGIr48Wr8VNP0x3lZ7N4XwhtaYY6W599n6X68SGIFz2RxjPE+IseexRo7lvucNdqN9dxPCCLJ8LwTNQSJGoJoCmu4k0jXkxheZtp+Elsi1L0xRcW+OMpc+Yyb+jeV448HHPvFCAqIHnk4bIOKFO/1DZNzc54PP44Xbm7OVJOBztSWK69lFLMvFlbjTH75PJNozyas0fz3OKVNYp1byWw6FFZ8WRpnTz/RRxqk5UoIIYQQ4gS3rsKcdDrNL37xC6qqqjj//PNpaWkBoLq6mo9//ONcfvnl7N+/nz17wpkLp5xyCv/0T/9ER0cHn/70p3nta19LJBIB4N3vfveaPQ8AXZavCFqrGTlzMTL5i0rlLbIFY5HUlKoEu8Kk+Z2VlO+Lz/itfvlJcbZcUsuhb/dCAGZ6gPiB+3Brd+HU7UV5GWLtD2Bm8tVHze+qwrCXf2GZ2htj++W1HLy5l8DRWKNdxDofItPyitKYoWNYuDU7iXY9CUAQyRY1zIGw7U55FtryWOxCaueaFwHwc//OIp7ZwopaveBPGbyuZquQWqhqSqMtd8qt4g79nS3EmbGNM4bhjGEPhVUxWpkoPaU6TUHFaXHq3pBa1EyqpWo8vwJvNKD/P8dQWmMPtoXVTUXkxypzH2vbKdpxwkBnG5nN4dLtusyBgWj+PeWbJA7vRvkz/5estEnsyFbGt+8Ptzc3brvjenP33XdvuON96UtfAiip1T6FEEIIMbt1FeZAuKTm7/zO77Bz504gXMEKwkCnvLycw4cP57Y944wzuPzyy6msrOS0007LBTklRbOiIMfMJoi1b8etPkZgO+EFiQr3aw/WLG+nUwZ0qkLPjpkSimy5pGbei8KKfXF2fqKe9jv6yR7zUGgivc9jDXWifAcVhBfDyla0vKeKilNXvuJS2c4Y2y6r5aWbJyp0ho8Q7XyY7KazSmKVK22s7lvWT46EQQ5gDEQXrMqZDHImP16rQKfYbSg6ll++13DD7yvmaDkqG0VHs5jpgXA1uIrW/GOsKE7DyUS7nwZFbrYOTG/3KaS5QpxIjUnDWyqINVgMPp5m7GCW9GGHadnNlBvlp8Zo/v1KonXFq2RUStH4tgr6HxgLlywfbMepO6m47zszkhuCrM3iLslsTB2UbWjUSAQ1bqETHpg+QSSDmS6b9bFBJJMLfozBKKrI4Z8QQgghhCh96yrMicfjfOYzn8mtthAEAcZEC0x1dTW1tbX09IQtN47jEIlEOO+889bsfFeLmUliHtkGgDZ8/NgYyrcws8tr21B6yoWCLvDcmClhjvYW/g1zcnuU3X/VyLFfDHPs58NoHww3X90TqbPY+qEa4s2FC+rKdsXYdmktB2/pmWjz6gBlkm0+syQCndXkledXKzK65n89TQ1ypn5utQOdogc5SuO1juRuG04YSCoUkd4mspsOARDp3o+XagYjvzqMW7MLc6w3HC4+wY9VzljxasV8l1jnf2GNdE37dKTGpOG8cqrOSpI+EoahzRdUAhB4mnS7w9jBLOOHHMbbHKyUQcNbKqjYtzpL09sVJqk9MUaezWC445jjvQVt85xBKbQVQXlZtFncGVkKBVqB0qDC21ZnGe6uQQDcqp45wxw/mX+9mQOlU8UphBBCCCHWzroKcwCam5tzH08GOVprlFLYto3nhb9dnazC6e7upqGhYfVPdI2owMQaL1/ZTvSU6otCr2Y1JcwJFhHmABiWovGtFVSekaDjrn7GXgrbISpOj9P63mrMWOFboFJ7Y2z5UC2HvtU7sWx5G1oZOE2nnzCBTmA5+YvIrIExMHfgMFuQM/W+1Qp0VmMwrLd5GJ2cqFbKxjDH8u83azyFN1aGnxzFcMex+w7g1u3OP1gpMpteTuLAL3NzaPyy+oKfY+TY/mlBztQQR5mK8bYsL3w5rNbZ9RcNJFojGJYiuS1alBaqpah6ZZKRZ8OvjTV4uLhhDqDNKHhZtOmhJ+p0iiZQYZuUEX7vM3rjqNYRdMzHT47iR9PTlrqf5CUnhk7rsDJHCCGEEEKIdRfmzCYIAkzTJBaL4Tj5uQeHDh3if/2v/0VZWRlf/OIX1/AM15kplTmqwJU5emplzhJ3HWu02fGJekaeCS/0UifHUEUMVipOjbPlAzW03d4HGiIDB8EwcRpOPSECHa88P5zV7E7MeZE7X5AzdZtiBzqrEeT45dn8ql6BItrVitLHrVjV20Q68QIoiPQ+h1fehI5OGcxtRcm0vIL44d8CGvf45ctXyEgPYk8s721EFJveXZkLcSa13zGQ+/jYvw2z9ZLitHktR8WpMYyYIsiEbY7ZptOhiO2F2opCljBgUQFoc8HHLP9gBhDkwhyFwuwsw9sRzv5yq45hdm2Z9pDActDRcLC2GrVRXhHPTyzJt7/9bcbGxkgmk3zoQx/aEMe75557SKfTbNq0aVWekxBCCCGWrwSmuq7cZNtVPB4nnU7jeR6HDh3i61//Om1tbfzJn/zJGp/h+hK2A0zcKOLMHO0vfZCnMhTlp8QpPyVe1CBnUuUZCTa/vzoXakT6XiRy7JmiH7dYtArINBwmveklnKpj+NHxWZc41+gwzAlvYHbP3mK1mCBnOdsu1WoEOdoMcHfmQ5BIXwOGM7PlxXBiWMNVAKjAI3HgPqyBQ6DzX+cgWcvYrvMY2/226UHPik9SEz36WC52a3hLOdWvKpux4lS2Nz8fphCrURWSETGoPDN8vanAI37o31FuYQexT6XNyJSPi9xqNRGUayP/WjB7EuCE3xf9smECe/rKYX4yvxS8tFiVln/5l3/hrrvu4l/+5V82zPH+3//7f9x7772r9pyEEEIIsXwbIsyZFIvFyGazuSDn0Ucf5atf/SonnXTSWp/a+jNZbVDENqvFzMwpBVVnJWm5qCp3O9L7HHbPs2t4RsvnVvXglw8RJMZwa7vJbD7A+PZnyDS24aYGcsGOnxxB2+FMFWMginJmVgMsJ5wpRqCzGkEOgLt9CKLh+8EYT2INzl3NEulrRGUnZulon9iRR4l2PAT+lBWTrCiYhR0obA22YabDwCnaYFH7u7MHRdqdEiYkSu9/A7Vnl6EminHMdD+JA7/EnDJnqJD0lHlFxR6CnPu+OiXMUVphHZmYlaPAre6d9pCp83IMCXOEEEIIIcSE0vspfhmCieqRaDTK0NAQX/nKV3j00Ue54YYbcqtelSwFgekuvN0q0uhcZU5R26yKfN1USDWvLmPTuytzt6PHnsEcObp2J7QMWgW4Ff0z7zB9/NQwTmMHbnV4weyVDebunm3w8UpCmUIGOqsV5Hh14wS1E9UhvkG0u2Xe2SrKt4i378Qaqs59zh7uJH7o38Ev0vtd62lVY5veXYVhzTzH42dVBekCB7YFEG+KsPOT9dhVYYiofIfY4f9EZUcWeOTSaXNKmGMV75uSVgEYE99Pjen/BmZ3Arzw38pLDeBUd6PR+LEx/MREW1/WRI1viM5oIYQQQghRABsizJkchFxXV0dvby8HDhzgxhtvZNeuXWt8ZnOb+kN5tukwmtK5oApi42CG56Otwq5iY7j55ZjNeGm1dyyk9vUpmi6oyN2OdO+f1jqzGqa1hFjOPFvO5JcNwcTFqhqxsV6swOiNgZv/d5isxmFqUKHWRwVVsQRlDt72wdzt6LFNGN7Cq6cpbRA9tonokc3gh6GEmRkk1v5A4dsXAdC5ocqxZpvU7tmrOJRJLiQBiNaXZkCQ2BJl96cbSJ0cPg+lA+zB9oIfR0fzK0j5idGC7x/CgDzbdDgXFqnx6RVZKjCwOqdU59QcI9N6gMymQ7n3n9kblyXJhRBCCCFEzoYIcya94Q1vYNeuXdx0003s2LFjrU9nXlZbCrLhlz+Ij+PUlU6VhzelesOtKvxw1knxzYVbTny11L0xRWJLeN5mdhhrqGNVjx/EKqZ8nJlny5ncir7cx9bBcszuBPZzVVjt+VYcIxOGd9ZIZe5zfnM+gCs197p3FHX/2vZxdvfnvlNag9VYo5VL2oc1VkG8Y3su0LHGeoh2Plz4IFAZubAvyM4dFiml2PXnDTS/s5LW91VT/+YVrn5XRFbSpPXi/Mwqa7ij4F83r6whVzHolw3NOkNqJTQap6Ez3y7lKewDlTO2M4+Uhe/FicMHsTQYE219g9Fp71Mo/mtfCCGEEEKUtg0V5mzbto0bb7yRrVu3rvWpLEi5JvazVUwW5HiV/bjls7TArDJteHhl4coq2rTxylsKuHONmQnneVjlBnbF+luVRSlF4/lTqnOOPVP4uULz0HYCPTFnJYgufiisH00TxMPt1ZiFGslXBgSpfIWPkUkCYI6XoZwwGNAVDkGitFoBpyrWRa1WGmf3QH5OTjpBpKd5WfsynBixI1vCpakBe7iDSNeTBQ8mgon5L+5wgJ5n33bKpO4NKapfmUQZpV3tYZeblO0Mn5fhjGFkhgp7ANPOLQ+vLS+sTCwgt6Y7P0w8APu5aozxmbOSFAqrI0XkqVpUJv+90RiMYj9bnRueDBLkCCGEEEKIDRbmAEQi66fawxiNYB3IBwNO3RH86NpWQbiVfbl5Dm7lZjAKF7godww1MS8k0RpZldWoiiG1O0bZ7omLS3cMa6Bt9Q6uFH6sEpi48FzkvCVvSlWOeTQ5rV0jSE3sI1AY2YmWFhT2YE1uG7+pdKtzoPAXtxqNt3UIXR4GXcq1iB3dvKI2FzOTJNq1OVd5Eek/gN37fCFON0db4b+fdjVBduO0x1WekZ/bZA0XvhrOK9+U/7iscGGRW9GLW90T3tBgv1CFORyd9zHGaITIE3VY7SmswykJcoQQQgghxKw2XJiz3pjHEhhHJy5UDE22qW3NBiJrw8etDFdS0Sjc6u0F3b85tcWqdf2EbrNpfPuU6pyeZyEo7pLGU01rtVpEdY42PLzUYHjDUxg9+Vkq2vYhFp67kUlMCyuskSoIJloB69Jos3TmOs2mEBe5Go1flcHZ14vfOBFgBYro0S0of+UrT1lj5USO5YOD6LH9GGO98zxiaSbDHAB3aPVek8VWcXo83+o21Fn4VqtUI3oiXPbLhgvSauWVDU1rn7UOVmD2L24GmfINrI4UVmdKghwhhBBCCDErCXNKgHWwHDUUXihq21uzgchuZW9u8LFX2YqOlC3wiKUxJpZMBkisw3k5UyW3RinfF16YGV4Gu/+lVTt2EK/MfxxdeG6OWzGQq7YyuxOoIP+2z1XlAGZm+qpVKjCxhieOZWr8htKuzoHlX+xODXHcvf3osvzXJdLTjJmduaLXctnD1di9Dfnbg4Wr7Jq6zLY3snHCHKvMpGzXZDXcOEZmsLAHMCP4yYlWK9tdUgvjbPxImmxDe27Wj9lRhtWdXNE+JcgRQgghhBBTleYyJicYpRX2c1U4p/dCNCCIj5Nt7MAcnztMMZzYjIvvlTi+Ksep3VOwfU8yp4Q5670yB6Dx7eUMP5UGDZHe53CrtoK58uqNhUy2WcHEkNR5aPT0FqvjlhnX0+blzHw92YM1eJXhLCe/cRzzSLLkV9S5171jSUuW+xUZvM0j0wIcACMTw+5rxBpPzfHI5bMHa3GresAMsIaPkG06oyAtjdMqc4ZLu5JqqSrPSDD6XBYAa6gDJ15V0P175ZuwRrsB8FNDKwrw3JrufIB6LDFjePFSSZBTmk4//XSGhoaoqKhYeON1crw9e/YwMjJCU1NT0Y4hhBBCiMKQMKdETA5Edvf1gRFeTPip+Wc3xA7vKFjFgFvRN70qJ1rYqhy0zg0utatM7NT6G358vHhThKqXJxj4r3GU72IPtuHW7Cz6cXWkDG2YqMBfsIIgiI/llhtXIzYqk3/LazMgqMlX9piZmS0ghhvDGE8SJMYg7qMrHNTQ/DM/SsFiA52gzME9qX/aSuxGJobd34A5lipacKW0gTVWjlc+iAo8zLFj+KmVXzxNDXOy3aU7tHo5Kk6L0/HDAQjCViun4VQo4NwtL9WERqHQeMlhIr3L+/cILAe/bGLlqqyB9VLFil5HEuSUrs997nMb7niXX345QMmvCCqEEEIICXNW1Y0PXcOePWHFy7nmRTPunxyI7O1a5ABOozC/eQ+rN/onPqYoVTkABB4A1gYIciZVToQ5AMpdWWvGoimFNmxU4INaYLaHzrdU6ZSLt2kUq7MMrTTu3gF0fHJeTnzWmTDa8NGR7JRPFOQZlJYp19nmaDnRFQ46Xiwjk4DywfAUvOz8Gy+SH8//xr7nvhGqzkoQrSt+tdhqsJImqb0xRvZnMLw05shR/PLlrS42+wEiBLEKzMwg2nbQE9HOkk15TxoZa9rMm+NJUCOEEEIIIZZLwpw18nP/zlkDHfNYApW20Alv5oOUxts+HF58+sasbTHLESRGc9UbfrK+8FU5EP4G3bTBd/HHN077x9Tnoq3FDTddMa1zF//Km/8tbGYS2L2NuLVdAPhbw4oBnfDQlRMtVr5JtGv2Jeidmi60Fb4Wjf4oanjl7XE/9+9c8T4Wstg2K2M0gtWWwtsSfl38smHcql4iA3XFPL2QmvI+MArzrVhHy3GqtxPpf4nA0bT/oJ8dn6gv+eXHF6v2dWWM7A+ryez+lwob5gB6sk1SEYYy8wQxc1FuBOVE0BGHoNxBWz7K2zgBtpif53m0tc09B6u9vZ3W1tZVPCMhhBBCbFQyAHkNzXVRa4xEMLsTM/6QNXNVBNZYOUoX5p/PLc/PsnGrthZkn7PRZhgEbKQwxx3OD5nVdmyeLQvId1ATJTLKXzgEiAzUYfc25h++dYSgfqKKKFDEjmzBcGeeux8dz1Vs4Susl8pXXLFSSkHOJOtICqstP9PEre3Cqeop9GnNoKdU1ukCzMuZ5DScQmCHw3bHXnLo/fVowfa91lJ7Y0Rqw9e8NdaDygwX9gBTQjVtLG+AtEJhjVZM3sDbtHG+/mJhbW1ttLe3z3l/a2srW7ZsWcUzEkIIIcRGJZU5a2yuCp3ZBLVT5puMFmYAojY9/LLwgigwIwWZ2zH3sSLAGH46QAd6Q1QLeFOWfw6s1QlzjCktOcpbXAvNZKXJZIUOABqiXa2YmZmr7Gg0TkNnfjWew2Wo7Mq+XZRikDPJOhKGOZMVOpNfp6JW6BShMmdyX5lNLyN+6Dco4Oj/HSR1UoxY4/pvt1KGovZ1ZRy5ZxAIq3Oc5jMKtn899d/BCGCZC4JZQ9XhQHlD4zeNYfbHMEZKf9aUWJr/9t/+GwMDA1RVVXHdddflPt/a2lqUmTNzHa+Q/tf/+l8MDw/T0NBQtGMIIYQQojCWXdrR19fHr3/9a+6//35GRkbm3O6xxx7jtttuW+5hTgiLucjVShNUT4Q5vjHvSldL4aUGcjMevMotYBSvWCvXwqAhyGyM4Svu0NQ2q9UJc5SXD/UWU5kz6fgKnUhPM9bY7KGgV9mbW/ZcjVqYR1a2rHIpBzmTVrtCZ3plTmFz9SBZmxvGrT04/L0+tL8x3nPVr0piRMKU0R46DH7hBj3rKavRLbcyB8DwIkT6JpafV+DuGJz27y02ho6ODg4dOkRHR8eGOV53dzdHjhxZteckhBBCiOVb1pX7HXfcwUUXXcRVV13FlVdeybvf/W6+853voPXMi4VHH31UwpxFWOhiN6jMghV+fQvVYqXRuBVTW6yKW/o92WYF4G2QVqtpbVZrEeYsMDPneJGBOuJtu4i37cIeqpl1m8BycGrCJZrRYB1Y2Wo86yHImTRboOMlCtzKM8nIf79ccptV4BPp3k+k+2mYY3iyU38yQSQMfdPtLsd+UaTnscrMuEHVK8J5YSrwiXY9AbP8v2dZjq/MWQFrsBYjHZ6njvt4rXP/0kMIIYQQQoilWnIi8OCDD3LTTTcRiUR4xzvewTvf+U4SiQTf/OY3+exnP4vjOMU4zxPCfBe9xWixCmLjuZWK/EQtOppa4BErMzXM2ShzcybDHG1YYK5O1+JyK3MmGU4Mw5k9eNJonPojuaDBOJrAGF3+0OP1FORMso6ksA5PCXRqutFFWMZLqymVH0upzNEBsfYHifQ+R6T3eZIv/gJrcJYZHYZJpuUs9EQQ1/Wvw4x3bIzvz3VvLM9X5wwexho4VJD96mkzc1b2PUqhiHa3QBCep980RpAqzKplQgghhBBCLDnM+eEPf0gsFuMb3/gGn/70p7niiiv4/ve/z5ve9Cb+8z//k89+9rNks/ID63LNdvGrKVKL1SoNPs6Z0sKQ7Slca8Ra8ibDnFWqyoHpy1gvJ8yZT5AYxU9OVBBkjWmhxlKtxyBnktlZhhoNX69BLEMQGy/8Qaa2WanF/ztaA4ewRvOzj5TvEOv8L8zRYzO2DeJVuHW7J25A+/f70cH6b7eK1lq0XFSVv931ZGHarQowAHna7tzotHYr56R+vOZRtFr//wZCCCGEEGJtLflK8Nlnn+Xss8+etrRmIpHgc5/7HA0NDXz/+9/ns5/9LNdeey3RqAx8nOrjr/hrjLGlDyHVcS/XYmWOlxVsFasgkg8FvPLiDT6e5Mcqcx8f+edBUntjWMn1u2SvDjRBNvx3mTpro+jHNfLHCmwHM124fXtlQ7mPrbZylD/3a225Yc1sA79XI/hZCoXC7I/hlYUBgbYKHz5OW/VaLb6NTem5KkZmDwic2r2YI12YmSEyR1z6Hxyj5tWFCYTXkjda+Oq+IJLIfxwbh5GqebZeHGuwFq9smCA+DqbG2zKMXzeOdbCC8+yLude9Y8XHEEIIIYQQJ54lpwLpdJr6+vpZ77v88sv54z/+Yx555BE+85nPSIVOgeiEl/t4rvaYZZmoDNDKKOxqOnPwU014yfC14w0HdN49WPRjFpOe+ot7VbzB0cfzy/Lvv1wVTQFodH5/Phh987/WFrsK20ofs1Z0JP8PrNzlt5rNZbnFGW7l5mmBHoBbtQ0/Ofv3ZQyDbONpuZtdPxnCz67vNse+fx/NrWgFkG0+c1rl33L5ibrw+yHhe6sQ7XUKRezIVqzB6lzephMe7il9OLsGODf6hys+hhBCCCGEOPEs+Qq0traWnp65V3j58Ic/zB//8R/z6KOP8ld/9Vek0wUsGzhBFSvMmWwjWLWqEqXIbnpZ7niDj4wz+HgR2ldWydTVgbRavQqjIF5FYIZVb35iFK0Kc2EeRNNoK3ytGUNRVLBwtchSwpn1FOQA6Gg+zDG8woc5xx1t8ZuaEZzanbmbXlkD2abT5q3uCZK1eKmw+s4bDuj5t/U5jFcHmiP3DNDxw4Hcl8yp3YNX2Tr/AxfLtPAT4WBwbbtouzC/kFCBSbRnE7H2nRjpeO7zQW0a56R+CXTWEc/zOHDgAAcOHMDzvBmfa2+fZX6VEEIIIUQRLDnM2bZtGw8//PC820wGOo899hh33333sk9OhKaFOdnCta7lZkIYq9giZMfJNp6eu91x1wDuyMpnU6wF7U25AF9Cm8yKKYWfmpjDYQT48bGC7HZqlY/Rv/jQcDEhzXoLcmBKmBMo8IsR1k15zSyxAMSt2YVTswOnegeZllcuqjIs23AqeuJ1euy+EZxBb4FHlBY/G3DoW730/Go09zmnZidO/UmFPU5ZQ/7jAla+AZjZOLGOHUS6N8FEC6MudyTQWUfa2trmDWxaW1vZsqW4K0MKIYQQQsAywpzXvOY19Pb28tvf/nbe7T78HcKJyQABAABJREFU4Q/zgQ98IPebK7F8Oj7xNdQK5RYmzNHofJvVKs57AfAqWnJVAv5YQOePBmZd1r7UTQ9zVnf2j1fWmPu4UBecfjK/dLUxsLTX2XxhzboMctDoWPi+U25kRUuzL/aIS2KYOI2n4TSdtuhV1HS0DLdqe/ixq+n6v0MLPKJ0OIMeL371GMNPhYPgNYpM0xk4jfsKHqR6U8IcLzk6z5bLo1DYw9XEOrdLoLNOtba2smPHDiwrfO9ZlsWOHTtyfyY/L4QQQghRTEv+ieMNb3gDWmtisYV/c3/ppZfS3NxMV1fXgtuK2Wmlc2GOcgp4UWkEucKA4+dvFJ1SZJvPwHyxD+U7DD2eZvCRcapenlzd81ihYEpBkV7FmTkQzs3RKBQaPxHO9ljJayOwXIJYeKGsRi2Us/Rw6lzzohmDjNdjkAOAHeSibsMr0vtjDfJLp24v9tBhlO8y8NA4tWenSLQWu4VsZcbbHQ7e2os3NNEWathkWl85bXZUIeloisCOY7hpgtgYWvkoXfiw1szGiXVuJ7PpJTCDaYHOz7N3Ffx4ovA++MEPkk6nicfjC2+8To53wQUXkM1maWlpKdoxhBBCCFEYSw5zysvL+f3f//1Fb/+2t71txue6u7s5evQoZ5xxxlIPf8LRMS9/UVmEeTmw+pU5EC7lnWk6g3jHgwB03j1I2c4YdsX6Wd1qzdqsAEwbP1mDNdaLjjhoO4tyl//68BNTqnKW0GJ1vKmBzroNcpg+L6cYw48n9jzlo0KM2l0EK4JTtzdcyhs4cs8gOz5Rh1rt1+8iDT2Z5vB3+gic8KsT2AnSW16DjpYX76BK4Zc1YgwcBCMcCm6NVhblUBLorG8XXHDBhjveG97wBgB27NhR9GMJIYQQYmXWpBb4Jz/5Cbfffju/+tWv1uLw68r04ccFXOp9SphjuOmwzMRY3SDFr9iEO7wJe7gTfzyg465+tn64tmQvLI+XOTpluepV/toB+GWNWGO94cfJUYzB5YUwWgV4Ff252ysJc2B9hziTJlusAFTRhx8Dq9hm6FZtx+5/CcMZY+xAlu6fDdPw1vKSet954wHHfj5Mz335FkI/Xk1686vBKuD3wTn48SrsgYMAuFW9RQtzYPZAx9s0KsuWizWz0BDnLVu2SCuZEEIIUQLk/8YlTpfnAwMjW7jSauXb4WBXQ2Om+4kd/i2Z1lcVZHnfpcg2nY453ovhZRl+OsPAg+NUv6r0261GD2Q4/L18AOLHKlf9HHQBAiSNJtt0ON9ilTZRY6X9beFPX/XXGGPFDVj8+vwqa2a2cBVxU6lgSmue74K9Oq0aGAbZhn3E2/8TgO5/HSbIBjT9fuWaBzrukE/Pr0bo+49Rgmw+4HIrWsg2v2zVQlNzvDd/I1jdFsqpzrMvXtL2Ev6IlVpoePP/z95/R8mW1oX6+PPuVKlz7j7dp08+ZyLMMFeQUbwyggFBL1cBl+LFpURBAQHRq4SRSzAhSeQOKiiIA8ufii75AjKCXBlmgAEmn5mTuvt0zt0Vd3p/f+yK3dXVVdXV1eG8z6yzpsIO767au7repz4hJ3pU5I5CoVAoFHvP/p61KfDbsq1xJeipxkkO4RmEpkfJDI6BJjES80Su/D9So89syi/feYwQmcFb8hPLyX9cpuVMCKtz/56ayfEMl//vAtIJJptu2xBuZ/O7lxiJ+fxtrY5zQyKx+ycLBZRdgfF4ZxOK/e4PvuT8fdnJsh918NttIKhTpSVbdmX/oqgWj+am8NjF1KENeG2DZPpvIjQbpFvNfzWOl5YMv6gToTX//c/MOczds87ytxLIklpUArvvBpzuU01LZRR2AmMlG5nga4Rmd7d2iBdK5aNyAMSahTG5O+ecorEsLCzg+z6aptHT03Mo9reyskJra2vTjkmhUCgUCkX97N8ZswJp+MhYkO6hZcIIv7G/ShvJVsTkcdJDY6B76OkVopf/k9To7Ugr2tB9VcJrG8RpH8FcncBPSyb+fpkTr9pf6VZSSlITNkvfSrJ8fyIfNeC29JM+8t+qag3d4AGhZ1Os8DS0OqJHnO5Z3Lbl4I4P5mOdaMnm10/aCypFMLhDhQ5G5krPrsmtYpkjnNSu7KMSTs8ppG4QmvouAlj6ZgI/4zPyi91oRnOuveS4zdxX1lh9MFVSEFoKDbdjFLvnNNJqbqSeNX8ekR2MudyDtotpduVEjvVYV2nUlmLf8spXvpL5+Xl6e3v5h3/4h0Oxv2Yfk0KhUCgUivpRMmcf47fZ+Rqp9UReVIOejhG5eoL00GWk6aLZcSKXv0Z69Hb8cPMiBTKDN6Mn5tHcNPHzaZa+kaD79sb+Ou27kpXvJFn8rzhe2ic6ahE7HiJ2PESo3ygbkWAvuyx/O8nytxJk5tyS59xoT5CapjV/4qVl1hBeED2ip1pqFg5O+wJOVzayR4LxRAfaWhMjsvaQSiJHmh5+d1aseDrGWueujWOvZQ6A23kMNIPQ1W8jkKx8N4WXWeDYy7rRrN07r924x/inllh/PF3yuNQMnK4TON0nkcbupLdVIojKGQ/ueBrmyu5FJiiRo1AoFAqFQqHYCYda5jiOg2ke3EgDmU31gGDCvltodpjw1ZOkj1xGWjaamyZyJYjQ8SO7N5ktQbfIDN1KZPwbAEz+0wrJqzbtN0doOR3eUaSAl/FZ+maC+f9Yx1kp5HBk5lyWvxXURtEjguixUFbuWNjLHsvfShC/kNnUQloKDbd9hMzATXtS+BhAL0qxqjX9zm1Zxe6dzt83LrWhLzapXsses11NEXcgke8eZ652IeTuTayFU5RmtUcyB8BtH0ZqBuGJ+xDSZ/3RNJc+tsDxl/eghxt//M6Ky8U/ny+Ro74Rwuk+hdN5vOl1u4opicpZ6Wl4NKQUPl40jteyituyBpoSOQqFQqFQKBSK+ji0Mue+++7jkUce4fbbb+fMmTP7KmWnWnarXk45NNcicvUk6aEr+OEUwnOIXPkvUseaJ3S81n6czmOYy1eQjmTp3gRL9ybQwoK2GyK03xSh9boweqi6CY+b8Fj4epyFr8fxEn7JcxKRn7QBeCnJ+mNp1h9Lb9xMYZloD07HCG7bkT2dcMIGmVNDTRcvEifTP5GP+NInYugz+7/gdCPYTuRIzcfrT2TvCIyV7l0dj1YcmePuncwB8FoHSI3eTmT8XoTvkriY4eKfz3PilT0YscYJjcyiy6U/n8NeDKSqb4Sxe8/hdhzdMzGaY7eickoETmwtH4mT328DRc7y8jKdnU0S8AqFQqFQKBSKPeVQypwvfvGLfOADH+D06dPccsstB1Lk7Ha9nHIIzyB8Naih40cTCL/5QiczcBNIibF6FZGthOqng/Sole8kEaag9UyI2IkQwhRolqD1XBiro3Aq59oab+yIA+C2DGD3nsEPd6ClV9CTS+jJRbTkIppnsxHfiuF0HMVtH2l67Y4tkX6hXo6rI6psWe9ZKdLZgtcA2mwEfbx1t0a5r6imy4/XmwIzeG2M9XY0b5eFna/nO8rtVZpVyXBiPVmh8w2E55Aat7n44XmOv7wHq2vnfyrSsw6XPjqfj47zzRipY7fvm+uq0VE5XiSO27ZcVuAA4Ar0hQjGWFvDInI8z9t+IYVCoVAoFArFoeDQyZxvf/vb/Omf/inPf/7z+cmf/Mmy7TOllA0XPAsLCywuLpZ9bmxsrObt+a2FejnC2d02zMUIqROeGi0ROuHx+0ie+fHmdJPRDDJHbg1q6MTnMNamMNZnEH7Qol06krVH0qw9UoigMTt0zv3uQL7Gx9gnF4mfLzwvEbjtwzg9p/HD7fnH/Wg3frQbh9MgJcJOoKcW0ZPLSE3DbTuCH+lqWhedatGTiwg/EH211MvJDE7kJ5XaUgjjYvu+61zV6OsIqm/XXNyO3FjtqmtftSAQCNcMUhudFEi55+eaH+0idexZhMf+H5qbIT3tcPnjC5x9y8COtrv6cIqJTy/ipQJZ4odag0LrzWrHvg3CzTQ0KscLJ0gPX978hCvQlsLoixG01RBCNvb91vW9jW5SKBQKhUKhUDSPmmVOIpHAsqwd1aKJxWL09fXVvX45coLmG9/4BqdPn+YFL3gBR48eBeChhx4ilUrR1dXFyMgIoVAo396zUXz+85/nE5/4RMO2J9zC2LzWNezMPNZyb8O2X3HfUic8PUryxGMgZF6kNBXNwGsbwmsbIpONRDHWptDXp9DcTMmizorH8reS+YLJ9nxW/ABO53GcajriCIEMteCGWnA7mt9mvGqkxJp5OH9XT1QfWSP17PvoCozzHQ2fSNbCl727yz7e6OuoksjZ1Ja8KIjL7p4jPDmKYHdrmGiOhWfZCN9FOKmmdpHbCj/cRurYs4hd+DIA6WkH6cu6WpZLTzLzb6vMfWU9/5gXbic1ejsY+6ngtiR3AghfhwbXrtEWIujzuyNwilEpVgqFQqFQKBTXDjXLnOc973n8yq/8Cv/rf/2v/GOPPvoojz76KD/3cz9X1TZe9KIX8aIXvajWXVckF2nz6KOPMjw8nBc5v//7v8+9996bL4Z87tw53v72t9Pb29tQofOCF7yA22+/vexzY2NjvOtd76ppe9q6hX6lFe9YMAlyemYAmiZ0fDMDIpjceLG+vY0YEBpeSx9eSx/Ip6CllhFOCs1NE5p5EID5r63T9YMxhCbQYxoseYDAHnzKnkc7NBJjbRI9vQKAyIQx1juqXldzQvh6CnQJ+1DkQGOvo5pEDmBe6MC+cQFMiR+NY/dPYs0O72r0kpaO4sWCVuhaahlvH8gcIBCbsT6MxBxI8NISI1pjx7R1j/G/WST+ZEG+uq1DpI/cuuc1pzYijTBe9nil6eBHEjsqOq+lo2jJGH40qMGkJUz0leZ351IoFAqFQqFQHF5qljlSSqQsrUNy33338clPfrJqmbObFMuZd7/73Xzve9/j137t1zh79ixf/epXueeee3j1q1/NRz7yEfr7+xuWctXT00NPT2Pb2BqTwWRiL4SOFyv8ku629u/6/qpGCPxokALjkZUbyUUycy7r59O0XRfJFmx1gvoXvgN689LUdhtz6VL+dmhhoCbRIBwLwikQIMMeItX8LMtKIgcadx3VKnIAtLSJdb4L+/pF0MBtW0G4JuZi/64JHS1TSDPSU8t47Ud2ZT/1IIuEi5fyMaLVi+/MgsuFD83hrgY1XCQCu/8GnO5T+1auup2jgbwCnLblHckcgcCaHyR99AIIcI+so89HEI5Kg1IoFAqFQqFQNIZD0wfV94NaILfddhvf+c53+NrXvsb4+Di/8iu/ws/93M9xyy238LrXvY7Xve51eJ7H7/3e75FMJvd9cWRjsgX9SiGVxumZwe6cr7BGYyiWOV7LPpI5G7C7T+Vvz381iHDQY4XTWribixofVLT0KnoyqCcjMiG0GrpYAWh2QWrJsFthyd1hO5HTKOoROTm09RDmk535lCuna57M4Bi+sTvnkZYulTn7ig0yp1p82+fKXy/kRY5vhEkd+yGcntP7VuQAuK2DeYHltawitZ0VE9btCMZaNu3JkLgj65VXUCgUCoVCoVAoauDQFEDOReQ85SlP4e/+7u/453/+Z8bHxxkcHMQwjHya1bOf/WzGxsb4u7/7Oy5dusSNN964xyPfnmZH6EjdwQ8H3XW8cPu+KVJaDq91EN+MojlJ4ufTpKcdjGKZ49nICusfJMylQkFVc7W75mgR4RRqlMhwc7veHASRk0NfiiAv+7gnVgHwWtZJRZ/AWuzHWOlpaJSO5pkIx0SaDlp6ZV8UQc4hiyLavGT1Mmfy/7dCejKoz+RbLaSO/zDSOAApRpqO034Ua+kiaBK3dQVzdWft6a3FftyWVdB9vL4k+kwMLbm/UswU9fP+978fz/OaVni6Gftr9jEpFAqFQqGonwMbmfPd736Xb37zm7huEGGQi8x52tOexi//8i/zne98h0QiwZUrVwAwTRPbtjEMgxe+8IX4vs/ExMReDb9mmhmh40bj+dv7OSoHACFwugsdy+b/c32DzMmUW+vg4TkYq9luO75WU62cHFpRVzQZaV5kzkESOTmM2Rjm+U6ws+eSJrF7Z0gfvYAXSlZeuUZy0TnCd9Ey+yd6Q2q1R+Ys3Z9g6ZtBnRgpdNIjTz8YIieL21kofu627TxSSngm5lK22L8A99gq8tDoZcXRo0c5fvx4vkbfYdhfs49JoVAoFApF/RxImfO1r32N17/+9dx11118//vfx/M8NE3D84Jog5/7uZ/jJS8JJm9/9Vd/xVe/+lUALCuYzD788MNEIpGGd9TabZoldErr5eysJXEzcDpGkVoQZLb87dKJtvAOR5qVuTKO8IPz21jrCDru1EiJzGlSZM5BFDk59KUIoe/1oU/H8mlXfihNeuQimd5JpGjMa6hlCkWPtX2UarWxZs52pKZsrn6uMP7M0FPxw227Mrbdwg+344U7srdTeFaq/HJmhtTRJ0kef4z04Bh25/yWqXjmajcim+Lot9v4neldGbtCoVAoFAqF4tqirjSrL33pSzzyyCP5+5OTkwC8+c1vLru8EII//MM/rGdXm7h48SKf+MQn6O/vZ3FxkQ9+8IO87nWv45ZbbsmHBUejUV7ykpdgGAaf+tSn+MM//EPm5+d51rOexYULF/jXf/1X2tvbGR3dxy2ot6BcypWeiqKnt2m9XQNeNNi2FBp+5AC0utVNnI5RrKWLSEcy84W1/FOHpWaOsXwlf7vu1A/PCFouaz4y5iCRu9qp6SCLnBzC0zCvtKMvRHBOrCBjbhBh0bEEAkJzOy9YrGfCZJvGB6lW7JPPpSKZM/35VVKTDl0/ECMybJbUGvNdycJ/rjP7xTWkE1gvp/MYbscB/GVfSnyrJd8xzmtdRV/cnGaa6ZvEDwVSxmtZw2tZw+maLZuKJ6SGudqN3TsNgDscR1/ev6mrCoVCoVAoFIqDQV0yZ3JyMi9wirn//vvLLt+oIsOu63LPPfdw6dIl3vrWt3Lq1Cl+93d/lw996EObhE5nZycvf/nLGRwc5OMf/zgf/vCH+fCHP0w4HKa1tZX3ve99De8+tR1//q33cPbs2W2Xe47+4orPG5MtoEm8o0E6lNuy2jCZI5EIX0fqPkL6GMtXcLtONGTbu4nTfRJz+QpClkZL+KHWLdY4QLgZ9EwgqLR0BM2uL21FINDSkaBdsuXjnljDuNRWt9CpV9aUO79r2dZH7qvuOtqpyClGi1tYD/bijq7hDWXTiPTGpKp5kUThzj7qvOaF27O6T+IlfRa/Hmfx63HCQyZdPxCj87YoyXGbqX9cITPvFq3XQWbg5j0ceX2ITJzw5HfQU0uFB/3ywau5mmIlZFPx3JY1QrPDaNkaVU7rMnb3TNHKtV1vlWSlYm/58pe/TCaTIRQK8ZznPOdQ7K/Zx6RQKBQKhaJ+apY5d9/dnF/by2EYBjfffDM/8zM/w0/+5E8C8Pu///v8wR/8wSahk2s5/tM//dPccMMNzMzMcP78eUZGRrjxxhvp79+ftWC2Ezk59OkY3kgcBPjFk8EdIhBYc0fIHLkCQGjmIfxoz75Pl5BWjNSx2wlf/TaaE6RaOe0j+7/mTxUUdznSUtEKS26PtdhPOnIpOG8Gk7gSjMv1CZ3n6C+uWehUe37vlEaKnBwCAV7hddITOxeFUndxOoIOZVJoOJ3HdrzNRiFDraSOPwtz6RLG2iRCBqlW6SmHqX9aYerzK1CUfSUBt/M4mf7rQTtAxVOlxFi+QmjmoYIMlmAu92KWKTIvhQ9acOBizcK81I7Xn8QbSGQ/j5Okjj6JtdiPb9m47QU5JOIm1pMdNQ3vueZLlNDZp/zFX/wF8/Pz9Pb2NkV8NGN/zT4mhUKhUCgU9VOzzBkY2NsaKk9/+tO57bbbAJBScvPNN/O2t72NO++8s2yEDsDx48c5fvw4P/iDP7hXw66K5+gvRpoe7vEgCsO40oawy0+KhKshEgayxcUPpZGaV1cdlXIYyVa85W7czkWE9Ald/RapE/9930/Q/Gg3yZPPxly8mC2MfGrfdAbaCcWRAnp6ZzJHT8ewZoex+68GE8+hJC7NEToHWeTk8DsLBbUbIXOcjoW8GHA6j+27znF+tItMtIuM9xSM1auYK2MFuVgkcrxoN5mBm/EjHXsyznoRTorQ1AMY8bnCY7ZFaHZ4y2jH4ogs4WhoKRPtSjv6Yhjn5Aoy4uWjdIrRZ6IYV9oRMrjO/JYgBVSLbx+NpYSOQqFQKBQKhWIjB7IAck7U5NK3brrpJt72treRTCb50Ic+xAMPPJBf9tFHH2VhYWFPxlkLOZHj3LCE35vG701jP3Uev33rbkzaWrbVtNiQqtEArMUBRCbYvp5Zw5p7ZJs19gm6idN3Dqf37L6XT9WiJYsic3YocwDM9U6s2eFCUd+hJO7xtbq77FQjaQ6DyJGWh2wJqtto6TCat7MW05uicnrO7HiMu4Zu4nYdJ3Xiv5M4dQd292l8I4JvRkkfuY3UsR8+cCLHWL1K9OJXSkSOsdJFZPxUxbTVjTInh7YewnqwF32qUDAbAB/MCx2YlzvyIsfrSWLftIB90wLuUHUdzHbz3FYoFAqFQqFQHDwOpMwpR7HQ+fCHP8x3vvMdvvWtb/EHf/AH/MEf/EG+hfl+pFjkyFjROE2Jc8MS7vB62Ym2WC38outF4pue3wlCaoRnjubrO1iLF9Hjsw3dh6IKpMxH5gjXQLg7Ewg5mil0DoPIAfA6Cl2I9MTO0w63jcqRPvjVtQRvJjLUhj1wI8mzP0Hy9HNxO0YOXAScvjpJ+Oq3EF4g54RrEJo8Rmj+CEJWlsAltZKc0j+hwtcwx9qxHulGrJuIdRProV70+YKE9SMOzonV/H13dF0JHYVCoVAoFApFzRwamQOB0HnnO99JMpnkT/7kT/iTP/kTVldXec1rXoNh1FXredcpJ3KEY6Ingq5VCPBG47jXLSP10omdtmYVJuMNjswB0Oww1kIhrS40+R1wt44UUjQekVlH+MF5oaWjDe0+1Qyhc1hEDoDf1TiZ4+tO+agc30VfnSQ0cT+xx/6V2Pl/w5x/AvzmtJKvmQMmcQCEmyY8/b38fX29ncjYaYxkdWlzUi+8F8IpL3609RChh3sJPdyLliwIWKn5OGeWQS+9xpTQUSgUCoVCoVDUyqGROVIGX46vv/56XvKSlzA5Ocn6+jof/vCHq+p8sxdsJXLCk8cJTR3DXOgvTLS7MthPWcCPOfn1c3VzgHzdnEZjrHbnxZLmZghPPQCyvsm+onaK6+U0IsVqI7spdA6TyJGan095FK6Blqmvo1iwLTcoMF4UlaOlVwKB8/i/Ebl6P+baJEJ6CN8hNPcI0Se/jLEy3ohDubaRktDU9xFeUK9GX28jPHMU4Vcv+0vSrNza/oS6x9aQ0exnfSaEudhXeE4JHYVCoVAoFApFDRwamZOrn/Ptb3+bL37xi0SjUT7ykY9w4sT+bKudm+i6x9c2iRzNCQVdpZb7CE0dAy/762/Ew7l+CSkKE+2SujnR6iYCtSAQwWTfDcZgrM9gLF/ZvKCUaOlVzIUnCI/9F+GJ+xB246OFrimkxFifzt/Vd9jJaivKCZ3iQr+18hz9xYdK5AD4bXb+01JLxXYUIWX3zOCHgigf3wijOSki49/MC5w8np5/TzQ3RXjyO+WvPUXVmEsXMdangjuuTmj+SO0bqZBmVQk/ZuP1J7N3BOHpo1hL/ZuETq4w8nYooaNQKBQKhUJxbbM/c4/qJJPJ8G//9m9cunSJj33sYxw7dmyvh1QTmh1COKWdTfRUDC0Txo+WFyPacghvKHjO6ZxHj7c3NBUHQPNMQnPDZIbGgKBduRfrQeoWRnwOPT6LnphD25CCpcfnyAw+Bbf94NXU2A8Yy1cw1rMdcTwdLbN7nY7M9U7QPezeQB7JFgeW648+OWyIopbkXmwNL5REz9Qp10Rx1FOpsMPVMRLtGOvtaKkY0spg98zgxQJRa809its+DNqh+uhuCsbKBKGZh/L3Q/NDCK+O17FoHdlqQ06o14ImcVvWMeLgtqxuv7xCoVAoFAqFQrGBQzUjCIVC/Oqv/iq/8iu/wsjIyF4PpyqMK23YHRkwJV4sjtM5j7Uc/FIrhU9mcKwgcjyB+XhnviMKgFixEPFsi/JwGi+2jtGA4qybxplow1vpwu1YQkiP6KWvge9U1EbCdwlPfgdnfYbM0FNB374FryJAS68Smnkwfz80dwQhdzeQriR1aAfuLdeqvJbonMuXL3P8+PGa9/Ul5++bEqGgrYfQZ6J4A0nQJJnBMSITpxB1dLQylntw21aC7eYEqARr7gjGWmeJjBV2mPDUMdKDY3gta2huBnPp0v7ufLUP0ddngppfWczFPox4R13bMuLtONm2415vEn2ypSqBriUsjLFW3NFAzDk9Mzhds6Bl5Z4nMC+1V9WqHFCtyncJ13UZGxvb8vmJiYkD8/1CoVAoFArF4ebQpFnlOHLkyIH6oiVsHfOJznw6hdM9ixddz4scL5btUuUJzEe60NZLv+gLBPpEoXCn0zVbd72T7bAWBhF2sH+xUeT4Aj3RijU3SHjsFMZaR/4pc22S6IV70BPzuzKuQ4fnBGlqMqipYqx0Y8TbmzsGUd85lBM5G29vh+M42y+0Bc2a1BpX2hFrwfkvTZf04DiS2rtN6XYEfb3o/fRFUCNrrWtLKWAtFupnWQtPgFf/63WtoSUXCU/cj8i+gMZKF+ZS3zZrVdiea6Elg9blMuLhDcWr/sw1ploxxooKLWdFjkgaWA/2oC9UF+2lRM7uMTY2xsTExJbPj4yMMDo6CkBXVxe9vb10dXU1ZWzN2F+zj0mhUCgUCkX9HKrInIOKthJCH2/BG42DgPTARGlq1RYiJ7/+Uqgp0TlCaoRmRkgfuQy6j5YOoydb0ZMtQaelosgRfXYEPdFKpm8KdC+o+XHl/+F0n8buuw60yu1/Dy2+h7l8GS29BkJDCi1IQcvf1tCTC2jZekNaOlLSUWxXkTtLhSsnb77s3V1VhI5p7qzlejMidIQUWE90krlpHkI+fiSJ3TtdV90Va2GAdDionxKaOYq+TXFrzQ6jr3fgta0gPAdz8QJO33V1Hce1hJZeIzJ+b74Wkb7ehjU/tONUVHOti0z289kdXcfvyGBe6ETY23+uGVOt+fUA9NkoxpU2hF/dbytK5Ow+IyMjnDx5ctvl7rrrriaMprn7a/YxKRQKhUKhqB8lc/YJ+tUWZKuD35UB3ata5EAhOse9bhkIonP0RGvDa+cA6Jko0SvnALltBxgj3oGWjpHpn8CPJhCAtfgkemKOzJHb8MONF077GjdDZOI+9ORidct7GqHpo7ueXlWWGk+dSlE41QidelKsNtIUoePoWE90Yd+wABq4HUvo6SjGemdN29Fci8iVoMtetdeptdRHqnUFBFiLF3C6ToBRR72WawRhJwmP/RciG8WkJVsIzY405HNRX2/HtFI4nQsgwG+3yTxlDvNSB/ri9rWtjKlWtNXgvdMS1aefKpGjUCgUCoVCocihZM4+QSAwnujAfsoCRLIdbaoQOTmaFZ0DIPzqo2o0N+jQ5XYsYHcH9SH09CrRi1/BN6N40S78SFfw/3A7iEOX+QeAyKwTGb83H3GzLRJCc8NobjPrDBVNcmtIs6omnaraCJ2d0gyho8UtjEsduKdWAMj0TqGlo2hObWKlVqmgOSGMtS7c9iWE72ItPIk9cGNN2zg0+B7m0mW09ApIP4i88f0gNVF6IH00J5VvQa6lI4SnGidGBQJrcRA92Uqm/yrSdMCQOGeW8ebTmJfbEV7lfdUicUCJHIVCoVAoFApFKUrm7COEp2Ge78S5fgkA8/HOqkQObI7OsbtnkcUtdDegZcL1d+OpEYHAXOlFS7aQGZhAhoKir5qTRFtNwupVAKTQ8SMdeJEu3PYj+JHaoh32K3pinvD4fQg/iBAQroE1O4xwjUCaZP/JotvCttDt3eteVRZZ9mZFaqmLc5iEjjEfxW/L4PelQPfJDEwQnjiB2OUyZOZSH27rMmgyKITcfQppZgtX+x5aahkts47wXYTv4Bth3I5joO0/SaplI9T8SFdt3e5qjHATdojw1DGEbHxqp55qITJ+mkzvJF5b0JXK702RabOxLnSg1dPpqgxK5CgUCoVCoVAoNqJkzj5DS5hY3w6Kc4oaa5gUR+fIUBq7f7Li8uGJk9vW6mgkuh0hMnEKp2MBL7aOH0oVOrkAQnroyUX05CLm4pOkTvwofqSjaePbDYSbITz+TYQfiDUtEyY0NdrkiJvq8CNFUUNVnHq1iJzidQ6L0DEvt2O32siIhx9O4XTPYi0O7uo+NdfEWO3C7VxESI/IpXtw20fQk0to6ZV80exi7Mw69uBTdnVctaLH54mM/T8A3NZBMoNPQZrby0sttUx44n40J1l5QSlACvRUFGvuSH0tyKtE+Drh2aO4iRUyfZOg+xDysM8tEfpuH8LZmURSImf/8kd/9Eesr6/T2trKm9/85kOxv2Yfk0KhUCgUivpRMmcfUqvEya+HwBhrxblhuarlvdhaU2UOBEWUreU+WO5DIvFDKfxwEi+cxI8kg3QFApcg3HRTx7Yb6PGZgshJtmRTPfZX8WeJxO6Zxu0sRDqIVOWPhnpETiPWrYVqJsE7ET7C1zCf7MS+Maif43QtoKVaMJKt26+8A6zlPtz2ZdB8NDeDtXih4vLaPryOzKWL+dvG+jR6Yp5M/424nce2jNIxlscITX8vL6yEaxCaGUE4VvCZKbW8xNmNemHbYcQ7wNfJHLkSPKDJbYuKK1FzsPnmN7/J/Pw8vb29h2Z/zT4mhUKhUCgU9aNkziFDWwljPtiNjJZPsZKaxDuxBhBExuwhAoGeiaJnophBhgKpkQv44WBc3iFIs9LjhXbs1mLf/hM5mkdmYBwvFs8/pk/F0KebK/n2ip1G8GgJC2O8DfdYcE3Z/VfRx0/vbiSIZ2At9mH3zpQ+blvoqRhaJoLTOZ8Xo26s/jbcu4Fw0+jrG8buu4Snv4e3OkF66BZkqEiI+R6hmQcxl6/kH9JSEUIzo2juzrqgbYVE4nTPAhJzqbrrtrBOgD7VgnD3X3qbQqFQKBQKheJwoGTOIURbt2CLWjsSiTcSB9PHC6WQyD35FbscUnh5weSFWst26hFOCmv2YQDs/hurSs3YM6RET2Rlji/Q0vtrrL6ZIT00hrQy2QfAuNSOPnttiJwcOxU6+nQMvz2D35lBGi6Z/glCU8d29boyVnoAgdRdtHQEPR3LCySJxOmaC24LDbdtaNfGUQ/GygQiW5XJWOkCIYNII0BPLhK9eA927zmcntNBmuLEfeip5aL1u7AWBne1y5vbuoLTFVy7XjhFeGp0W6HjdizkRbRIGRhXdzdCS6FQKBQKhUJxbaNkzjWGQCDiJrIzA4aHNBzEPqnf4keS+VotfrRn0/Mis0Zk7BtoTjBh0hMLpEeejh/tauYwqy7cKux4PsVFT8V2vThuLXiROOnBcdCzndMcERTcblDB1oPGToSOQGBe7CBz8zxYPl4sjtuxgLmye2kKQVHxzdcIgBdbRxpBZJ7XOrC/2pdLWRJhY670BF261jvI9E0iLRshfUJzj2KsXkW4abRsRyp8gTV3BLPGNvD14EULkWp+NEF6aKyi0PHNTNCtD0CCebEd4e8PSa5QKBQKhUKhOJzsn9mlomlo8YLD2+tUq2K8cKEArxfrLnlOSy4SvfyfeZEDQS2QyJWvY2S7Ye060seafpDo5f8kevk/CY/9F1p6bcvFjaIUKy3Z0owRbotE4rQvkj5yOS9yRNLA+n7PNStycuykfolwdMwLHfn7ds8s3h5dW25rIYrF6RjdkzFshZZaQrMDUaIlY/l27rmuUOZyT76Vmp5Zy4sc4ZiEr55sisiRSPxIvOSxnNCRwiu7fKb/ar6Yuz4TQ1u/tq8lhUKhUCgUCsXuo2TONYiIFyJxcmkB+wEvUuhQ4xVF5uhrU0Su/D+EF9QA0dJhtFSQCiSkT/jqt7DmHgNZbUPtegbnEB6/F6u4cGtinsjFe7CmH4Rc9EARemKucDu1tzJHInFja6RHLmD3TeUjoLSlEOaD3YiMCtKDnQkdfTWMPhkL7ghJZmC87OR/N5Gai9eyDoBvhPBa9le9HHN5LH/bWCsVM0JqWAuDhCdOomXC+cf1RAuR8VPomeakKUrTRppBZJNIGuAGF8tWQsdtXwyiCgGR1jHGVXqVQqFQKBQKhWL3UTLnGkSLF4qG7pfIHCl8/HAwIfLNaFALR0rMxQuEJ+7Ld7DREy2Er54gfPU4xmphMmjNP0746v3gly/8vBNEJk700lcx4lk5I4NIAQCBxFq6SOzJL2MsXS4IJSnREwvBbU8vmZw2Gze6TnrkApmhMfxwobORPhnDeKwT4amPgWJ2InSMiTZE9vqSlh2Isybitq6ACM5Bt30ExD56bz0XY20ye1vDiLeXXUzPRAmPn8KaGcaaGQ7qD/nNk41epBAhqM9HsB7t3lLo+IaN3VMoemxc7ED4++g1VygUCoVCoVAcWtTP8dcitgaOli+CvB/wrXQ+TQGhYS48ibl0Gc0pTKyMtQ6s2SP52jPW3BE0O4TdMwMCjLUpwlKSHnl6xVo2VSMlxsoYoZmH8u3F8XTC00fR0lGcjoWg0KwmEZ5NePp7uPE50keehhGfQfhBJJGejO1ZkWkvnCi0Ss4i4gb6eCv68t4Jpv1OvTV0hBRBu/Kb50GXuG0rGKtd6OnYLoxyM25LIe1P+C7CTiA8B+FlEK6NcDPZ2xmEZyOFjh9ux4+044c7kLtVX8f3grbi2evIiLdXLGAsEE1JqdqIFD5uWyFNTVsLoSUsrEe7sa9fBEPiRxM4XXNYi4PY3TOgZUXzTBT9Gk9VVCgUCoVCoVA0DyVzrkEEApEwkB12UARZ8xD+3rbMFr4e1MoQoNlxQtmOVTnMpV7Mxf4SKRIUge1F2CEyAxOg+xjr05hLl3C6T+5sPG6a0NR3MYpaKItMiPDUMbRswWhruQ9jvQO7ZwavNeitbqxPEb28jrCLJFSifARCM/DNQvqXSBroV1rRlkP7poPZfqZuoWNr4AnQdzHtb6t9F0WFmMtXSooNb8laoeaUb4QDuRNuxwt34Md6di543AyRifvQs4XDkWCsdldeZw8Iat9M5FOmyGiIRBBllRc6NwfRdvmUUK3wHuvzje0CV8+5t5OoMoVCoVAoFArFwULJnD3iy97dPEd/8Z7tX6T1XJ1RfDODntnbdtSaEyI0dQy7/2q+Ew+AlmjBXOnBSG5dh8JItsHsCJmhoB6HNfswXrQbP9JR+0B8H2N9Cmv6+4UuOoCx2hm0Q94gvTTXIjxzFHdtLS+UtMx6Yb21TvT1vZM5xePV5iINicb5snf3jrdxUKhH6Lgj62Dl0gJb0dLNu7ZCsyPY7ixu+1I+3aoWNDeNFk9DPEgdkkInPXwbXp3tzbX0GuHxe9GcrPzwBaHZkabVv6kWicTum8JrzUY2eQLriS6ELEhPLWEF6VaGROrBZ5SeaMHLRkN5HWm0eGM6A9bbWU3RXO644w7W19dpbW1OnaRm7K/Zx6RQKBQKhaJ+lMzZQ/ZS6Ih04a2Xpg17LHMAjGQr+tgZnM45pABzrRPNrk4+GIk2vOVu3M7FoCjyxH04XScKUqdS7RDPwYjPoq9NZ9OjiuruuDqhuWGMRNs2Y29DmzgZ1NOwAgmkJ1qyaWF7FwVTUr/D8He8vWtJ5OSoRej4UQdvMBuV5QusuaEt338vnEAaDsKx0FwTPGPH54rwdULzQ5jLPTidC8H2PR3hGUX/dHCD2+geXiiFH0rjZ/+fb1cPCOkRvno/6eEfqFno6OuzhK/en7+ehGsQmhrdc3FcDqcrK8AAfDCf6CwrZoSjIQ2vSOa0AUFdJL8zAw1orKdEzsHhNa95zaHbXzX7mJiYqPj86OgohqG+XioUCoVCsduov7Z7zF4JHZEuRGwUp+LsNcLXsRYH61rXWhzAjyTww2k0J5lP1ZJCx4t04ke78WLdeJEuhO9grE2jr8+gJ+cRZTph6fE2QnNHgklvFWhOmMjEqaCOjgRzqW/v05mKInPkDtN+rkWRk6MaoSOROCdW8p3CzKW+fEreRpzWZeyBDTN/XyBcC80xEY6FcC30VLSuejuaaxGar0K+eGYgTNcLxyANBz+Uxm1bxmtZQ0hZk9ARbgZr9hGMlbH82a+lw4SmjqF5ZsV19wKnfQGnez5/37zQgb6yhUR2NIh4oPtIfDTPREuH8cNpZIuDtDyEXX/KqhI5iv3O6OhoxedzoufkyZ2lOisUCoVCodgeJXP2AXshdESmaJK/j2TOThBSIzRzNBsdkyl63MNILkByARbypXnK42noiVaMeAd6orVmGSN8HWuhPhm1Hb7h4EXX8GJx8DVCCwOIbSbHJZE5ev2ROdeyyMmxndDx+pLI1qDotciEMJd7yi7nWynsvsnNT2gSaWXwis5dBwhNHquYZthIBFmh5FroiVYy/Vfx2laqEzq+j7l0EWv+8ZLoNj3eRmhmpGLB473CbV3G7pvO3zcut6Evbh05JFwdSfAeS91DeBp6oi3fJc7rSGPM1VfsWokcxUHAMAwlahQKhUKh2CcombNPaLbQKU6z2k+ROTtFc0JExk4jrTReJIkXTuBHkkjTyS+zUc8Ix0SPt2Ek2tBSe9d5aiMSiR9K4cXW8WJrJW3FAVKROKHpymkrpWlW9UXmKJFTYCuhIw0Pd7TQSSo0P5TvulaynOaRHhzPF87VlkOIjI4Mefl/GwsnO11z6MmWpp+XAkFodpgMbCt09PUZQjMPodnxwoOehrXUj7HSvW+uqWLc6DqZ/kJ0lH61BWOmpeI6wim8p1J3wTPRE6043XMA+J1pqEPmKJGjUCgUCoVCoagVJXP2EU0VOq4oFPOsUeZ44QQg0JtY2LUWBAJhR9DsCGa2a45vOPjhBF4kiR9OggQ92Yoeb0Ozw/tqsumFE0GKS2y9pBj0RqTpkh6+hDU/hLnWVX6hHaZZKZGzmXJCxzm2lpdlxloHemqzFAi6JV3N11QScRPzfGmRXYkEw0eGPZyTK8ioi589Z5vV3ryY7YSOsBOEpr+PkS2YnD0IjLVOrMX+bSPH9gKJj9M1j9M5nze7+kwUY6KK6CenWI66YIOWiSBcA2m4+B0ZpOaXStRtUCLn4PJLv/RLLCws0NPTw6c+9alDsb9mH5NCoVAoFIr62X9x79c4zZo8C0S+bo40HHwzs80awSQo0ztJeuQS6ZGLuC2ruz3MhqG5Jka8g9D8EJGJU0SunsJa6ke3I/tL5ISSpEcu4bYvbxI5Im6gj7dgPtSFWM3WYtEkdv8kXihZfoPFHY1qTLNSImdriltA+xEHvzcV3PG2TrPzYuv5zke4AvOJzhKRA7k0Jx0tbmFMFoSQ3TuF1Dz2gpzQ0dc6gvtSEr76LYSbJnLl6yUiR0tFCU+cIjQ3vC9FDoDTPRdE0uSioxbDGJfbq/ocKI7M8SIJJBIvtk6+NaAGfmv1clyJnINNKpUimUySSqUOzf6afUwKhUKhUCjqR0XmXMNoaxZeiwsC0oNjRK6e3NR6O4evO2QGx/EjBWmQ6Z1ET8WqLhCsaBACCrPHrZHIoF16brVU4X1SoqZxyGhBupkr3VteD36oMDkyrrSjZSpfN9piBDG8jox4+OE06aErhCeP70ntmZzQSVsZ/HAKIX2Em0FzchJLIzR3BD1enRTZS6QolZrmk51Vj1lbLxS0drrmcVtW85FWwcZBuOo3EoVCoVAoFArF7qO+de4zmlk3Rx9vRSSDCaUMZcgMjAdpHhsIokUulIgcAAyPTG+ZQq47RGrenkUh7DV6Jkp44gTGaifCLZ3syxYX72gc58YlZHu2BpAvsGaPlK2b43TOB1EDAI7AuFK5vbqieoojKmRRxJNwt45GkUUtv7WsWCuO8NmIkALzfFc+tcePJMkMjiHZeYv5ehCIfKSXROCHWgsBKU4II96x70UOEKRe5gbuaGBU/3pqCQtjrJCOVSxyRNzEfKwLLVG+g5lCoVAoFAqFQtFIlMzZRzS9o5WnYT7WCU4wAfNiceye6ZJlnLYl0sOXkGY2+iCjYTxatE7rGm7LSsPG5FkpksceJ3ns8a1ThyogNZfUkUukhi/i6872K+xD9HSM0NwwkcvnCI+fwlzsQ0tvbpUsHIPw1RNl6+W40XWc7mz6iwTzfOeOWiYrCmxKjSmqRVSpVorUitLmiqI3KgkdLWViPdYV1LciuEYzA1fLStfdRiLz6ZjSioHQQAvk1UGSr5oTQl/vCO6YPpmnzON1p6p+TY2p1hKhI+Im5uNdWA/1oK9u0dJcoVAoFAqFQqFoMErm7BOaLXJyiLSB+XgnuR/73c5FnLalfH0cu38yX1tCrFpY3+9BXw5jXGrPbyPTOxV0dtkhEondNxXUdtF9MoPjNU8Snc4F/GjQwcrund5+hX2MQKBnIlhL/UQmThO5dC6Iwom3Yax1EJk4VTYixzfsIL0qV9x1vAVtNdTk0R9OytY4KS4sXanwbVFkzsZUnIpCJ2FhPd6Vv0a91lXsvsmmCx1puPnPAt8K6vlILRs9pu1NtFC9WIv9kIt8M32cM8s4Z5aRRnWfN8ZUK9ZDPVgPdwcSZ3l/FVFXKBQKhUKhUBx+rhmZI2Xzf8mulr0SOTm0tVCJnLH7JoMCxx1LhWWmo5iPdCGcILpDWwijLWR/hW5QupUXWytJ5ZKmg907VfX6EonbulLYXutqtvPW4UDzTMy1LsLTo4RmR8oWmJUikGA5caAthdCvVm63rKiOrYrVlqRZbVFzKlguKwok+UibYioKnfVQkHKVk67ty9g9000VOrKoSLofyp5TWraIujhYMkdzLaLjp9HXC6mHfneazFOrj9LR4hbaekhJHIVCoVAoFArFnnBoZc7ExATf//73+dKXvkQmk0EIsS+Fzl6LnBz6bBR9Ktv6WIAfTge3fTCebMe81F7SeUcgMC61NSzdSiKxe2YKD+QmrW0rVW/Xi8aRZmlqld07VdOE19cd0oNjpAfG6kodkcLHi8Txwok9SYWxe6fxw9mitCkd44mDUcdkv1Ox61CVkTn588kTW74nlYSOvhLGvNCZr/fidi7idM017Twr7niXj8zRs0JR8/fkfN8KicTumiXTM7Vlpz7hGYRmjhKaHgEvK+HqiNJRKBQKhUKhUCj2gkPZhugrX/kKn/zkJ5mdnSWdTvOZz3yGj3zkI0Sjm1NS9pL9InJy6Jdb8SMusjM7+clomI93osXLF/QUjo5xqR337EqweO8Ueqqlru5WbvtivpioWLXQZ6O4Z7Lb7ZtES0fR3MqFRd225fxtqRkI38UPp3HblsvWldmIb2ZIH7mcF0IZJgnPHK1q/F44gdu+hBtby7cA19JhzMV+jGRzCg87rcu47dloKg/MxzsR3qH1tU1ju/bRsrhmToVOU7nInO26HX3J+fst96kvRpC6j3tyFQjabHuRBNb8ILodqbjdneIXFfuVoQ1pVgIQPsj9UZfJ7VgI2o8Dbsci+noH1mL/ps8QgcCId6CnWsj0TuK1Bq3j/e40mTYb81I7+tLuvq4KhUKhUCgUCkU9HLqZ3le/+lXe8573cPbsWd74xjfymte8hpmZGe666669HloJ+03kQDCxMc93oE1H0aajWN/v2VLk5NiUbtU/Udcv9E7nfP62PhVDmw8j4tmJou7jdM1VXF/i48XWsrcFTsdoYdvbrJsjMzheEtnjta5WVYTZCyVJD1/CbVvJixwIopsyR8awi45tt5Cah91XSHUzLrajJbfurKSoju1EDgBmUS2cLdKspO5ALjKnitbVlSJ0jLlYSWcyP5oI0iKj69uPdQcUp1kZK+MIO4HwigTPPqmb48ZWsYuveQFe2wrpkYtbdgKrFKXjRw9mIXWFQqFQKBQKxeHmUEXmLCws8Ld/+7f82I/9GC972csYGBjAdV2+/vWv43mlIfNSSoRoXPrJwsICi4uLZZ8bGxtr2H5yfNm7u+Lz9coi4WmYRfVztl0+m25lt9tg+vmOWKGFoaq3IZFQFNHgnlxFDOvIlhqKKguCFBfNQyCxli4W7UBDIrdPN6ozS0QaTr7YMK5AWwojo05+/E42fcxa7q1vB9WSG4Mn0BYrRxM8R3/xtufQXtDs62in+C02fns2osw1CiKgCIkk0381//5oieokW6UIHWO6BZE2cEdXkREPNElmcAymRzGSrWXX2SmiKKrFXBnHXBkvPOlpFesFNYNcqqbbuVD6hCPAlEjDxQ+n0NOxsuvnonSEY5E+ejH34J5SSeop6sN13YqfJRMTE4yMjFS1rd/6rd8ik8kQCjWnwHwz9tfsY1IoFAqFQlE/h0rmJJNJJiYmeOELX8jAwACe52EYBoODg/i+z8c+9jHC4TDPe97z6O7ubui+P//5z/OJT3yi6uW/7N1dt3CpZhK+k+3XinB0zMc7cG5YAi2o5aHZ4apSmyCYRIWnR0kPjgWpVpaPtAq/oBurnVjzg5W3ITXC08dID10p6RqkJ1qx5oaqqhsTmh4l038VPxoUTTYX+8p2i9qI5hS+9GrLIcwnO5BIvCMJvGNBtMRuCx3h6xjr7dnoIInfl0SfKT9pzbEfhU6t19FeIpE4o2v5++ZSX9nzzO1YwIvFgzu2hjHeGNmiL4fRVkI4p5fxu9O7LnSshQGEp+N0LpR2r/KD67dSitlu4+sOmcHxkgLq2kIY82IHXnca99QKENTV2krmQFYIFXXB0+YjdUe45URMVdFdFdZXNJaxsbGKwmZkZITR0dGyz23kmc98ZiOHti/21+xjUigUCoVCUT+HSuY4jkMmkyGdTucf+9d//Ve+9KUvMTIyguu6LC8v8y//8i/85m/+Jj/0Qz/UsOicF7zgBdx+++1lnxsbG+Nd73rXpsfrES61TL6bKXRyHbHcU0EtD7tvEj0dRbPD1a1vh4lMnCQ9OJ6XKcK2CM0dQU9V141JT0eJTJzIR0GYi3011avRXIvw5HG8aBwhBVqqsgzJIWwriOoRICNBNI5AYEwG426W0DFWegKZA3hDCbSZ6LYSa78JnXquo73C70wj27JRObaFsbpZXnqhFHbPbP6+eaED4TYugkVIgflkJw67L3SE1LCW+jFXu7E754L6TDIQOdVeo7uBF4mTHhiHXMFiH4yxdvTs+a+vhsjF+HnROCz1b7ktp2suL4REWse8XH2UYjHFIqZShFU16ysaz8jICCdPntzrYSgUCoVCoVDsiEMlc0ZGRvihH/ohPvjBD/Jf//Vf6LrO/fffzy/8wi/wsz/7s/T29vLQQw/xsY99jA9+8IOcPXuWvr6+hqRc9fT00NPTU/N6tQiXeibdzRQ6+mwUGXXwhpIgwGlbJrRQOaKmGOEbhCeP47YtgQBjrbPmX/s1J0zk6qlah14YA6LmSbBAQzgW0rKREbckpWs3hI5vBbJyoyjTMxG0ZAw/mkBGPPz+FPrs9pFF+0no1HsdNRspJG5RVI61MLhJnEnhkRkYBxHk7+mTLeir1cnNWmim0IFsfZmFIazFAUAi9qjosUTidM7jdM8W0qEyOtYTpUXbha0jkgYy6uKHk0jNK5sS5oUThfpaEswn6ysgXk7E1CJ0lMhRKBQKhUKhUFTDoSqAbFkWr3/963nhC1/I0tISCwsLHDt2jOc///kMDAyg6zrXX389v/RLv8Tc3Byf/exnARpaO6ceqk2b2s3tNwp9ojVfe8aLrdVcDFkgMNe6MVe79zRto1byYkUHQqX1mYzJFvQrhUm10zOD3TWLFNUXjJVI3NgaqSOXSI0+SWr0SdKDY5vaLptFksg9sYrfYm/cVFn2Y0Hu/Yx3JB7UqgG0ZAw9USpNJBK7b6rQoS1uYkzsTi0bKAgdbTF7HmaFzm4WRRZS2zOR4+sOmaErOD0FkaMthwg92Fu2aLu2mk2FFOBFEpuel5pHZmAivy3jauu2xd/LUUnEVCNplMg5WJw/f56HH36Y8+fPH5r9NfuYFAqFQqFQ1M+hiswB6O3t5XWvex2pVIonn3ySr33taxw5cgQI0rAsy+KWW26hra2tJB1rr6kUQdMIGdOsCB3haohVC9lhB5EqVgZRZarVQUazQ+QUjh910TOll9amCJ3uOZyOBYxEG3q8HT3ZUlZeSeHjtq7gdC4grVJx47WskYqtYax2YS31ITwTI9mKt9KF2xHUL3LOLWN9vwfhbD/p3k8ROvsZv8XGHc5KElkalSOReLF1nK5Z/HD288UVmE90IuTuSuOyETpDV/DWOzBWetAzB7/FtkTiti1j90wXOsdJMCZa0Sdbtkwr1FZDeIOBxPGicYxEafplpncq38lOrFnoV2tPG6tW1mwVoaNEzsHjd3/3d5mfn6e3t5d/+Id/OBT7a8Q+JiYmKj4/OjqKYRy6r58KhUKhUDSdgxP6UAOaphGLxbAsi3/8x3/k/vvvB8A0TaSUPPzwwwAMDAwAQWer/UC5iXQjJ9fNmqjrSwV548bWKiy5O3ihZFUtxRuJsAtFkHN1czayMUIH3cdtWyEzNEby+GNk+ifwwsGEUwofu3OO5LHz2P2TJSJHJHWws5euALdjieSxJ/LRPtb8IFoqm14V8nHOriBFdee4itCpjNR9nNPL+QgOc6kPPRPJR06lRy6QGRoriBzAvNyOlmnOxGVThI4At22F9NELpI5c2vX25buJb9ikj1zG7p8siBxbw3y0G2OytWJ9KG3NKkQMRuIlz7mty3jZWlO4IqhrVGMbq1pEzFZpWArFYWB0dLRiN7CJiYl92ZlQoVAoFIqDyKH+aWRkZIRjx47x13/912iaxm233cZ3vvMdPve5z2GaJnfccQew92lWxRRH0OyGfGlGhI62GIYTgcTxYuuw3Ler+8sh8bF7p4OoFCA8cRI9vX3NmIaPYwuZA4HQ0eImXl8KvysNRnaGmRU7busK4YmTuO1LuO3LJeuKVQt9Moa2HAJN4g0l8IYToEvQfJzuObxIgvDUKOHpoyRHnwTdQ7bb+H3V1c8BFaFTCW8wgQxn06vSEcylPjwrhd07nS/cnSOXWqWvNDcyLSd03OQ63kACzOAc86MJMtEE/sLArhXh3k3SQ1eQoYLU1OciGGPtCHf73yRkxAVPgCGRoQxSdxGeEbSN7yl0r6pHvNUjYoojdJTIURwmDMNQxaUVCoVCoWgSh1rmtLa28pa3vIU3velN/NZv/Rbt7e1IKWlpaeGP/uiPGBysvjhvM9ntifR229+p7MlNdoM7zRFl5VoTe7G1psgcN7aK3TeZv79dSpO2GkJbDSGFxO/I4PekC2JHgLRs/FAhskNbCAcSp7iGhy8wrraiz0ZxR+L4A0HRaT+aID00hpYJl7Ror7F0kWIril5H38oE0VStqxQHcoi4GdRcWQ7VHOFRTL0trSErdK62YUy14PWm8AYLNX6qLcIthY/UvIrLCM/Y0THWRFF0mXGlDWN6+1Qoqfu4R9fw+pOF98jTSj6XBCL/tvoxB32hdBv1ypbtZI2SOAqFQqFQKBSKnXCoZQ7A9ddfz0c/+lH+5V/+hfn5ec6ePcuP/uiP7luRs9c0ImonV5sCwFzr3PH2tt1fKElmcAxplkbE+KHUru/baVsKRE6uCOtiCH2iunobQgr05TD6cjiYcI5kW7K7RZelBPP85tcwF2ElHB3zUjv+XATnhiUwJH40URIlok/F0Oaqr5eionIKbKxxok+14LfZ+B0Z0Hy8ttX8cyKtY4y1oS2FqxIclSbzOxE5xQhfw5iNoc9G8Y7EcY+W76omkUgrgxdO4oeTeOEU0kqz7WG4OpGrJ9Gc0DYL7hxzuQe7fwoAryuNPh3b8nWWSPzuNM6xVbAKhca1TBhrdjjfzUogsGaHyQxdCYojDyUQKQNjLpZf57nmS2oWL8XvXz3rKxQKhUKhUCgU23HoZQ4EOdyvfe1r93oY+55GiBw/4gTFVwmkhL7evuNtVsJpW8LunQIt+9t6RgvSjgyJF0qVtAlv+L47FrB7Cyka2lwE48n2uvYnzaLOVl51HYKKU+a0uIX5SFde6ADgg3Gpver0qtw2FaUUCx0hBebjXTjnlgKhA+Bmo6RmYlUXOW6GyClGIDAmg05z7mhB6PihFFJ38cMp0KrvrpbH8LC7ZwnPHG3wiMvsaq0Lp3MRaWWQbTZ+Zxp9uVRSSiHxepNBOly0SO76AmuxH2OlZ9P1aSRbkXNDeVHknlhFZPSSNvK1CJly758SOgqFQqFQKBSKRnMoCyAraqchIifsBjIh1953tQuxS6eYxCfTOxkUQ82KHLFqBZ2b1rPpSIaHNJxd2LfE7potETn6VLRukQNAkcwRXvWOtVi+aHEL8+FuREqHlI75SJcSOQ2ieCKeEzrGRCv61RZC3+3DmG7ZtyKnGGOqFWOsUITba10Norg2ihwJImGgLYa3/IcbHK/Xsopv7X5nQIHAWujP33ePriOzCVJS93GH1sncOot7crVE5OiJViJjZzBXere8Ps21bozlntyOcM4s40dKPzuqeW8qLbPb761CoVAoFAqF4trimojMUVSmYSLnxkUIBZNCLRPGzE2OGozUHdIb6uNo01GMy20IKdDiBl5nEDXhh1JorrXVpspvX/j4VgaEj9R80HykyP5f8/FDqaBOShZ9vAV9Yuu2yFXts0TmVBeZk6MkQidhYj4QpM7UMh4lcrZnY4SOcbV1mzXKb2MrmjXZN6aCcecidADIaGhxK/i3biISJsKvLGLdwTjusTUQYHfN1Ryd44WTgERPx7ZdNoeeaENLRfEjSWTUxTsSRxp+UBNHLy0MpSVjmMs96MnKna5yWAsDSNPGa1kDQ2Jft0TooZ6SGliVImyqlT0qQkehUCgUCoVC0QiUzLnG2S2RE756HCFrkxJV7Ut3SI9cRJrZX819MC62o88VIlBE3CwaWwoS1ad6eZE46cHx0uLBFdAvtWFMVz8Z3ZKczPG0uqKZioVOrVJJiZzq2VhDp9Z1t6LZURvGVCvaWghp+mhxc9ui3eXQZ6O4Q3Gw/Hx0jmZX17nLi8RJD18OxrLaiTU/hJDbn/dBdM4A6ZFLAPkaQHkk6PE2zOVe9Extxc8FgtDMCOnhS8HnRsjDPreE9Uh3idgqJ2Rqef+U0FEoFAqFQqFQNAKVZnUNs6six98dT+h0LhRETkbDfKi7RORAEJ2SH18NRZA9K0V6cKw6keOD8WR7Y0QOhcicWlKsNlKPlFEip3bqbUW9FXuVfqPFLfTlcF0iB7LFlaeyxb6z0TnV4nQUWka57cukRi7gm9WlaunpGHq8rfRBX2CsdBEZO0N4ZrRmkZNDSI3Q1CjCCT5DZIuDfd1SEKFXxMYCx7WiUq52D9d1uXjx4pb/JiYm9nqICoVCoVAoFA1BReZcozRC5AC4p1abJnIkErdtObjjg/VgD8IuMxEVBC2kBSUtvitv2yczNAZ6VqqsmWjrFngCfIHwRNFtDZEw6p4Eb9q36eWLFpeTObUUcS6O0KlmWUV91BKhsx9FTqPYFJ1j2NumNUrNw4uVRtTIUIb0kStEr5yrar/W/CBpKw2aj7HahbnavSMRWozmmYSnjpEavgi6j2yzcYfjmOOlAmmn752K0NkdxsbGmJiYYGRkpOzzIyMjjI6ONmRff/u3f4uUEiF2p8j+Xuyv2cekUCgUCoWifpTMUTQMuf0iO0P38lEzYtUqK3L8mINzw2K+CHO1Ezy3dTUf8SPWTcxHuhH+7n+ZlUjcE2v5+1om6M6Tb08uQMZcRFG00XYoSdMc9sNEfLsx7FQ4bCuifIHwRXDtV325yC2XrVZcaq5FdOxstTusGin8bGv2JMLXkXodHb4Ue87IyAgnT57c9f1Eo/VFgO3n/TX7mBQKhUKhUNSPSrNS7AjjQnvQDhyQoTSp4ctIzd1mrfqQorhI8OZT1w+7ONcvgZmNcsmECE1vX5RVInE65/P3jcttTRE5AH5PGr8nGz3k6lhLfUDQgSe/TNfudwpSKGohJ4n8jgwyHAhWPdFSVbFx4Rto6Q21dTyN0PTojoqI14Nv2LgtK2R6p0iNXCB58hHSw5dxemYLcjdpYEy2lF1/J0JvP8hAhUKhUCgUCsXBRckcxY7Q0gbmw93NETrFdSu80kmftLygLbqVTflKRYlcPYnmhLbdrBdbR4aC7lf59KomIE0P90ShK1ZofigfSaQnCykdSuYo9hPF0T7eYCJ/21jtrnobeqI0ZSk8eQI9G5XWDHzdIXX0SVLHz5MZnMDtWAyKHm9wSSJhYD7eVVYe52h0DSWFQqFQKBQKhaIaVJqVYsfkhE6uEHIgdC4RmhlBtxs3QSuOzKEockYafhCRk40QEJkQ4aljCH/7mjYbo3L0q+V/gW80+fSqbBSRvt6GEe/IP6+5Jlo6jB9OI1tcpOWVrw+kUDSRYpHjRxz8jqwEta2SaLLtMJf6sJb68cIJkFpTRQ6A0z27uZ6WBJEy0NYstHULsW4hMnpV0UKNqqGkOFjcfffdJBIJYrEYL35xY+rQ7fX+mn1MCoVCoVAo6kfJHEVD2Cx0MqSPXsBY68Ra7Ed41dd82XonxWlWwQRLaj7OdUvIWBAJJByT8OTxqkQOgB9O4keSwboJA215+0ieRrAxvSo0f2TTMnqiDT8cLON3ptFnG9M5S6Goh42ywhsoROWYq901pUjlltXTzT+nfStdKKTuCvSZGNp6VuBUiMDZjmqEjhI5h4vPfvazzM/P09vb2xTx0Yz9NfuYFAqFQqFQ1I9Ks1I0jJzQEamsSBFB2+Hk6BPYnfOlkTV1sDEyRwqJc24F2ZatbeEahCePo9UgjpyuoqicyVhTanZUSq8qprRuTmbXx6VQbMVGSSF1H683FdzxNYy1zj0YVX3Y3TP5dCpjsgVzog19JbwjkZOjkqxRIkehUCgUCoVC0UiUzFE0FC1tYH63F/1KK7jZGZPu4/TMkDr6JG5srfIGKm68qF+WL3BPryA7s5LD0whNHquqRk5+E1a60CI5o6Et7H6qx3bpVcVomUi+q5XfnkFqu94vTKHYxCaRo/nY55ZAD85HY62j6ki4RuKFE3jhBLKGPnpeOIHXUrjm9ZnGp1WWkzZK5CgUCoVCoVAoGo2SOYqGI6TAmGzBeqAXbSaa71kuLZvM0BhudL3mbUpkUF8ji9+Zxu/Npin5gvDUsZrr8zhtS/nb+mQLQjYhKqfN2Ta9KodAFKJz9EDoKBTNpFzakDu8jmyzgzuehrnc29QxSSSZ3knSI5dIj1wiMziOrzvbrucbNpn+q/n7xsTuda0rljdK5CgUCoVCoVAodgNVM0exawhHx7zYjj8dxT2+huwIJoBO9wx6sqXqlCaJxOmexe1cLN56/pY1d6S+2htFkS4i06zIgsI+NdcEr/J+tXQU2rP1PaydpakpFA2h6LLVU7Gq2pGXQ+ITKMvqhYrUXdID4/jRgtj1WtZIReJYCwMYa11lt+ebadJHrpS0G9fndzcST0kchUKhUCgUCsVuoiJzrlG+7N29o3VrWV9LmpiPdCHi2ZShcFF60zZIJHbvdGltm8utiGTBQ2p2fUWLS2rSdJd2ttnJ61MJsWbV9TooFPWwE6Gw1brGZAs4wZ8Or2UdLxKvedu+YZM8fp7kiUexu2aRmrftOl4oRWrkQkHk+OTHge5j90+RPnIZ38xsWC9JauRSQeSkdKzHykufWlCyRqFQKBQKhUKxlyiZcw1Tj7AoXqeW9QUCfaIgT5yu2W0LIkskdt8kbkchIse42IYx1VISHUCd6VF6sgWyRU/9rjRSlNbe2A2hU/Z1qKHmh0JRK/VIh0rrCFfHGC+cw144WfP23dYVMNygnlb3HMlj57E7ti6S7raskB6+mBcy2BrWIz2EvteHPhfNL+dHE6SOPondORekZkbipIcvgx7IIhE3sR7uQdg7C0pVIkehUCgUCoVCsdeoNKtrnC97d/Mcvbr2o+XkRi3ra0shRNxAtrj44TTJ449hJNrR19s3pV1JJJn+q3htK7kHMJ5sR5/PTtyKxEu9v7ALqWEk2nDbVsCQ+B0Z9OVw3cdXLRtfBy+2jpFoa+g+FIpiqmmbXbzsdmiJQsc4ado1j8ffKIB0D6d3BrdzAXOpD2O1E4GWTbGcwelayC8q1k2s810IJ0hRNC92oM1HcE+uIMMeaBKnZxa3dSUYWzadUqxZWI937bhrlRI5e4vruoyNjW35/MTEBCMjI00ckaJWJiYmKj4/OjqKYaivpwqFQqFQbIeKzFFUFYFSaZlqI1gEAmOsrVA2Rvdx25bJHLlC8sRjZPqu4kXiSOGTGRgviBwfjPMdBZETbKzADgoX6/H2/O18YeINNDpCR0XnKPaCaiREtaJCpAsTLb9GmRNEzGRljiPQ5iOFIumGi903RerYEzhtS2SGrpSIHH0uivVIT17k5B9fC2F9vxd9KlbYViiTFznaUgjrsW4lcg4BY2NjFWXAyMgIo6OjTRyRohZGR0cryraJiYmKsk6hUCgUCkUB9dOHAqgcgVKt7KkmgkVbCWE+1I03kMTvSoORnXnpHm77Mm77MviiUJzYB+N8J/pSeMOGiuTHTmROLtVK9/OpVuW6WjU6QkdF5ygq4YdcnLNBtzXzfBdapjEf1ZUidGoRFcLTgno1pl9zZI407Xzak7ZuYV3oxJ9swR1Zz9eukqaD3T9ZWMkH40o7+mx0y0g84WuYY+3oCxGckyvImBvsYz6CebFjx93qlMjZP4yMjHDy5Mm9HganT5+mr6+P9vb27Rc+IPvb7X0YhrEv3juFopksLS3x1re+lfvvv5/+/n7e8Y538IM/+IMly9i2zdvf/nbuvfde1tbWOHXqFL/zO7/DLbfcUrLcXXfdxac+9SnW1tYYHR3lU5/6FC0tLc08HIVCsY9QMkeRp5ywqCUqpWqhs26hrVtILUht8ntS+F0Z0LOCJidqPDAf70JbKVPgWDRG5lSTapWjkUInF53jXhd0qnK6ZtETrTsuyqo4+Ejdxzm3hIwGMsI5txTUedlhVEmOckKnHlEh0jrS9JGGgxQ+QlY3Pi9S6ESlrQedsLSUifVEF37Mxj26jt9RVMTY0bCe6ERbq67QuZawsB7qxe9OBfcXIqrY8QHiIKVRvfe97z10+2v2MSkUh4W3vvWt/MAP/AAvfOELNz33zne+k56eHu69916+8Y1v8PrXv54vfvGLdHR05JdxXZcjR47wd3/3dwwMDPCFL3yBV73qVdxzzz3EYkHH1k9/+tN8/etf5zOf+QyDg4OcP38ey6qvo6RCoTgcqDQrRQn1FjiuZx3hC/SlMOYTnVj392E83oG2EM53qTEf3ULkQEma1U4nalqq0Nbc7yqfapWjESlXfpuNe3wNb6TQycoPpzfXEQF8q/J4FIcP90g8L3IAZNTFPVJ7xyjbtrHt8lEzxXKiXlEhctFCAqRRuh8pPDJ9V8n0XUWK0k5VfjiVv52TOfn7CQvrsW6sR7rRlkJoS2FCD/ZULXLyY5MCfSGKvrB1JE+1KJHTXFQalUKhOEwkEgm+8pWv8Bu/8RtEIhHuuOMOzpw5w1e+8pWS5aLRKK997WsZGhpC0zSe97znYZomly9fBsDzPD760Y/yrne9i6GhIYQQnDt3TskcheIaR0XmKDaxU2FRTwSL8DX0xQj6YgQpJP+W/FTFP1A/cuuzgxsS8EudpK8HHW80z2Q7vFAKu2e6MI4qoh928vp8+tOf5mMf+9gWz5ZOOu3OOdzOQicvsb798SgUAA888ACvf80bAfizP/9Tbr311k3L7FRSCLeoYLlWWvPJ7p0OUiaDJQnNHSksW9Sx6uMPvJ9jx47taByVqLbo81YokbM37Jc0KoVCsTMefPBB/umf/on77ruPyclJOjo6eMpTnsLrX/96jh8/vi/Hct999/HLv/zLZbdx991389SnPrWm/Y6NjRGNRhkYGMg/dubMGS5cuFBxvStXrrC6upqX1zMzM6TTaf6//+//4xOf+AStra386q/+Ki960YtqGo9CoThcKJmj2BV2kpL07+5nKz7veR4yEkQuCCdUkt7hReKkh64AEJ46hp7aOo/YC6VIH7kEejC5FKsW+njLrrQkhzIiR4KWCaOlYhjxdvR0ocCz3TmH0zObv69faUVLBjJnt8anaD7lUp6Mqy34rTayLYh2EWsWxtXN5/FWouGBBx7g9a97A1iBYHn9697An33o/WWFTj3jyyH1oo5yfuk1WBA54LYvYay3569FzTXIxeosLi7uqsyppYtXuXUVCkXzUd2uDg8f//jHeeCBB/iJn/gJzp49y/z8PJ/+9Kd54QtfyN13382ZM2f27Vhe+tKXctNNN5U8dvTo0Zr3m0wmN9W0aWlpYXl5eYs1IJ1O8+Y3v5lXvvKVtLYGDTNmZ2dZX1/nypUr3HPPPVy5coWXvexlnDhxgttuu63mcSkUisOB+muo2DXqETrViIqZmRnINrPR7EL6hW/YpAfH8zV30gPjRCZOobmbI3zKiRzz0U7+3flcTeOtlo0ix1zsw1zpQfj6pmXLiRxjMvgioETO4WOjcBC+hvVYVz61yphsKZEluXXKkRc5RaIFXe6O0CmOxsmOTwqfTN/kpkUzfZNExk8jpIZwCxFmCwsLm5ZtNPUInWtB5Fy9enXLCbGaLFfHW9/6VlZXV2lvb29KrZlm7K/Zx7SR7VLocqJHRW4dDF72spfxx3/8xyWR1j/1Uz/F85//fP7v//2//PEf//G+Hcttt93GT/zET1Tc5itf+Uq+853vAIGA+cIXvsC73/1uAF7xilfwile8gmg0Sjxemiodj8fzdXA24jgOv/mbv8nRo0f59V//9fzj4XBQz/HXf/3XCYfDnDt3juc973l87WtfUzJHobiGUTVzFLtKrQWUq+HKlSv52zmZI4VPZnA83yUHAMMjMzhektYB+0DkLPRjLfWXFTleOKFEzjXIRnkgfA1zog1zoq1ukaPHW9HjwS96OaHzwAMPNGR8uW3mx5uNjnO65pBWEFHkRTrxIp0ASMvG6ZoLlvWaK3OgNjlzLYicSqjW0NXz5JNP8sgjj/Dkk08emv01+5g2kut2tdW//VL8ej/zoQ99iLNnz3L58mXe9KY38bSnPY1nPOMZ/Nmf/RlSSqanp3n1q1/Nrbfeyu23385f/dVflaz/1re+lWc/+9lbbrcWbr311k0p88eOHeP06dNcunSp9oPbAfWMJR6P47pu2ecAPvaxj/Htb3+bb3/72/z0T/80b3/72/P3X/GKVwCBoEwmk8zOFr7bPfHEE5w6dWrT9nzf5y1veQtCCN73vvchRCGd+dixY5imWfJY8W2FQnFtomSOYteptrV5tZTKnOCXCrt3Ol9Y1Tej+GaQsuSHS2vi+Lqz9yJnuW/L5d2W1fxtfbxFiZxriGokQi0iJzR9lND00V0TOlIrkqS+hm+lcDrng+eEIDN0K5mhW5HZL5tO5zy+lUK4hYiPZskc2NnrexgZHh7ek8my67pcvHhxy3/bpdgoFIrqeMMb3oCUkt/6rd/iKU95Ch/96Ef55Cc/ya/8yq/Q39/Pm970Jo4ePcr73vc+vvWtbzVtXFJKFhYW6OzsrLic4zgsLS1V9c/3/Yrbqmcsv/M7v8PTnvY0br75Zl760pfy0EMP1bWPWCzGs5/9bD74wQ+STqf5j//4D5544gnuuOOOTcu+7W1vY35+ng984AOboiOj0Sg//uM/zl/8xV9g2zYXL17k3/7t3/iRH/mRusalUCgOByqOWtEUKqVc1SoqimWOyIRwWpdx25cAkEIjPfJ0ACKXv4aQPm7HElo6irneideyum9FDoCfa9ssQZ8KQnCVyLl2qJQSVKvIEVlXH5o+SmZwHK9lvbEpV7nIHD+QNZn+yXwNb6fnLH64LXv7DNb8eRDBMtZ0QRY0U+ZAfa+vorHkulVtJY1UtyqFojHcfPPN3HnnnQC8+MUv5tnPfjbvfe97eeMb35iPGvnpn/5pfviHf5h/+Id/4L/9t//WlHF9/vOfZ3Z2lt/4jd+ouNwDDzywZSHijXzlK19heHi4IWMxTZMf//Ef51nPehadnZ1cvHiRv/zLv+QXf/EX+fu//3uuv/76mvfzjne8g9/+7d/m6U9/OgMDA7z//e/PtyX/tV/7NW677Tae//zn87nPfY5QKMQznvGM/Lp33XVXPo3q7W9/O//7f/9vnv70p9PZ2clv/uZvqhQrheIaR8kcRdMoJ3TqERX5FAAJCB+7qEZHZuip+JGO4PbgUwlPBVEIdt8kWiaMbxZaKBvjrftK5EjNxQ8FrchFwkB4mhI51yDlhEO9IgdAoO2O0MnJHKnhdiwWIuOsFuyeQiFJu+csxuokmh3HD6fwWtbyzzVb5kBtr69iM67r7igNKydyVM0ThWJ3+bmf+7n8bV3XufHGG5mZmSl5vK2tjePHjzctIu7ixYvceeed3HLLLfyP//E/Ki577tw5/vqv/7qq7fb29jZsLLfeemvJ38Y77riDH//xH+cFL3gBf/Inf8Jf/uVflt1epRpTXV1d3HXXXWWf+/jHP56/ff78+Ypjbmtr40Mf+lDFZRQKxbWFkjmKplIsdOoRFVLK/ERCOBZ270y+EKvTeQy3o/CLrts5ipNawly+AprE7psqqVNz95Pl/7DulAsXLtQscgC8SDIf2aCthpTIuYYpFg5biQbbtoP249bWIidHWaHzmjfy7//5pU01BKod37Oe8d+DO77A7i7UAkgfuRW0onpQmk566BaiV74OgNM9B64Ghs/8/HzN+24E1by+ivJsF1mzHSryRqFoDkNDQyX3W1tbCYVCdHV1bXp8ZWVl18czPz+f7870gQ98AF3fXDewmPb2dp75zGfui7GMjo5yxx138KUvfQnP87ZdXqFQKJqFkjmKprMTSeF5HqlUEAEgPAPfCiJZfCNMZuDmTctnBm5GX59Bc9P4VjpfYwfIh7g2mscffzx/21jurkrkAEi9UGTvjX/2moaPS3Gw2E4yzM3NgRWkDGrpyJYiJ0dO6KRHLgVRNJbP3NxcXaHpAO29rayuroIUkK2f47YM4Ee7Ny3rx3pwWwYw4jPBsq4J+GQymbr23QiUxNmaSr/Sq8gaxV6jWpdXh6Zt/nuwlYSQsqig/RZFdT3PK/t4Nayvr/Pyl7+c9fV1Pv3pT9Pf37/tOrZtB39jqqCrq6tqwVLPWAAGBgZwHIdUKrWp1bhCoVDsFeqvneJQIHWzNBogh6YHz7np5g8KSuRRLagOBYpaEHaoosjJL4eGsEOQTYlqNFLf+k9KpecU+4ftomZUZI1iL1Gty3eftrY21tbWNj0+NTVV1/YymQyvetWruHLlCn/9139dtotTOb773e82vGZOvWMBuHr1KqFQiGg0WvU6OZaWlnjrW9/K/fffT39/P+94xzv4wR/8wZJlbNvm7W9/O/feey9ra2ucOnWK3/md3+GWW27ZtL3vfve7/MIv/AK/8Ru/wWteo378UyiuZdS3a4VCoVAoFEChNbRCsR+p5vzcaf2Xa/38P3r0KOvr6zz++OOcO3cOCCJBv/zlL9e8Lc/zeP3rX8/3vvc9/vzP/7ysmNiKRtfMqXYsS0tLm1LRHn/8ce655x5++Id/uGzE03a8853vpKenh3vvvZdvfOMbvP71r+eLX/xiSYS467ocOXKEv/u7v2NgYIAvfOELvOpVr+Kee+4hFovll/N9n/e85z3cdNNNNY9DoVAcPpTMaQK5VIKdFI1UBBSH+UrhE1RBBnwPLbVSfiU/t47MrhPwxBNP7Ere88zMTGHXho0Xqi4KwjcKxZlnZma2LYR32BgdHSUc3jqSSV1HpczNzeVvS82t+jyTWiGd7/LlyyQSibr2n78WhSx60N76OvQK53duHc/zrrnzfLdR11HzcBwn//9mnMfN2F+zj6nReJ6H53klXS9rYXZ2Ftd1t72ODjM/9VM/xR//8R/z2te+lpe+9KWk02k+85nPcPz4cR555JGatvXe976Xe+65hx/90R9lZWWFf/7nfy55/md+5me2XLfRNXOqHcvrX/96wuEwt9xyC93d3Vy4cIHPfvazhMNh3vSmN9W830QiwVe+8hX+/d//nUgkwh133MGZM2f4yle+wv/8n/8zv1w0GuW1r31t/v7znvc83vOe93D58mVuvPHG/ON33303N998M/F4vOaxKBSKw4eSOU0gN7l/17vetccjOVzIcCF1SneSRC/9R+UVdInUC+u86lWv2q2h5XG753G7ay/y+jd/8zf8zd/8zS6MaP9y1113cfbs2S2fV9fR1vgtcdItF2pe73//7/+9852bBTlkxucw43MVFi5dJx6P8/KXv3znY1DkUddR81lZWWnqedyM/TX7mPYb211Hh5nOzk4+/OEP8973vpc/+qM/Ynh4mDe+8Y2MjY3VLHNyNQT/4z/+g//4j83f0SrJnEZT7Vh+7Md+jH/5l3/hE5/4BPF4nM7OTp7znOfw2te+tq4U07GxMaLRKAMDA/nHzpw5w4ULlf9mX7lyhdXV1ZJ9Li8v88lPfpLPfvazvPvd7655LAqF4vAhZHHVM8WusLKywv3338/g4CDT09O8613v4vd+7/cOdN2BsbExdRz7jIN+LNv9Elp8HdXagemgvTZqvLvHQRor1D7e3byOms1Be6/KoY5h76ln/NdyZI6isXz729/mLW95C/fcc0/+sfe///0sLy9z5513ll0nnU7z0pe+lB/5kR8pidZ529vexnXXXccv/MIv8Na3vpWjR4+qmjkKxTWOisxpAh0dHTz3uc8FyH95Hh0dPRS/+qjj2H8cpmMppvg6qpeD9tqo8e4eB2ms0LjxNuI6ajYH7b0qhzqGveegj1+x//iFX/gFHnjggbLPvepVr+INb3gD0Wh0U0pUPB4vqYNTjOM4/OZv/iZHjx7l13/91/OPP/roozz88MO8/e1vb9wBKBSKA4+SOQqFQqFQKBQKhWJbPM9jaWmp4jLRaHRLWXGY+MxnPrPtMqOjoySTSWZnZ/Nt0J944gl+9md/dtOyvu/zlre8BSEE73vf+0o6m95///1cvnyZZz3rWUDQYl3XdSYmJnjPe97TmANSKBQHDiVzFAqFQqFQKBQKxbZMT09zxx13VFzmta99La973euaNKL9TSwW49nPfjYf/OAH+f3f/33uvfdennjiibKv4dve9jbm5+f5y7/8SwyjdIr24he/mOc973n5+//n//wfhoeHecUrXrHrx6BQKPYvSuYoFAqFQqFQKBSKbent7d22ZfjIyEiTRnMweMc73sFv//Zv8/SnP52BgQHe//7359uS/9qv/Rq33XYbz3/+8/nc5z5HKBTiGc94Rn7du+66i9tuu41IJEIkEsk/Hg6HiUajtLW1NftwFArFPkLJHIVCoVAoFAqFQrEtoVCooS3DrwW6urq46667yj738Y9/PH/7/PnzVW/zve99747HpVAoDj7aXg9AoVAoFAqFQqFQKBQKhUJRPUrmNJnu7m5e9rKX0d3dvddD2RHqOPYfh+lYGs1Be23UeHePgzRWOHjjbSSH4djVMew9B338CoVCoVBshZBSyr0exGEnnU4zNjbG6Ogo4XB4r4ejUBxI1HWkUOwcdR0pFDtHXUcKhUKh2A+omjlNYGxsjJe//OXcddddnD17dq+H0xCeo79422Xs6xeRnTYAkUdPIXx9R/tMHx/Dj6UBsP5rAIHYZo2t+bJ3d8Xnqzm+Rm+/+PXKIZYtrEc3/5q43fYPI4fyOtJ+Pn9b6j72D84DoMVjhMeDApLpoxP4LQkArHt7EV4hoPLL/ueq3n49bLf9nfD3f//3/Pmf/zkA1sQQxnr9RRzdjhXsoRkAjCdb0WejDRnjbh7/XlHuOir+PJK6j/2MWQC09SjhscYVMnU7V7CPBNs2LrRX/T5di593iv3NYfx7tJ+5++67SSQSxGIxXvzi6r+f1bveTtdVKBSKZqFkjkKhUCgUCoVCodiXfPazn2V+fp7e3t6axEq96+10XYVCoWgWqmaOQrEPkEKCpjIeFQqFQqFQKBQKhUKxPSoyR3EgkEIiDW+vh9EQkskkfnsGP+YgYy4y5iAjrlKrigJacK5LJOj1nfcXLlzAjzloCbORI9sddH9Hq/uhTIMGcm0iTQ+/I4PfmcHvaNZrqeS1QqFQKBQKxU5QMkexawhPy39dl4aLsOurmSOR2IOzyJATbDex/0/brWru+B0ZnLPLcOPWExlhG4G40iSED4fAUlSBJyCjQcjHj6Zx29YA8CNBnSgyWrBMFXz605/mYx/7GNwC+uUWjMlYw4ebq8dTb12Z0dHR/G2ndwF9rbWuulpO9yJu93L+vog3Tl49R/v5Q1k3B+Dl/+sVIAUI4AfKyzQtHWroPoVTeG/8Ngd9tqGbVygUCoVCobimULEAil1DJAvSxQ/bFZasjNu1gte1mt1QUDjz373P1r29aopp7kbBTa87hXPdEhgbRI4EkQqhL7dhTvcSvjian0TJiIc0dha1oDgYCATG5db8fXtgFnugMNs1LrdWVfQ7L3KyeMfjuEcSNY+nksQoLqxcb5HlZzzjGYhlCwBputiDtc/sne5FnP75/H39ckvDI5F2WkR632JJCPlgbfh88TT01RasqwOYs70N3aWWiEC2gLfflQ7SSxUKhUKhUCgUdaFkjmLXKJY5ss40CK8lgTM4l79vXGhHiwcTwHqESy3rNFLoeH1J3LMr+StOW49hXR0gfGGUyKOniVw8RmhyEHOxC+EZaMlCq1PZ4jRsHIr9jbYQQlvIRkMYXvAv+7i+sH37240iJ0etQqcakePHHPyYU/JYLQghMJ9sAzcQVF77Gm7rWlXrSmRZkbMbEUhwSIWOoyMcA+EEnzfGXBehSyNEHjtFaOIIxko7aD7pE2OkT4zhRVI73qWQGvpaS3DHkE1M6VIoFAqFQqE4fCiZo9g1SiJzQrVH5viWTWZkilwwgn41hj5f2sp2t+VMI4SOO5jAPb1aOI7lNkJjwWRJS4cRcvNlqKUKE3e/pf6oJsXBQiAwLraCUxSB4wiMi9u37d4ocszZ3pLIimqFTjUixz2SwLllCeeWpfw26xI6th4cbxZ7cBapuxXX8U2bzMjVpomcHIdN6ITHhomcP0nk/EnCl0ax5nrRk9GS6C+3cxU/msaPpsmcGMfpXQjqOO0Afa3wfvs96R1tS6FQKBQKheJaRskcxa4h0gZkI/j9cG2/wErNIzN6NV8YVVsKoY+1ll12t9Om6l1XInFH1vFOFKINjIVOrMmBbdNltFSksB0VmXNNIRwd40JW3kgwLrQhnMof1WVFzmJ38K8GoVOtyPGOx8tusx7hoc2HS6KR7KGZssIgF42TPnkZv7VwDM0QOTkOm9DZDj9aFI0jwOlfJHN8At+s/zNJj0dVqpVCoVAoFApFA9j/lWQVBxYhBSJlBB2bLBuJrKrmh0SSOTpVUvDYeKKj4rpf9u7esuhwI6JrKm2/HBKJd3wNbyiZf8yc7caY767qNRC2GUx4dB+/Vcmcaw19MYz4XlAMWNumoO9WIid/P3s7F8mSEzEbBUg9IidH8TZrLRosEBgX2rDbFsHy8VrjeO2rGKsdhe1HUtiDM8hiKZzRMC61oi9uTj/zIy7u2SAaTh+PoS2GqrruquEwF0UuRiLxYlmZ4xNEFgrwYynSp65gTfVjrG4fMbaRXKqV17mWT7XSl7dPIVQoFNcuH/vYx/B9H02r7Tfoetfb6boKhULRLNQnlGJXEamsL9RAWtunC0nNxxmcw2/JShBHw3ysE+Ftf6rmpI3M/lf8WCOodlsSiXtqtVTkTPdhzvdUPaEUiEKqleUjLdXV6lpDi5s7Fjn5x7eJ0KlH5JRN4zq2jteZ4Y6On+HSpUtkMtVF5AlXw7hQXPx5Dt9wkJqHPTBD5thYQeRI0KYiWA90bylynJuWkS0uMubiXreKc8MKMlw5fasWroUIHWk5hZpNKyHMh7ohne02pvvYI9NkhqeRWu0F2lWqlUKhqIWenh76+vro6elpyno7XVehUCiahZI5il2luG6OfWQWP1z6xV0i8UMZnO4l0scmSJ27gNu9Ejzpg/l4ByJTfQDZhx+9E/u2OexnzHD21b189KMf5etf/zqLi4uNOJyqhI7fl8Lvz/6iLQm6wix21rwv4RbaNPsq1UqxAT/mVCVy8s+XETp+zKm62PEmkVMujWs4iXvDCs7Ny7zsZS/j53/+5/nud79b1fHoS2G02ayc0X0yI1dJj47jdq3k602JuIH5/S7MS21lBa8UEueGlU0dmmSnjX3jMlJrXErPYRc6xSlWflcGvye1Kd3P61grqV1ULZtSrXZYh0ehUCgUCoXiWkSlWSk2kUsnakRUi7ZqkYsp8WMp0ifH0Jfb0eMx/JYEXksCaZX/xdy41I62Fqp6X+fPn+eNb3xj0G4XePDBB3nwwQcLC6R1tHUTsW6hrYTQUpVP/62Ov9aUq3pwehbxOtbz97ermaJQ7BUb07iKWVlZ4S1veQt/+Id/yC233LLttoxLrdjtNoR9ZKQoqscDfawFfSpaMbrNH0hBOPjEEakQ5lIXTt880nQh7OP3ptBno1uu30hysuegpmQJTy+5XxxpuONtSw3h6kjdhx0Ktkb+vVIoFAqFQqE4SKgZoqKEYknRCGGhrYUwHu2EVHZiIMDrWsU+OoXbtbpZ5KR1tOko5kPdW066yn1pz4mc9fWsAPHKTPjCHn5vGu/EGs4t87jD6xV/Ea50/JUmDtpcBG02W8BYgD08g9O9vOXyxUgkTs8izsBC/jH9SivaulXVvhUHi51M9L+y/k+88pWvzN93+udxureOQCvXyltLmBUjTHLj0xIm+uWWLfdlLnYTujSKOd2POdeDsdiFSAZRNplMhre85S1lI3Q2Hr/wNMxHOsEu+tNka5jf68aYipWInI3rSk3ijhRSx0LTgxir7YQmhvOPeUPJpkSBFL+m+zWCx4um8HJC3dgs1LX1GMZCJ8ZiRz6KBgBHR4tHg2LuVwcwp/tq3rfU/CCNCxBJs+56Ro3+e6VQKPYnn//857n77rv5/Oc/35T1drquQqFQNAslcxR5yn0ZbsQXZH05jPXdXvQrreBu+NLug1ix0C+3Yj7Qg/WdXsxL7WhrVtltVSVyAHSJvhbDHB/EmO9CS0TAL9q3AG80jntuOfh1eAvqETpBQdd29KmCjHIG5yq29ZVI3I5V0qeubBI5xmRhEq1EzuGjHqGTW+cXf/EXqxI65UROcQHkaoSOMRmrKHT0dARzuRNzoQctHUJG0uRO91qEjpYyMB/qRKyZiDUT86HOTVF05V4zbzCZT6/S11rQ0oFM0tJhtGQgV2XMQ3ZsX7trJ5R7Lfej0HGG5sgcu0rm2FVSZy7itq+WPC8QmDO9mNN9WJMDhC6PEHnsJNHzpwhfGcGa6cNYaa9LxPihTEnqXD3s1t8rhUKx//jkJz/JRz7yET75yU82Zb2drqtQKBTNQskcBVD5S3AjviALKTAmW7Ae6EUfb0GfimE82ol1Xz/WI90YUy1oqcq/0FYtcrJ4bQm8nmXMxU7Cl48SefQ04QujGPNd+Umm353BecoCfmTrmjT1Ch39chv6ePHkdxFnYL5E6Ejh43Qtkz5zCXt4BhkuTDSVyLl2qEXobFx2O6GzncjJUa/Q8cKpkmXd9lXsoel896N6hY71YBfWg11ViRyp+3jD2agcCeZ8b8nzRlHNqkamC22k0mu4H4VOHi2IIHTb10oeFtn/jLVW9EQU4TUmM9uPFGqnaYnKRb7Lsdt/rxQKhUKhUCgOAkrmKKr68tuoL8jC0TEmWjEut6EvhxF+dadgLSJHAlIEaV1+NE365Bh+OB10iEqHsWZ7CY0NgxvsW0Y8nKcs4nWnNu4iT90ROhOt6JcK7XvdnmXsIzNI3cXpXSB19hLO0FxJuplYMzEf6VQi5xqjGqGz1TJbCZ1qRU6OqoXO1ULUWfHEvETk5KhT6FQaw0a8wSSYwU70tTa0TGmtLX29FWEHIsLvsvEb2NkqRzWyZj8JHaf9GHb3OdzWoeABAfbwNG7bZjHeaPyiFvOiRpnTzL9XCoVCoVAoFPsZJXOucWr50rtXX5BrFTmZI08jdeJH8M1saoXpkj4+jttaWFaPxwhfHEWkspM+XeKeW8EdXdsyFareGjrGdAzjyfb8hNbrXCN17iJO/2K+9S+AthTCfLAb66EetJVCy2Ulcq4dKgmN7WRHWaFTg8jJUY3QEatFaZB6cA5vFDl25wnszhPBnQYIna2eC6JystE2Esz5zW1kBQJjefeic2qRNPtF6Lidx3F6ryMz9AM4HceCBwXYI1Mln5W7QV4AShCJ6qN9DsLfK4VCsfe4rsvFixdxXbfkfvG/3HMKhUJxkDmUMueBBx7gwoULez2MfU89X3ab/QW5HpHjdhzFD7eTOvHf8SLZCZwusY9O4fQs5mWN5liELx1FX2nNb8MbTuDcsIQ0ytfRqVfo6HNRjPMdkNtsLnJBgjYXxvxuD+ZjXSWFjrfbpuJwUk5aVJuGtVHo5KhW5OTYTuiIogLjUvfKi5z+m4N/DRA6lY7fO5IEIxuVs9KOZpevt2Usd+TrZvn96Yq1smqhHjmzX4QOAEJg9z8Vp300ez8ndOKV16sTiUSGgnRSkdKrjs48CH+vFArF/mBsbIyJiYktn5+YmGBsbKyJI1IoFIrd4dDJnHvvvZc3vOENvO997+PixYt7PZx9y06+5DbrC3I5keH7Pu94xzsqipz8Y0aY1LEfxmnPdrMR4Aws4LcUOt4IqWFdHcSc6stPNGWHjXuytBhoMXULncUI5mNd4AjwQJuOBgWfn+xES25ONVAi59qlWF7UWiB5o9CpVeTkqCQc7nrg/fnbvuGUFTkIkRUFWwud3/u93yOdTrORao9f6n4hykaCudC95bLC1zFW2oM7usQb3bms2ImU2XdCZ+AW3Fh/cF8De3gKqXmV16sDGbKL2pGLqqTaQfh7pVAo9hcjIyMYRhD5ZxgGJ0+ezP8bGRnZ49EpFApFY2hMNcN9RC5scnJykne84x284x3v4OTJk7u+34WFBRYXy7cFVva/PPXICiEEkxdnILzpGaRepvaC0JC6tXHRDXcFwtNBChDZSYYon2qV4zn6i7cc/3bH9WPmi4L0AllfO97tqHbysh9l0UG6jqqdjNfbfny79bbbvxnrAuorMLsdAwMDWJaFbdv4GyI4pBEKRE4OIYLHivEE6JL11XV+uuWXEP7W10Kl4/SGUqVROU75qJwcxlIXbudK0M1uKIVIGOiz0YrrHERqvo58F3PhMfTEbNGDu/P5hKcFEVKaREZd7KcsYD7RgYjX36JcoVAoFAqF4lrk0Mmcrq4uYrEYL33pS/nCF77AO9/5Tt7+9rfvutD5/Oc/zyc+8Yld3Ucj+bJ3d92/WO5kXYnE7w5+if8x/UX8u/fZmtZ/rvESjK423OuWcxsEAQJJeOJ+0kd/EK+lL3jO9whf/RbG+nR+fXO2B229EKUgkTh9i7h9hYmPWLUwLnRsO5ZKQqfSOtVOWOrdfi3L7jehc1Cuo1prpNQrdHay/92QODmi0Sg/9VM/xT/90z+BFrQC99oCqROafww0E6cr+Mw1ly4Gj2Ux5ntw+xaAoNh3JZFTCYnEGywULTcXu7ZdR7MtzOl+nKFAWrin1sHW0ZdD26y5mdx7Wm+ETaPPiWKquY60xBzCSSA8F3PxcTSnUEdIpC2sq4MIX2/42DTXJDR2hMzIdFAzLFuAHk8EaVcpA5E2gv/n7nuHLohYoVAoFAqFYsccOplzww03cOrUKTKZDK985Sv50z/9U+68807e9ra3bRI6UkqEaMwvgS94wQu4/fbbyz43NjbGu971robsp5HUI2V2MvmXQuKeXsHvDWSONhOpSejkxqovhfFnovgDyeDHY1cDw0dIn/D4N0kdux3faiEy/k301FJ252BNDhTSLAjagtvD03jthcgCbTaCcbG96qiZWoRIvTUf9sv2m8FBuI7qrZHSqMn7fknPeclLXsI//eM/BVEu0RTGbA9ufyBpQrMPIjUzfzuHOdNbEvChLdUuUXL4XTZEgjQgLR5Ds6vblrnSiQzZuN3LIMA9t4J4uHNTvapKbEwDq/U92U2RA9VdR6H5RzY/6QvM+W6M+a5djZLRE0EBentkCj+aTbPTJbLFRbZsLkoqEgbGxfaa3iOFQqFQKBSKw86hkjk5OdPZ2cn4+Dgve9nLkFLywQ9+kDvvvJN3vvOdDA0N8dWvfpXnPve5DRM5AD09PfT0bO6ist+pRejsSORoEvfsMn5XoSWtP5DCpboInY1jNC634rRnkBEvEDkZExlyENIjMnYv0rDQ7GxtHE8QmjiCHi9E5PiGQ2Z0EhnJjkeCfqUVfSpW8ySmGiGy05oP1W5fhl2cU0G9H+NiO1pq+0t8Pwmd/X4d5Sbt0vBxT6yDkOhXY1VFwTRC6OwXkQMwNDSENh/G70uD4SF8DWO+G7c3iHILTT9Qsrwx34251E36WCHNR9+BzPEGC5Ek5lJnhSU3Y872IU0Xr20ddHCuX8F8qAstuf31slWB5t1Ou6uFeq4jLRHBmhzYsoB0o9Eck9DlEdzuZbxoChmykZZTNrtLxlycmxbRJ1rQJ1pUOpZCcY0xPDxMLBajs7O2z/p619vpugqFQtEsDpXMyfHc5z6XD3/4wywuLnLbbbfxute9jg996EO87W1vo7Ozk4ceeojTp09z/PjxvR7qvqAaobMjkaP7ONctI9uDDib42do0ojqhU25swtcwnujAuWkRNJCWg0iGkNEMwncQthMs6OiEx4bR0oUiO14khX10Emlmi3u6AuOJDvTlTYV4qqaSECkevxQS70gcBIE4qjJ9oJrty7CLfeMihIKCos5NC2U7ZNW6fUVAschxblpGxoIIAr8ngzYTwRhvQTiV38+dCJ39JHJy6FejgcwB3O4lQhdOgO7hdq0gKNSdMpY6MOd7kLqLHwlSo0RSR6Rr/xMkkfg9aWRntiOSbaLFayvwLBBYk4NkdA8/lgRT4tywjPVgFyKzdWrRdq3Tt3uPmiFyqsVY6EC4gYQUGQt9vXaRXQmJxGtN4HauBIXmp/qD2mRFCKlhLnSTU6FSSKTp4IdsZMjGt2z8aAoZtoMIsKNx/I5MUGMncyi/vigUijJ84AMfaOp6O11XoVAomsWhSkTPRdr09PSwtLTExMQE4XCYZz7zmbz61a9mdnaWhx9+mFe84hUMDw/v8Wj3F5Um8jsSOaaHc+NiQeR4GqGxYayJwXxXG38ghXtylR/TX7Rp/UqSSYtb6OPZtuICpOGiJQtCRqQtwpdGEZkQXiyJ3T9P6uQVMifHCyInrWM+2L0jkVNprBtFjnPdMt5oHO9oHPupC/itdkO2v1HkANkJ6iJe1+ZuQdVuXxGwlcgBAik5mMJ+2gLukQRyu+LZB72VdRFa0kRbCmShtFz89nXMmX70lbb8MvpKG+ZMPwKB15LIR17Uk2IlTR/33CruubX8Y8ZSZ4mEkMLHbVknMziN3T+7ZUcmITVCE0fQUtlrP+Tj3LCMNMp3V6pGxGwne/YTxko75kIX5kIXejyKtBy8WCBf7L55MsNTpI+Pkzp7kdTpS9hDM7hta0h9cxpUMVL4uB2rpE9dwR6dxG9L4LWvkxmeRlL52hBSoNkWxnoL5kIXoakBwheOYc52F7oNtjnYT13A60lV3JZCoVAoFArFYedQyZwcZ8+e5brrruNb3/oWELSz/uIXvwhALBbjS1/6EuPj43s5xH1JOWmzI5ETCkLj8zUQXJ3w5RH0RBRjrW1boVONXNAnY4jVbOSJ5YFtYix0oC+2oy+14wzOkjr3JJnjE7i9S4W0KoJCx9b3e9BSjSsUWzzmEpGjBSJHdhb2T9jDuWkRd2R920lOpe1vFDkibaHFsx16dHDPLeMNJDZta7vtKwK2EjnCMTDmu4PuPACGxDsex751Ea8vhQy5W76vtRZQ3s/oVwtRMU53kGJlTQ1iTQ1k/w3mZYtX1PmqFpkjhcTrTWHfuoDfU7iG9NVWjGyKlRdJkhmaInXmAvbRSbzOVdzuZdLHx/DN8tJU+Dqh8WFEJiukol4gdDa0y65FxGyVhrXfSB8fJ3ndkySve4LUDU+SPnOZzPGr2EdmcfuW8DrW8WMppOkiQw5u1yr20WlS110kdeoy9sAsXrSQ6iaRON1LpM9cxh6eCaJpivBbE7i9SzWPUyAw53sIXTqKsLOf1YbEPbuCc3qlqtbmCoVCoVAoFIeRQylzAHp7e/ne976H67q8853v5KGHHuJNb3oTb3zjG5mamuKP//iPse3qoyKuFYrlzY5EDhLn3HJQ04Zg4hu+NFKS7lRO6PgDSZ6jv7hqqSAQmE+2gxtMFv2OdfTVtqCw6dA8XlsC9NIJtYgb6GOtmI90IdzGXwLF45dIvK4U9i3zBZHjiUIEUS51oLf6X5lz25dC4h4JInyKRU748gihsWH05bb8PtyTa/gt1Z3vSugUKBYp7vH1EpETGjuKNd9L5MIJ9OX2/HlMxMM9s4b93xZxbl3Ejzrbbrua/e9XxJqJWAsm2TJs48eSCATGSgfGSkdJ1IwXK0hF9+Qazqk13NF13CMJvP4UXlcav83Gj7pIy8PryuCcWcV++jzu2TUwsy+yq2NNDBGaPIJA4IfTZI6N43WswYbJvQzZZI6Nby10PIPQ+AjCCdJ2ZKuLN1IYZz0iZmOB5H2JLoPXSt9GJNsabPAlMmzj9qyQOTGRf0/toVmcwXmkWYjcEasW+pXW/LXh9C1s+T5sO9xUhPCF0cLnGuD3pbBvnccdTOC32ltGVSkUCoVCoVAcRg5U0rnjOJhm5SiKXBHkn/qpn+IP//APecUrXsH09DRvfvOb+dEf/VGklITDYYaHh7Gsw9kZIzcZ32kNlJ1M6mWrk4/IEXZQ6FJzNr93xlobTIB9NGgf7g4l0GaiO6/dsGF1bT6MthxGW7EQTuV2u7kUrO2W2w4/6uAeX0N2FE1ePEFobBhhm6TPXAZNlh3vtttuz+CeWENGiyZOWZEjvOCytiYHcDwNt2clWKczgxY/nOd8UyjuwpSM5AvFCs8gND2Iv9SJPTAX1GDJIqMezk3LmI90osU3n/+70ba8EUgh8QdSPHvoeWizkYrd3QQCfSaC2xZIKz+UQU+Ur2EjXAOpB9eDjHnIWO2pMvpaK9Z0f/48B4LUn9wQPdAWw2jLFt5IAhn1kKZL5uhVwleOlqyXH5djIByzRETkqLcOzl4Uu65ln4ODg4RCQXRUNBplYGCAgYEBBgcH6e/vZ2BggP7+fiKRCD9m/jyyzcFvz+C328iWQqFit2sF4Zh4nUHhdWQQdaVPtuTrdfk9qeDvgaDmz7pihK8TmhzEjcewh2YDGWX5eCfWyCfTOSLb1rzw746WFyIyBsLfu8LJqiaZQlE/d955J6urq7S3t/O2t71t19fb6boKhULRLA6MzLnvvvt45JFHuP322zlz5syWnahyj/f392PbNrZt89u//ds885nPRAiBEIJnPOMZzRx6U9mYhlPrF8hGRWV4/UWdZua6y4qcHMZaG258Fb8lCREPvzNTdQ0bicQ5swJGIEX05Tb0VARtxiTdkihMzlwNfT6y7ba8kTjeSBwkGE92oC9UXqfsdnQf7+h60G2nWADEo1jTfQjbInNsIi9yxKqFts3YAKTl4Xdk8LvS+N1F6VoyW2B2tgfhFwSUQGAsd+RljoxUrnWRQ006ymOMtWB3ZYJ0qvZ13PVVjLVCq3stEyY0NoIfS+JFk3itcWQ4E9QuunEZ89EOtLXNMq0eoeOHXdzrsl3LHmtHq6OQ8FZI3cc5t5ovMKx1ZjAe76gsdIqKBpcTIjnCV47idq7gtcTxI+nqJ/aehr7egrHaXlYUacloUFhdk+BoGE+0IRBoyyGcm5cCoROyyYxcJTR2FCFLI/Kcvnn8aFYspbWS1LHt2A0h14yIrDvvvJOzZ89WtazwNcRKCG0lkD9S97FvnQ9ESms8qBOVfS/1sVaMyZb8ujJUaDcu0lZDumUZq21oyQjOwBxee7z0STMooizbykTE2RoirSMyevb/RvD/hLkrUZrFqCLzCkX9fP/732d+fp7e3l4AXNdlbGxsy+UnJiYYGRnZtN5O9qlQKBT7kQMhc774xS/ygQ98gNOnT3PLLbds21JcSsnQ0BDvf//7mZmZ4eabbz60UTjFbFUgt9ovkI0SOVLz8XuyRXc9DX21ddt1jMVO7JZAAHmDiapljjcSz39pF7aJNd0X3PYMrPEhMscDaeIPJvHiJvpctPyYLQ/nzEqhULMA98wKQE1Cx2+1cc4tg1UI9xe2iTndi74etNS1B2fxcxEJGQ3zfPmJstR9/HYbvz2D7Mggo5sLuWrJMNZUf0n6WjEiYwUpEholUTxboSYbWyMyOsbF1iDdB7AHZ9FSETSn8NkiEOiJGHoihlzoJnP0ahCpYwTdkszHOvIT4mJqEQLS8nBuXIZwtmvZjdkuTPbOIsny275+pVDnCvC7bZwbVjAfbUf4W0x4M4XHpbH1eSY8A3OhB3OhB6l5SMtB6l5wW/fA8JC6HxQtNjxwdYz1VrREdJOAKdmu1NCSkUAIh31kxAuiMlwN85FO7JuXIOTjR9NkhicJTQwX6vi0xHF7srVcfDAf76h5Yt9IoXMgUuu8QI57RxKggd+WTUtzBPpM6Wes11MowG4UFcbeKZpjEpo4gj+fzrc2z3XB2lIoWj7S8pFsED0+GFfa0KYbEBVaASV0FIrGMDY2lhc25RgZGWF0dLTJo1IoFIrms+9lzre//W3+9E//lOc///n85E/+JCdPnty0jO/7aFrhy7cQAiklR48e5ciRI+j6zic5+51KIqaaL5CNrJPi96TzdRj01daKk7Ac+noMYZvB5K7Txo842xYm9lvtIIoGQII1MVgSmaKnIlhT/djDMwC4J1cRSWNTqpHXmcY9vVKox5GjRqHjdaRxzy1Dbgi+wJzvxljozL8GXksCt3sl+zyYj3eWpHNJIfGGEvhdaWSrs3XkgqtjzfagL7dXnHwIBMK2kGEbGXGRQm4ZYaEmGdujz0fwO+2gHbfuYx+ZJnTlaNn3QEiN0PgwmeFJ/NYE6OBcv4Jxvh19cbN8q0YISN3HuWElL3IACAePmQ92Vt3qvhx+xMW5oSCJ8oWddR/ZYePcuIL5aHnRUdySvZLMKVnHD6IjGoUejwUyh2xKYSr48yYyOuajHTg3LYMh8VsT2IMzWNMDSMMlMzRd2MaVlrLpcNXQCKFzEERODm0uK3OK0CdbNp2DxfXA9NXGyZz8ONLhTTJbaj7SCuSOH7KRlh38bTGdQifDko2Ae2INrT2DcaF6mSc1H78/FaSWVZkerISOQtEYRkZGys4JFAqF4lpi3xZAljKYWH/jG9/g9OnTvOAFL8h/aD/00EPcf//9XLhwgUwmg6ZpeF7pF7R4PE4qlULX9fy2DivViJjtZE8j8foKKVbGcnuFJQsIBMZiR2Ebg8mtFyY7qT2zkpcd5lw3emqzcDFW2gvb1QiKMme/zEshcY+v4V6/nBc5wjEIXRrBWGrPDQz3zMq2bXC93hTudQWRo8WjhJ84jjnfXSKznJ5CNxfjUnuJWJKmF7QSP7YeRBsVzwskaIkwxlw3oUsjRM6fxFjuqGryoGVC+eOX4fJtmtXkonqMi62QDt5TP5rCa13fctmg/fUw+lo2Ok0D99wq3hYFrytN5qUmg6iZWKEWVa67j4y5wXNafZ91fquNc/NSXuQI2yB8eZTQ2Ehe6sg2J+jmVWYyLDwtX4S8WpnTaPR4IbXH7ywtsqslTMzHOvKFfL3OVZy+eezhqSACCNAWQ+hT5SP3qmUnMuYgiRwI2tKLYvG1ISpH6j7ucKFouJaIVEy3bSTC19DSYYzVNqy5HkJXhwhfGiVy/hSRR04TfuI4oSvDmJP9pQWVuzPYT53Hb6tcpFki8bqzxZdPrOGeXMO9bhmpVVeAWRWZVygUCoVC0Qj2rczJpVI9+uijDAwMcPToUQB+//d/nze84Q28+c1v5lWvehW/9Vu/xfz8PLqu54XO/Pw8b3/72/ngBz9IIpHYNi3rIFPLl8Kt0rCKkZqPO7qGO7pWV8tXP+Yg27NpT2kLLbXhF1MkvuHgG86mts3GcntQ94KgS4nXmQ5qMWxAInFPrkJWTGiJSNAiegvMmT60RFb0hHycs8v4EQfn5gW8ocIvy/paC+ELx9CTUcyp/qqFjjuYCCJ4coEMqy2Exo6guaUTFz+czkcOiKSONluQT36Ljf2UhfxrB8HrZyx2YI0dIfLYKcKXR7HmetCT0Yr1SzaipYuEUZnOSkrk1IbwNIxLhdTB4oLHZZdHYF0dQl8p6i52Zq2krlQx5Sb1Eol7drVwfrg6ofERQuMj4AYGUbY7wTJVtrnP4XWng7StnNBMhQhfOYZmh9DTEcJXjhb2EXNxbl5GhsoIHTsrffZI5gjbQtjZjlTt9qaJtbZqYZwvdB1ze5ZK6uQYT7Y1JMWmHilz0ERODr3oMywXlSN1P+iy97Q5vNFCPRu9gSlWO0FIDc220OMxzOUOQpODhK4cyZ/jhHycGxcDEVXmWvLDLs71S7jnVvJdBAH8rgzOjUtVd9RSQkehUCgUCsVO2bcyJ0dx+tS73/1uvve97/Frv/Zr/Nmf/RnPe97zGBsb49WvfjWzs7P5KBxd13n88cf5xje+geOUbwt8GKjny+DGAsnFSM3HuX4ZbziBN5zAuXkRGa5+YuZHHJzriyJPsilAXiRF+tg4qdOXSJ27QPrcJdLngtup05dIHxvHi6QQvl6I5NEl7vXL2D8wi3N6Bb+9UPDX703h9xZq8lhXByunGklBaGKo0Hq43cG5ZaFQF8QXmFN9WONDCC/4Qi8Q2wodicQ9uo53Yq1wzIvtWBNDZVPLnO7l/G19OoZABL/w9idxblostBd3DEIXjxK5cBxruh9jvaUkfaxWRKZQo2Vj3RwlcupDW7XyUsCLbN+RSSCw/v/s/XeYZNld34+/zrmpQueuzmnSzuxskFarlVEAWRZeIyF5jZAFtgQSksGy+fE8guf7YFlO+OERSGADEhaLDJYXHDDBsjHR0gojBJJQ3KjNM9MznWNVdeUbzvn9caurqqdzV3Waua9++ukKN1X1vfec8z6fz/szO4S52rX+Av4dOfzhwpbLNw7uNRr/Qq5ueh1IYjfGkG5oJuvcGK1Fz6jeCv6FrQehWxEMFfHvzG6MKLs+jvDrGbiyEiM2OVG/fuIB7r2rqKqhtkaH0TrrlYIMhRZHXyJaIOrRORJU1+Z7v7ES2yDEAQf2ydmJ/Ygzp1XIgTC1yJhqC3/nknUR50yunraqw/viXqM0jwMj30bspQlkvipOCQgm8qE44/jhJETMxx9fw3vFUs0cHMJrpha91u7h3buMdvbWbkaCTkREREREREQznCjPnPWy4lD3wXnggQf4wz/8Q/7iL/6CGzdu8N73vpeHHnoI0zS59957ufvuu/nVX/1V/vW//td87GMfI5FI0NPTwyOPPIJSiq6uruP9UIdEM53A7dYNRgt1A2DCgb93KY39xN6c/P2LmZrxryg5mKtdBPESlfM3tl7BVGhToR2PStsNnCvjmMs9BB25eiqHqVH9JVR/Cbkcw7zWgd8gntizA3sK3Rf+RkPkde1HVGycqaEtDYTXBR0Avydb99AxFTLj4J3Pbig7bi72Yi32biksaakIOqvHrcLSycFggWC4gI7XoxxkIY5zY3jL8skHpbEcb2NFq0jIOTgikIiCiW7z0bEKWga7Cm4CgTU/AErWDHeDc3lkzqqVcG5kfZAfjBdQg1XBSIMzPbLhfDXKcZzpESrjUyBADZYIAoFxrW1HkTPoKeOfr6eIGZkO7NmthVHp2jjXJqhM3EA7XujTc/8KomSEUTo3fXRt+YgWVC3aLzKfhJ4MAKq3jLG62WzamEugbUUwFgppzfjk7MRePHROs5AD1fTYG6E45o/n6h5mVeRaEnu+vyUVrA4b6Vs4k2P4fSt4/Ssgwggv9/4l8OUGU3sIUxGt+X6MtTa0U6FyZhptBehEgHf3KtbjfXsqhR556EREREREREQclBMVmSOEoFIJZ5/XI3Luuececrkc/+f//B9u3LjB0NAQpmnieR6mafLGN76R7/7u7+bFF1/k6tWrQCgKDQwMMDQ0dGyf5bakod9qNZj+7gfpWcReOIdzfST0Mmgw01SpMu6rFmtlyOVaEnMfhprrhsi15+kOYlcmtq0EBdtE6Jxfw33F0gYhx5rtx15M7TB41rD+fUhwH1jEP7+2QcgxV7pwJsdaKuSoWJnKWN3gdd2odqfBw4PG90czxntAZqsDVMGOvjmNCATWYt8GI1htbx/FEgwVCcar0Tsa7JnhLUtzG4Uk9sxwPVpopEhwNr8hQkej0Y6P6qoQDBbxz9UH3uZyz7ZCzjrSt8IInbKz/mHCCms3a1iBrEXxHDVGIVmPUuovo5JbR2Ya15OYz3ZiPtvZtE/OTpx2saZZVFsBb2CJoG3rCLSThkBgLaVwro3Vz2HJRiFHCczFHmIvnsVca0cgkJUYztWJsHogYfRaMLG3ewJEEToRERERERERB+PEiDlf/epX+Zmf+Rne/e5384EPfIDf/M3fBOBv/I2/wbve9S6+8Y1vUCgUmJycBMCyLFzXxTRNvvd7vxelFFNTUwC3tEfOOs3M5D0a/M6W6xvTSUS2ocxy0cR6vnvP2zVu1A1IvYFltFAYpTjOlXFkLokoOaFpa6X661qIkoPMJXGujNcMjIWWGLk2nJkh4s+dx54erPsZNCDLm2fdd8PMdBJ7aYLYSxM4M0Pbl1puoCboLPU07Lz6nmuGRpqrO39PQhk4U8P1VJSG3cp8AmdyFHtuYF9eOLuhYmXKZ6eg6n0ksjbG9fZdhZytHt+u7BRZIZfr55/fubbtcjcTCiZ1kUUUtxY+glQZ/1x9QGjND2CubS9emmsd2HODGwQd/64M3l1p3PuXcV+7iPuqFbx7MvgXchs8p6zFvj35xYjAJDY5jrWYCge7SiAqNjKXxFztwprvJ3bl7IGE3FYgtMRarvpnCfDP5/BHCvhjefwzObxza3h3ZPEvZVEDpdBo/JAPdSdBp1XlzA+bvbQ3xo02zCsdiFxDlJOEoDNP5cw0leH5Y0m/OwhGMUHsxTOYi73gGRAIZC6BNZ8i9tIZ7MW+Tee49Cyc6yO1e3wwVEC172yk3Eh0v42IiIiIiIjYLycizeqzn/0sv/zLv8zw8DCXLl3i6tWr/NZv/RbpdJof//Ef553vfCflcpnf/u3f5j//5//M0NAQb3jDG7DtUHh4+umnicfj9Pf3H/MnOVoeDX5n3x3Axk75zesLJbGe6a6FyhvTm8vM7oRcjSHSNrrbRds+QWcOM9OJUYpjXB+tLbfeod/LgE9oGW4jl8QdXiDorEcTNPp67IedInG2PQ4E9kIfwjPxhhYBMFe6w0HtHgQhCEsnOzdGqIzNglAY2Q6sle4DHc9ubCXkWM908zlv+8HjdgbZt3sKwKPq97YckIucBSUD4gEqWUSb/p7PSeVU/W8Um8pza3QYWTORr0W7mUu9WOndhVUz0wWAOzQfplz17DKYVAJ7fmBfxr9CGVjLKazlFBrdEtPgVmKuduN3Z8JS1B0eQcdOvmku2lBYLx2un8tOKVfbnV8njd3aG4HAmE9izCdRCS80se8r1aJagp4s5UQJ58Yw0t2/EH/UCGVgL6awF/d+nkvXxlpI4Q0tVX2xMntOt4LofhsRsR1vfetbKRQKJJObI1MPY71m142IiIg4Ko5dzHn88cd5+OGHefDBB3n729/O6Ogoq6urfPjDH+bzn/88b37zm7l06RLf933fh2ma/Lf/9t/4+Z//eZaWlnj961/PSy+9xB/90R/R2dnJxMTEcX+cI2c/gs5WncStBB3z+sGqjggE5lQ7XvcKAEFbETOzeZB0kFl7EZjYU8ME2Rze4BIgMLPtu67XaqzVboxcW1gq3N+/z4aRTxJ//hwg9iwC7ZdWCTmN793uA4ytBtwCgbEUC9OgBPgda1irPdtsoU6Y7hSKLKJkbojG0naAdzGLbjDvNdNdWEupPR/rzYIOEEbQuDbStap/bYRrIcux5sy1T5iQA9XonPl+3PGZPS2vBssEWRtjKb77wg2sp7Dt9Tu4HQSddWTRQk5aGNfbUX2l0OfM0OiYS/n8dezZAczsyTVEvpn9nOfmSjdBZw6VKNfSrcxre29To/ttRMRm3vve9x7pes2uGxEREXFUHGuaValU4nOf+xzd3d285S1vYXQ0jN7o6enhR3/0R8nlcjz99NMA9Pb28iM/8iP85E/+JLZt84lPfILv+77v46d/+qe5du0aP/uzP0sqtfcBz63EXjp+Oy3Tyo6jyFsQVE2sk8V9l0necdsIzLUOYi+cI/bC2ZZ6y+wH6VkHEnLWEco4FCFHGz5u/3JLhZz9LHOrs9VAXC7Vo6qCPaZaadutG3AX60JKkCrh3r9SF3J06GVjze0vcgZCQSd25SzO5DjxFy4Qf+4i8atncaZHsRf7MTNdGMVkU0LOScbMt+Ncm8CeGcKeGsa5MYozOY5zdYLYS2eJvXgee3awtrx/Ya1WnWsvqKSH+8Ay7gPL+1rvdkm5WkdogbGYwHqiF1Go3q8NjTs2f6rSrvaDQGBPDx043Qqi+21ERERERETE3jh2z5ypqSle+9rXcuHCBSA0L9Za09PTQ0dHB9PT07XXIQx7/KVf+iU++tGP8t73vpd/9s/+Gb/yK7/C+fPnj+0znASaFWv22kHXMR/35cu49y0R9JQ2iTVCC8RaKHRoy0fbrS8NL6o/ESHK8nCHFihduorfv9JyIecgy96q3DzgliUTkQ8HqSpeRtm7D9pqKVaEfjnaUHgXs/h3rtXMvYVn4lwfw17sP/C5Ll0Ho5hA+OZteb0YpThmthMz14GRb8MoJjDKcaTrID0rFLTWy2Ub4N+ZRcvdxWeV9PDuTUNMQUzteb11bjdBB0CWLKwnU8iFevRT0JOlfP46yq7ssObpZD3dCqilW9UqNO6R6H4bERERERERsRvHKubE43E++MEP8tBDDwFhOXIhBEIIenp6SKVSLC0t1d5b5+zZs7zmNa/hh37oh/jO7/xOBgYGttz+7cZ2aVTNrN+INhTe5TS6zUMnffzLGby7VtHOxplpma37Iahkcc/7j9gfynKpjMxRvngVvzcTllyHMAVsId5SIaeZdW41Ngk6jdE5HbtH56ynWAFoS+Hev4LqL9deM7IdxK6cxShGefqHjT0/gChXKxAl/TAdaAdqQo7ZUCUs6W8wqt4Lt6OgI5TAeqkL84XOWvTmetrVfgzETwvmSjeyGN4bdDzAfcUyQWrzBMhORPfbiIiIiIiIiJ049sic4eHhmhizXo58PQrHsix8PxQKDCNMB5ifnz+Gozw93Gxw3Mz6N+OfyaETG4Ub3e3i3r2KFvUOqlyrV8QKIjHnUNBoyuduEHSv1X1RAoExm8D+Rh/WS10tF3Jase6tQuOA21iK1SpI+d0ZtLlz2k1jZI4aLoFTFaoDiT09jDMzfMumP500hJY40/UKRGqwHJr2boFG413ObIieWkcNlrYtg74dt6OgA2AsbZV2NUeQuLXailq61XolRkvhX8rgPrCIP5ZD23uL1InutxER8Pa3v53Xv/71vP3tbz+S9ZpdNyIiIuKoOHYD5K1QSmEYBrFYDNetz2JPTk7ycz/3c7S1tfHv/t2/O8YjPFzWO28H9bJp1gNnK5NLLTQqVR3kBAJrvh+/fwVt+RAP0B0uohqRI/IW+AJMTdBeQAt1bKWKb2mMerSacaMNYy6J8MPvea/lxyMOzrpprXANZNpG9bhoy6c8NkXs+vi2gsxWFa9kIYE9M9SUF1PEwZCugz03iDsyB4T+OSJvIUs7N4/a2rtXzkG4lQSdm+8562lX/rmwRDyA353FKCYO5RiPC+naxF88s7ESo6MIxvMEY3lk2kHOJ5BpZ8dUyL3csyPT5IiIiIiIiNuPEznCXo/CicfjlEolfN9ncnKST37yk1y/fp33ve99x3yEh0djp+0kDbpVV6U2I22stWOlu7Dm++rvdzf4gGiBXK2mnhgK1XZrzbieBAQCWaj7T8iVWE3I2YlWnFPRoGEz5ksdUK5GFsYrVEZntk2nsBb7NvzvjLU2nOtjkZBzjJjZzl39cwQC++luRNreuLIC84UOZGF//7/TItYcFkIJzCudofAPBB35W9MQuVqJ0ZkcxVhL1qL4EKB6Kvh3pXFfO0/ltXPb/rqvWCTo2zlF6yT1FyIiIiIiIiKOhhMp5qwTi8WoVCo1Ieexxx7jl3/5l7l8+fJxH9qhsFVn7KR00FSq7ulhroUlwY18vWOqussblpfLdR8Rv2N/fhIRe8PItdUeq57dTUQjIefwEK6B9a1u8KrpOm1F3OG5LQdfQkucG2OYK92YK93YM8O3pUHxSSP0zwmjC7fzzxFlE+tbXZjPdiIKBqJgYj3Zg7G4v7Lmt7uQs87tIvwLBEY+iXNjlNgL57AWejek6SF2/tWJAP9iBu9lK6iO7e/1J6W/EBEREREREXE0nEgxZ93s2HEcstksH/vYx3jsscf4xCc+Uat6dauxUyfsuDtoWmhUT1WsCSQyH4bCi8BAFsNBjE4EG4yQZcY5lTOuyq5QnpiiPDGFslpfiauVGLm6Qe7NYtrNRELO4SNLJtYzXVC1wgi61vD6l7dcVmiJvTCAvTAQpSCeEEL/nOFd/XMEAmMlhv1YCvuxXmQ+ishphttN+JeehbWUIvb8OZzrIxjZNmQxtu3vukE3gG738O5dxbtzFRXbOs3vuPsLEREREREREUfHifTMWTdC7uvrY3l5mWKxyMMPP3zLlh/fS+frQeP7j20wvTHFqm3D4NPIJVHJcMCjeioYc+EptT7jqvpLtRnXxkiSk0jQlqcyNlfzoqmcmSJ2dRwRnMjLBOnZiLKNjrnodg9tBQhvs09LJOQcHTJnY77QiX9nNixJnFpBBBJrpfe4Dy1iD2zpn5OzkOXW3AMiIWczNeHf1KHwP3t7eKwJBEaubU/tYpAs4A4uoeNhVI7qraC6lzDmExhT7ZtSbI+zvxARERERERFxdJzoHtMb3vAG7rjjDn71V3/1thZyDrJsK9kqxWqdxuiQoHtj+PdpmXHVaLzeVSoTMxtMhbXjUT4zjZZ7qzpyHNQGAqIqut1EJOQcPcZKDPNq/TrxBpbweleO8Ygi9sMm/5zzuX2Vk96OSMjZmtsl1aoZjEKS2JUJ7OnBumAvIRgu4r5yEX84v+kcjSJ0IiIiIiIibn1OtJhz9uxZHn74Yc6cOXPch3IoHKSzddQdtO1SrNYRFaeW+687K2hZF0NOQ6qVFgp3ZB5vaKlW4ttvH0RZ1fSxeIXKmekNn+sksSHV6ibfnEjIOT6MuQTGZH3GPRJ0Thf2/ED9vtbtonp396TaiUjI2ZnTIvwfJwKBmekk9mLoubOeDoipCc7m8M9nI0EnIiIiIiLiNuNEizkAtm3vvtAppJlO1lF20HSnW0+xyic2hb+HoeJVQUFCMNDgMaFBFKvpCYZCJTb7Txw33uAiQXfd6NTtu5Py2KspTXw7ygzNUFWivK33yXEji3GohtirnjJBT/gdR0LO8WNOJzcJOkH85F0DEZsRWmLN99ee+2cPHp0TCTm7s0n4b0Ek1K2KUDL03HnhHMZqZ70IwWCJ4MxmISwSdCIiIiIiIm5dTqYZSERTrHfeDjoY39D5C+pVdoL2AkG8hFHaWLnFyHbg92TDZc6uIcoGMuvgX0yjOxpMhNXJ0g5VrFw7bi0k5ZEHCDpHwudOG+7A3cRmvhk+P6GROeFsbQd+KgMS/MsZ9JSPcaMtqpDUJA/KdzS9DWM6EQqc8WqqnogGqSeFIF4CDUZ560pURq4dWUigkkWIKVS3i5F2NiwTCTW7sxcxQWiBzDhhSq+h0LaLcJ1d17udkb6JMzuIn0/gjs2BgGCkgCgZGAvJDcsehaATif8RERERERFHTyTmHBOPBr9z4A7WTp2mxm0exATx5mOSORs5l0ANFUFq3PFZYi9NbDAFNgoJzKUe/L7V0PT1UgZRMtBt1WobGuzZgU0i0HGi0biDi7XUKrf/rpqQs45RqEfjnGTzZmuhD20GBF3hrGwwlkd1VJBZB1E0w9+yidD7E3duZxPNVgg5UE19qwo5ouTUqr9FHC9BvETl7HXQ4NwYwygkNy0jEJgr3bjJ0MNFDRY3iTkRO7OfNq4WxQmomIuMxJw9Ya51oGcV3sgCAP75NUTFDKOdjpDbub2IOHz+1b/6V3ieh2Xtr3rgQddrdt2IiIiIoyISc46Rgwg6exVyGl/bawdru2Mxr3XgJTx0p4e2fCrjsziTYxvEAWshhba8UFAwdF3ICSTO1DBGfvNg6TgJ2vOotmoVLjuJ13Nu4wJaYebmqgsLjJu8gk4SQkvs6SH8UgxvMPT+0Z0eQWdjVBSIkhn+Fk1k1kau7d7Zvx076HsVclSHizY0MmdtqiYDoWAYjBdqz62lVBQtdUII2vLhAwFeamVLMQfAyLchPBNt+ageF20HCHdzxbiIzey3bWsUc7RTAdq3XzhiA1a6C+24+Kl0eE5fSmM91YssNjcI1aYiGA2vFWM2ueu5fzu2FxFHwyte8YojXa/ZdSMiIiKOipOV93Ibsp+Oz36FnL28t5dlhBZYz3dDperNkizhDS5uXAaBPTOILNQjD4RrErs6fuKEHC1UaHhcpTJwD8iNnVSjsIwIQjHEyLWd+FK5AoG10oMzOVozbt2ABJ30UakywXge795Vgq7y5uW24HbyXNiLkKPR+GdyeC9L49+dwf22Jdz7VvDP5gh6ymgzTMlTPZWaqClKDkZ+f9FduvoT0XpCsSBEJYsoZ+trQSAwMp3rTzZ6gkVsy0HuGRsicxy3lYdzW2DN92Fkq/cYU+NdTqOtg1diVF0V3PuWCEYKBCOFsGrWxFrt/rYdt1N7ERERERERcdyc7BHqbcJeBJ2DCjl7WWZPngaegfVcN1T7cX5vBndgacNgU2iJc2MEYzUs7Ru7OoGsnLxQeb83jbZDocZPpgjahzYtY67N1B4ba6dnhtgoJIk9f47YC2ewbwxjLfRiZNoRZbv2v1snmNi7qevt0EHfk5AjNP6lLMFoQ/lkAbrNJxgp4t+VrYs75+pmpPuNylGmR/nCVcoXrqJNf1+fI2J3VGxjdSqvd3XbZc10V81kNhgsRQLbLhz0XiHKZu0edfP/J2J3BAJ7eghZrFYGiwWhoCP3d75qqfHOZfHuXgWnodGQEIxWRZ2R/I7bvR3ai4iIiIiIiJNAJOacEHYSa/Yj5Gip8Mdz+OO5Taa926Vh7RWZtzGvdNae+32ruKNzG0qOi8DAmR3EmRlE+Ccvi0+bPl5fOHDTgDv4MhA3DbK1xlirplgpsaH892lAIJCug7nWjrWUwpkeJv7SWeLPXCT2whlEKRTYdJuP6t77oOlW7qDvScgxFd49aVRf9TvTYGQ6wu+zcVxTFXeIhdfFQaJy3OE5tO2hbQ+/M7uvdSN2RsugJuauE3SuoUxvy+WlbyHXowud0Ag5YmuauUcILRClajl4241EswOwPqEi3Or32O6FhQj2+F2qNhfvvqXQI6+KzCUwl7s3lkI/k8O9f5Ggv7jttm/l9iLi6Hnsscf46le/ymOPPXYk6zW7bkRERMRRcfJG27cxW3no7FfI8e5Kh+XECT09rGe6EQ1VpBpz2g/S2TIWEyA1/rm1MO2gK0fF8sMOZHCyvSQ0msroHBjhINvvPoOKdW5aThZXkEE4YDdyyROfYrVXBALhOliLKdyJMPIoGM8h086eo0ZuRU+EPQk5ToB3dxqdqKYtKIEzPVITabQMCBJFVLJIkCiiY5XQXFuDvdi3r6gcLQNUW30wpZwoSqGVbPg+FeGUhgC/O4O91LflOma6C7c99D+KjJC3phWDd1Ey0Uk/TAu9RSpaKdMDqRGudSSeWcI3ca6PUj53AwyF6q3gn1/DWI6BJ0PfG19sOBYtVZhONZavFQVACaz5PszVrpoZuNe/TNAVtv04Cv+OLGKkgDHZjpGObTqWW7G9iDgePvzhD7O0tERfXx+f/vSnD329ZteNiIiIOCoiMeeE0Sjo7De1KhjP14QcAN3pEoznMSc7dl13r2g0ImsjMja6OkOtkiXcwUWcmc3pSicBjSZoz+MNLKNj1WM2Y1T679py+ZrxMQACLdQtI+gAGMUYBDIsAdzmo9s9RM7e8/q3Ugd9r2bH3p2ZupDjGzg3RjeUtBbKwMy3Qz5MydMyQCVK4Bvblr7ejqA9t+H5SUyz0mhUvIy2XERghkKubyAC48RfKxtSeBoO1e/ObJsOt8kI2VCI4GR/zqOkWSFHS4XqL6Ha6+2Xck5vRSuNRiWLeKlVVHsozArXwsglMdbakMXEvqsL7gdZcXCmhqlMTIMIBUg12JAaqqkKOxI8iW73wKxH2MhiLEzZcuvtgvQsnJkh1HIP3sAyQUdojKwTPv5daXi2G2M1EnQiIiIiIiKOkkjMOcHsu4Mstgh33uq1faKlQnW5qK5KmJYTO7ip4m6oWLkWPSNLDrIUq/02lkPfK0GiiDe4hErUDU41gvLoq8DceqCgjXoHNujMUY6XsWcGtq14c5pQlkf53PVadBKaevh8i9iLGNkMP/rAB5GFepWWR9XvHcp+NmDUryNnamRXgUYoY9+pVTVUQ4Sb5sSlK2rDxx1aIOjIbb1AIENRxzdASxAKLTRIHd6PhA5TM6VGBEb1+o6Hf8sxhDrcCL8tDcJh98H1FtdJK0rYH8n5e0LRaILRPMFwASzd+MaJO+/3ghaaoHMNrzeNjm+MqNO2h9+bwe/NQCAx8gmMXFsY/blN27bBk26fUT1GPok1O1ArWb4BAdgKbd9kpKbBWuzFXOrddn+y4uDcGAnb1oElVDJsW/3zWWTW3rfIudd+TiQIRUREREREbOb09ZZucZqZ4ZTzSYLh4sbX5vYvQGg0Oh76qajuCrrD3dZdSRZjGNl2zNWuAxzxRvyOHO7oXDjoAwLLJ+iol3YWroksV4Wdsl0dMFajAgK5ofOpnAruwBKqYX2AIN5DZfBeVKJn2+PwUneAVtjLLyC0QtselbPTGJl27Ln+A4lKJwW/dxXWK5x4EvNKxwZhZC/sNWLsqGZkH5TvOPCA+FH1e3sakMvlWK3MuEqUMEqHV6rezLXD1Aja9DHXOjhJ1iF+ew53aB7MHQRdQ6ENtcmXZiu09AmsfG2WHw2iYiPLobhjFBItj84w8m1YcwMgVU2QMnJtGJnObQewOlZBO+HnEVmrpVE5zZy/J4WtUoT3QjCWJxjPb3hN5hNYSz0YpThaaLy+ZZAac7VrQ6TIUaEsD236YXuzRVsDYSSe3xMKNdryb1o/gbaSyOIyYv1iNhRBZ56gMx+e855VFTk14QvV3/XTzDcwMx2Y6c59FRWw0l0YpRhBsog2A7Tp1/6y/lcQesNlO7CWu/e8faOYQF4bpzI+E7azdujXZ13bnLq8Hfs5Z6IIn4iIiIiIiM2c3lHpLUizoeqyZCKXYqi+cKZMLsWQ5f39i1XMx78zHfoWbLmAQBbj1XDxdqS3PyFgKzQar38Fv3+l/poQCL1xFKttn8BuGPht3AhUowGEkqh4mcb+tnLaqfTfTdA+uNnw+GaExOu/jN85Smz2cYziMhD6A5XaCtgLfRjp7Qd+JxUtFH73WvgkAPvxVOifsA/2m/p3qwg6xkJdzPG7spgrPbv+/1Wseh2WN6ce7IaZO1kV1LQMwmiczrX6a4aF230BoQNE4CL8CiKo1B+rupijhQQhq3+N8LGUSK+EUA33GgE65hLEXIKuLB5grLVhLaWQlf1/j1shEFjpboA9/R+BDSbUxlJrjqOR21HQUW1u6NECNTNxa6V7w/Xip1bw+0PDer83HQoOi71HJuoEbQUq49MbJzPW25r16DMlUYnihug9gCDWjddzB0H7cNjmBB5GYREjP4dZWEAE1ZQywe7Cpxngp9L4qTSyGMNMd2JkOzb44W2HLMe2vQdpdBilqcSB0iMFAntugHLbNZAaNVRELcWR+d3/Pwfp70SCTkRERERExEZuWTGnWCySSBze7HmraVXlB/N6O15b2DG82StnN1TMx7tnZWM5Uuq5/jKfxCgk9tSB3CtaKtyRuXCGsorXOUZl+BUIv4RRyiBLaWQpg1HObBz4bThIqjONwYZABmXGcPsv43eNg9jfcWunndKZb8fMXMdZeBoReGAq3JEFZNca9szgscwUH5SgM1dLr5Ir8UMXchrfO+2CjqiYiKyF7vTQjouKlXdMtfJ6V/AGlgBwrk7s2zfnJBG05XGH5jdEHPhtQ1SG7kObOwgbWoHW4XW3nYCqNcLNYZTSGKU0spxGlrP1CAYg6AgFXKNanW0/kQm7sRchR6PrKWUK5ErrxRy4vQQdLTX+xUxNcDeXerEXUxuXMXy8VEPJeAFB1xpB59qRiDrK8sKU35ubjca25qZTUQNB2xBezwVUvHfjeW9YBB0jBB0juFojSysY+flQ2PHLNcFz/VdTvW6EQJYzCB3eu1WijJsow+AiRrYarVOKHWhyQSCgycIF0rOwFlJ4Q0uhkfj5LNYTW3tPrdNMfycSdCIiIiIiIurckmLOF7/4Rf7kT/6Ed7zjHdx3333HfTi70soSnqJiYn+zf9/r3SzkiIqNudoZ5vO79qFEoSjLozI+U/MW0IA7cA9e7wUQAm234dtt0DkarqA1ws1jlDIIr1iNBHDDaAB//W8lTI0yLNzURbye8yCb6KwKgd99hqB9CHv+KazsVHjsyRLlC5NYCynMle5TEaXjdzdEF8zvT+g8qJDTuMxpF3SMxTh+ZyiUBl1ZjPmtBZpGIQcgaM+fSjFHywB3YJGg4bzR0qIy+DL8jrE9RbjtelkIgXY68J0O/K6J8DUVICtZjMIyVvoK0g8jnIKOHEF7ri7qHJE5rkoUa0KWTNsI//CMj28XQcefWEPHw1Q9WYxhLfZuWsbrX6lFu4g1Cx33Q1+dIxB1tNC4Y7O1dMIg1o2222C9vQnc8Lc6uaCFxO+cwOs5j7b3EFUnBCqRQiVSeNyz+/JBBTM7jZWdRFaq0XGGJujJEvRkESUHe77v2HzdzJVu/K41dLyCbvMJhguYs1t7hrWivxMJOhGtYGpqasf3tT5BOc4RERER23DLiTmf+cxn+KVf+iXuuusulpeXj2y/y8vLrKysbPne9evXt12vlULOQdkk5JQcYpOjBzMcjpfw+pfRlo8sO9XfGLLkbNhekChSGa93lrU0KY++KkyD2g4h0E47vrNDZ1lrUEEo4Ow22NwH2nSojD6A3zWOM/s40iuA1HhDSwSduTBKp4URA61GORVUsgSAKJiI3N7T45oVchqX3a0DftDraMN+DknQkcsOnAMM8DvXsBb6N6Um3CzkAOhTVlpcmR5+dwa/K1P3VwL85ACVoVegrUMWpqSBiveg4j14PeexMtewll9ABmG596AzR9CRq3p8pA49Os5vSC2TS4cvyrVC0GnFddQMOwk6qquCWvd2UwJ7emiTGK5sF78nEz4JBNZz3aAEwWCRYCS/WdRJd4Z+Zi2qpOYNLtZM85WVoDz2WjC2OM+0QgQuWlrNTRrshuHg95zH7z6HLGcws5OYa9N1MSleqfm6WfN9SL/59Of9IBDYswNUzt0I/y/jeYyVGKKysQ/Ryv5OJOhENMPExMSO709NTREEh1fsIyIiIqJV3FJizpNPPsknPvEJ3vzmN/P2t7+d0dHRI9v3H/zBH/Abv/Eb+1rnuIUcLTS63cO7mG5ayNFC4/Uv46dWa7PxQcwloF7xRngmouQgPQu/O1MLX1d2ktL4q9HO/tLCtkQIMA7vtA7a+ileeCP2wjNYq1dC78hEmfL561hLvZjL3SeyNLPfnak9NhYSe44kapWQ07jOTts8yHW05X4OQdARgUSuxFD95dDAtC2Pmaufs1sJOXBTKewWoSwXd3gu9IbacJAbZxKFb2Lk25CFOMK3wmvQNzecoxodpo45FfzOLKqtsCGiRkuTysC9+J0TLRVI94Q08Hou4HWdwUpfw1p5ARm4Gwby9sxwaBR9CGxIsQpAru4u2Gqh0fEAHfcRrkTm9i82NSvotOo6aoatBB1tKrwLmdpza75vSzHOG1iqnYPGdBLhhUKJOdOGMZ/YLOr0ZPECA3uhr+nj9jvWwopThBE3lZG/sbWQA2E61E6phq1GCFS8Gzfejdt/L+baDGbmKkY5PN6gK0fQnsdaSmGudrU0JXo3jFIcc7Ur/O4MjX9uDfO57lqVuMPo70SCTsRBMU2T8+fPH/dhRERERDTNLSHmaK0RQvDkk0/S3d3Nd3/3d9eEnL/8y78km83S09PD+Ph47fX1dVrFQw89xOte97ot37t+/Tof/vCHN7x2XEKORhMMFVE9ZXS7Cw2Tic1E5HgDi/ipTMN+NmdYaMtHWz6Njjx+so/y2A6d5ZOINHGHXobfOUJs5ptINx9G6Qws43dnsJZ6T5xBst/VMCBd3Ft0QauFnMZ1t9v2fq+jHfdzCIKOsVgVcwjTftbFHBUrbynkQGhuqoVqqcjnjs5uFnK22rflh0Jeg5gHgG+EJbqlRtvululQGgjah6gMvAxtHbP/mDTxeu/A6z6LtXoVe/WF0MNKgDsyC1JhZrpavluVLNZ8pjDAfeUyMm8hchYyZ4IS6EQo3OiEH4o4sWDD92lca8Oc2X/6SzPnbyuvo2a4WdAJhvO1iQOZj2+qgqjR+H2rdQ81V2LMbvzuRCDros5QkWAivLf5qVWs5Z6w4tQBCT3c6qW83YGXoWLdB97eoSJN/K4J/M5xzOx17KVvhabKhsYbXMLrW6lXwDqACftBsBZSBB05tBWgeiq4DyxiLMX5zp7vgbgMUxR9WRN4WkEk6ERERERE3M7cEmLOOk8//TQDAwPccccdAPzzf/7P+cpXvoJSYefx7NmzfO/3fi8PPfQQQoiWCjqpVIpUKrX7gseIRuNfyKIGSpvea0bIUZbbMJMpcPsu4/VeQLp5ZDmLLGeQpSxGObuhwo3bcx538J59GxOfFFSil+L5N2IvPou18iKCsOKWO7KASK3iTI4ivVMkUh0hN4tB653xVl9HLRd0Gv1SxB7y6T0jHNi3cPCiLHeDkBM4N5UCXr+naY10czXj1A1UDVy33L4Zx+uawO86c/gpVftFmnipi3jdZ3EWnsLKXg8FneF5tBFgrWz2XmmKmyMbHIVyKtBbYa8B+MHZUJg4iKBzUE5Se7RR0KlfBypeQcXLGKXwHNNC4Q4vEHTX09rM6+3bRpeIQILZcG5rATTncRFWpQq36bcP43eeaWp7R4IQ+F1n8NuHsZeewcxcC79lQ+H3huXSRcUKI/J8o/Y3rP5Yfc21WpKaJZSBNTuAOz4b/qttRTBSIBgpbFzQF6Go40vwBDLrYMwmDyzyRILOrc+nP/3pI10P4Bd/8Rej6J2IiIgTzy0h5qwLMgMDAzz++OOUy2U+9alP8fTTT/OhD32IiYkJZmdn+bVf+zV+/dd/nSAIeNvb3tbSyJxWodEE42Hn35hqa9kMlkYTnF3bIOQI1wzLjBcSGJmOA0cOeP0rtT66l7qE13cJABXrRMU6gfHqQWiEV0SWs2jDRiVPxmCjKaSBO3gPfuco9uIzmPlwVlc7HpUz08Sujh9IIGs1ZqY9jJwyQPWXMOZ2H1jeKh3kVprKqp56ypSRrxt8ynKM2NUzBIki2gjACNBCY+baEZXWGoirZLH2uJK6jNd35w4L+xiF5VDU8UsIr4z0SwivhPDLYdqG3Y5y2sO/8W6CZP/Rp1PtF8MK/XsMG3v1RSBMzdFGgLXY17Lv2yjFca6NE7QXULFSKKIZW4hj6yiBqNhV/yxB0BWaRx+HoHOSWBd0jOk2VLuL7nLBUFTOTIeit2tRGZ+t+XoBGJPtO0YRBoMNIoEm9N5p8l4bNFxbfvvoyb8OGjFs3MH78LvOYqavhJ46uupJ53hoZ+fy58IzkaUYshhDluJhhawDpGmZuXbEtTH83jRBe+gtt3khHQrKVUk06HbRcR/zpYNHtN4q7VVERERERMR+OP5RZgsZHR3l//7f/8vXvvY1XnrpJb77u7+bN77xjZimyaVLlxgYGOCjH/0on/70p7nnnntqETwniWCoSDBWDTEPBObM1hUh9r3dsTzBuumkBntqGHNtD1U3dkHZLkFXOJOqpYXbu8MshhBoO0lg33oDGhXvojzxWmRxldjMN5BuPhR0JmZwJseO1LtgK8x0Vy0NLhgoIuf25ptzq3SQWyXoNIo5Mr/xPJbl2JGkMwTJQsPjXTxCpEnQPkjAFsbi65U6TtOAtREhcAfuQRsWztIzQJhqo40Ae26whYJOAqMUpplpwrQ0FS+jYmUQGuGG4o2o2GGkQ8N+vYpdS7+LBJ1Q0LGe7cG7vLpB0BGBgbarYkMA5otdGCs7CDndZfxz9Qgea3agNe1Zg5gUJE7nZIOKdeIO3V/11JnGzF4PxdyqWfJ2aMsnsPIEHdX+hw6rWspSHCOXxFhr2/M1ZRQTGMUE2ggIOnIox62L3EaANlXt+fom1UCJoGhuWwVrL9wq7VVERERERMReOZ35Ldvwtre9jf7+fn7lV36FK1eucO7cOUzTxPd9tNbcdddd/NN/+k+Zmpri2rVrx324mwj9bBoGaiN59E6zwHvEHyrUon0A7JnBlnR8Abz+5VpnzE3dcbq8bw4BleihdOZ1qKoppkqUqYzNoPeSknOIyIqDLFTTGZI+un3nWdpGjtuou1XsVHZ8L2g7QLeFAyJRco68YgxU7xHV6AEtTVS8CT8PIU6vkNOAl7pEefC+WoJN0J3FHZlFN5lysxUCgXQdzGwn9sIA9vwg1moPRiGJ9K1Ng11rpRerwZQ3OJvHvznl5Dbi0eB3EEpgPduDyFTbCkPVhRxXYj3du6OQo5Ie/qVMrd0xl7qx0l1NH5uWqpa+qOx2ME9udcI9YVj43Wcpn3kDxYt/l8LFv0vx/HdRmngD5dHXUBl8BW7fXXjd5wkSfWh509yeAB1zw+tpfJbK+Aza2FkQuhkRGJjpLuz5fpyZIZwbo8SuTRB/8SyJ5y4Q/9ZF7Kmh2vLBmRxB1+5eYDtxq7RXERERERERe+GWEXOUUpimyT/6R/8IIQTZbJbPfe5zZDIZTNOslRi85557SCQSXLly5ZiPeDOquwLxBicGSxMMFrdfYQ8E/UWCxhnMuX7MTOcOa+wd5VQIOkPzSW3YeD1RbjGAthKUJ14XlqsFVHsRd2T+UAaX+8FM1//v+z2vbpUOcjOCznYpVkeJdipQ9boJEqlT6zfVavzus1RGXoWujvCDzhyV8Wm0aF4Mb5ZI0NnIloIOIPIm9hMpZH77CQFtB3iXV8EI76VGtm3Dd9sMKlGqV2I8pVE5OyJNtJUIUynbBvG7zuD1XsIdeBnl8W+neMdbKZ79TiqD9+N1nSVwOmvXE4DqKFC+cJ0g0VyfpBGBwMx2YC72rr+AfymDiu9PNLqZW6W9iqjzyCOP8IlPfIJHHnnkSNYD+P3f//0DrxsRERFxVNwyIwEpw4/yyle+koceeoiBgQGeeeYZ/viP/5i1tTVMM5x1evHFFzFNk/Hx8eM83C1pjMqpvdZEdE7QW8K/kK09txZ6sVZaV5ljY1TOxUMtCX7aULGOsNx6dbAddK1tW+3oqDCy7RCEx6N6S/hjOYLeEiru7Sly6DR1kFXcx33ZKu7LVjcNDA4q6DSKOWauNZFt+6XR0yNI9h/LMZxU/I5RymOvRouwmpFqK1A+N0lldIbK0Bxu/2JYPr4rjd+xRpAsoMy9R6g1QyTobKRR0DFutGHcaMN6qhfhbl+JShsqFHLWq2EVY6FPTovS6TZcW7eimLMbQqCdDvyuCdzB+yiffSPFi2+lPPI30NWIW235VM5O4fYvt3RywlrsxchWBXJT419ebToq+TS1VxG780d/9Ef87u/+Ln/0R390JOsBfOELXzjwuhERERFHxakUc7TevhPR3t7OW97yFt75znfS2dnJb/7mb/Lxj3+cZ555hj/90z/lv//3/45t27zyla88wiPeHRX30N0uAKJiYWSqg0VLbyny7Lq9rgr+xUw9FH25G3OpdZVeVKxcKx+rzBhez9mWbftWQSVTlEdfVevy+n1pvNTKtp1gLRTK8ghiZZTV+kGm0BIzHZbSxoBgPI9/Zwbv/mXcV8/j3reEdymNP5ZDJbfe/2noIKu4j3dvGt3hoTs8vHvTTQs6WmpUZ/X69ExE+WhSMDQaLYPQmypeJOjI1d7zd/PLuQ0J2gYpjb+2FhWnHZegI0fQncVPreINLOENL+COzlKZmKJ84eoGD6LDZEtBZ7Rw7BF7x8W6oGNOtWNObV+1CsLrwLuUqac5uhbO9ZEDm/ZvhbrdxZytkCZB+wilM28kSFTPXQF+/wqVs1Mo223JbgQCe2YIUQrvqzoe4N2Zbjo9+TS0VxEREREREc1wakIpPvvZz5LNZnnHO96xaxWqjo4O3vSmN3Hx4kU+9alP8bnPfY7Pfe5z2LZNKpXi53/+5xkc3MIQ9BhprDJlrnZh5NrCFCYBwUQe1VXBWEggV+IItfPn146Pd2e6JtUZ6Q6s+dZUeNFC4fem8fpWa695qUtwc759BABBxzCVofuIzT0OgDe4jN+TRRbioQFktUS0Nvxa6sA6Mp/AXAnPhVbNPpsrPQSdebR1Uxi7rHrpJMPXg7E85vNbm5Ce9A6yfzELtqpXKbYV/sUs9hMbxcz9mCKr7gpUgwZkPtnS6lQ3o9EEHTn83tWwDPYW1WCUGUPbxxMddNJRiRSliW/Hmf06RiW388JS4w7PEXvx/KH+T9dZL51eM0U+k0e3eZhXOhDeqZxbaYqNZcu3Rw0W0d3VyDhf4kyOtLRKoBaNfjltYB6+kflpQltxymOvw1p5AWv5WQQalSxRvngNWYxhZNsxCglE2TnwdSSUxLkxQvn89bBd7HJxX7mIMZvEmE8cuIhAZIocEREREXErcypG4H/6p3/KRz/6Ud71rndRqVRwnN1nxWOxGHfddRe/8Au/wDPPPMPKygrt7e2MjY3R29u6CJX98KOv+hCysI1pasN4TTsucsXGTHfi94RpUrrTw+/MgreGsRRHpJ0w6kbq8Lf6WEuNSpU3eArYM62p7BIkC7jDCxtKnCo7idc90fS2b2X8nrO4fhl76TkAtO0R2LtH3qi2Im5bEeGamKtdmOnOpgcw0rOIPX8urMgTc9FOBeW4qFgFbbv1WD0B/vk15JqN8LZPfTgOHv76z3Hp0iVgmwib9VN9vfO/Q7j+XiJ0NJpgrB690Srz8C3307kWRm85O894++0jt4R58WGhYl2Uzn4n6AARuIjAg8ALH6vwub38HEL5aMtHxcsYpe1Nd1vJzYKOSlVwO5cxr3QglzcOhltVhe0ks1dBZx2jkEC6rY2M045b98uJ97R027cMQuClLhEkenFmv470wwkolSijEmU8gEBiFOLIQuJA4o70LJwbw1TOTIf9GkcRnM0RjOWRqzHkcgyZcRA6uvdFRERERETAKRBz1oWcd7zjHbztbW+rCTlKKaSUaK23jdRZf++uu+46ykM+EMZsMjSlNTV+dxZztQtrdgBRdvB7MuhYdXBn6bDE+PDuJoTCNcPQ5SaFHGV6eENLNbNjCLUnv2sct/8ukCdrsH8ScfvuJIh1Ya1exSwsbnhPG3b4azrhr2FjFJaQbiggaNvHG1zG61/BWGvHXOlClmIHnwFFIFynOiCqCxPrZZe9weWwPK2l8M+tYT3fOp+lo8B8qQPvZat1EUeBeaXjwNtTPZWNVawKrS0trYWqizg3iXzKSqKsRMO54aDsNoK2kxVZeCIRAoSJliZ6Cw1dS4vY/GMAqETxyMQcCAUd4Vq4QwuhobWl8e/MIpedTVE6kaADcikO4+E9KejMoxbLyErromdUg3gaRbztjEqkKJ19I1ZmEmNtGqNS9+XDUAQdBYKOQk3ckYU4ZqYDc21v92CjmCB2dRyvf6VeJt3UqP4Sqr8EvoiEnYiIiIiIiCoHFnN83+fKlSuYpsm5c+e2FVSuXLnCiy++yJve9KZ97+Mzn/kMH/3oR/m+7/s+vvd7v5e+vjBnOwgCisUi7e3ttf2uizvr5HI5TNMkHo9veu8kIjwDY7qN4EyYWuUOLuFMjmKtdmOudqHiZfyeTCiobJF2sQkdliA/aGhyuAkdplT1L29IAQoSPVSG7kPFWlMV67ZACIKOIYKOIYRXRgQVtOGgTXvrikRaY+QXsFavYuQXQtlGaoKuNYKutdD8c3YAWW7dgGZd5LFnBiglSmAGqFSZYLm0Y6ngk4bMW5gvdeBfDKu4mS91IPMHKyOu0QTj9agcaynVsnQcLRR+VwY/tbop7c1PpKqz4H1RBM4hESRTDY+LtYiZo8LMdWAUE7hDCzUvpO2idG53QUcEEmM6SXA2/J68gRWcGyMt23ejmKMiMWd3DBuv9yJe70VEZQ2jsIRRWsYoLiOChqhCQ6E6CrgdBZjWe66kKcsxnBsjKKeCl1oNRZ11cX4LYcdYiCPXTnkp+YiIiIiIiANwIDHnz//8z/nFX/xFcrmwY9Xb28s/+Sf/hAcffHDTsl/4whf4zd/8zX2LOU899RQ/+7M/y6VLl/jhH/7hWkTOr//6r/Pkk08yPT3NPffcw+tf/3pe//rX4zhOTbRZWlriIx/5CAMDA/zYj/0YyWRrZ9IPC2M2STBQhHiAaiui2ooYVX8OoxTHmImj5/rxO3Noyw9npJQALcLHDc9lxUG625d43Y0gUcQdWkTH6xV8tGFTGbgHv2v89A4wtQYVgA5AGCAlII7082grhrZ2EWGEIGgfJGgfRLgFrNVrWJnJMF2EMLS9fP465lIP1lJvS41ARWBiz/bjjs8BJzfdaieMxTiiGN7eDirkwOaonFaUJNdogvYc3uDiZhEn2Y+buoQ6CQasgYv0yxC41VQlt5aytP5YGzZ++1BYWeuUlUnXVhJlxpB+GZUootFH4pvTiAhM7Olhgo4c7uDOUTq3u6BjzCcJhgth6k1HniBealk0lXbq7ZxyIjFnP2inA9/pwOc8aI1wcxjF5ervUk3ccQeWMNZ2Nrq+GVlxcGaG0LMK1VbE78htK+yYVzow5k9HXy8iIiIiIqJV7FvMeeaZZ/jpn/5ppJQ88MADmKbJ17/+dX7mZ36GJ598kv/v//v/WnJghmHwwAMP8Pjjj/OHf/iH/P2///f54Ac/yDe+8Q0uXbrEpUuXeOqpp/jyl7/Miy++yPve9z5isVht3eeee44rV67w/ve/vyXHcxQILTBvtONfygDgd+Qw8hs7J0IZWOmuQ9m/rpoa+t1Zgq61htfB7z5Dpf9uMA8uEO0VWUqDClCJ3v2LLEphFJeQlTzCLyP8CiKohH/Xf3WwYRUN4UBUyLCUuDBQThKv5zxB+9CxC1faTuIO3oPbfxkzO4218mJo7CrA7w9nLe2ZwZamiRhr7RjZXFix7JSmWzUj4sDhROUo08Mdmke1b6yg5LcNhiLOcfh1qADp5pCVNWR5LfxbWat5YuyGlZlESwu/fQi/fYQg2Xc6Ui+FIEj0IdemQOoj9c3ZcBgIzLUOjMIWUTody1jf6q55rd3Ogk5Y+aoN/0LYNnkDyxiTYy3Z53pkjkagrURLttkStEaWVsNITmmBYaKlFT6W5sGuM60RXh6juIosrSLLqyAM/I5R/I4xMJuIcFkvb+504HefA61xZr6KmZ8FK8BLrWIv7l+oFlpi5Nowcm3bCjv+uTXwJcby6YkijYiIiIiIaJZ9izn/43/8D4QQfOxjH+Pee+8FYGFhgQ9/+MP84R/+IZVKhQ996EO7Vpzaikb/m7vuuot//I//MY888gj/4T/8B37/93+fUqnET/3UT/GqV72KWCxGsVjkX/7Lf8n/+l//i5GRER566CEAenp6eOSRR1BK0dXVte/jOE7kagwCwtLRHXn07OHOFq8LOEFHDr8zF84MNxDEOsOUqsTRDDKt5ZdwFp4Cwoo9fucYftc4KrZDvr1WGIUlzOwMZm62Fr2yV0R1G2hV+6alX8IsLBM47Xipi/ido8cfeSAN/O4J/M4xrOUXQgNXrdExl8q5G5gr3VgLqZZE6QgE9uwApeTpTbdqllZG5Wg0fvd6ymLdkNlvG8Dtu/toUxZVgFFYxMzNYpTSCDePaLI8tlAeVvYGVvZGVdgZbBB2Tq41W5BIYa1NAUfvm3MzW0bp2Brv3jTWU5GgAyAXEzBSqEWvBskCRpMeVqFXWNhmaLvt+O/zgKisYWanMNemdhRVtZAgrarnWgxtxsJKdzf9Cr+MUVpFllYwSqsbU6GqGOU09uLTBG0D+J3jBG1DzX8XQuD2342Rn0Og8VOrmOlOpHdwof1mYcfrX8HvWw0nN+7IIDyJzEYpVxERERERtwf77mU/9dRTfMd3fEdNyAEYGBjgl37pl/jZn/1ZPvOZz6CU4l/+y3+5b0FHCEGlUsE0TQzD4NKlS7znPe9BCMFLL73Eu9/9bl796ldjWRae55FIJPi5n/s5fuAHfoA/+7M/46GHHqrtc2BgYL8f7UQglEBmHVRPJRxEH8JssUajEiWCzq0FHAjNQd3+y3g9544sMsVauVITcgCkX8ZeeRF75UWCWBd+1zh++yDaToaeMoVlzLVpzLXZLTunGxBgJgVWm8TqkEhLoH2N8rnpryaoaPx8tRpYJYcx8w3U4rN4vXfgdZ+ppmYdI1Li9d9J0DGMM/tNjFI67Mim0gTt1SidYvOzy7dCutVBaWVUjnIquENzqES5/prhUBl8OUH78NFcX1pjFBbCAWJ+HqH8HRc34oLYkIWTMjGTEiMhw79JiZmo/o0LitMemcdLZJ8uoyrhNRMKO1NY2VAk0dKsm3wbToPht41yugjaBo4t+u24fXNupjFKpzI6g0qWwIwEnXWEFphT7fgXM0AYnSOvJpqa8NC2V/OhO1a/HOVjZiYxszc2mgrvgNAKgjD6FDe3+wpbIYGqvizQmPl5zPx8NYVyFK/nQtjmHhBtt+F3n8NKXwGp8fqXcWaGDry9RoSWWAsptBEQ9GRBgnc5jfV0DzJ/+FHEEUfHy1/+crLZLJ2d+5v4OOh6AJcuXSIIggOtGxEREXFU7FvMyeVyjI6Obt6QafKv//W/xjTNmqDzr/7Vv9rzdr/61a/y6KOP8uSTTzI4OMj999/Pe97zHi5fvsw73/lOvvCFL/Ca17wGywo7s5Zl1cqUv/71r+f3f//3mZyc5MyZMweKCjopqLgXCjlVgvZCS8UcZfpUJqY3eOGso4UkaBvE7xzBbxsE4+hm1I21GZz5J2vP286YFG746Gon0yhnMOYzOPNPouwkKB/pb/4M0hH03GvTdaeN3WlgtQusDomVlAhjb+eF1pr0t1xmPlskdzWcsZVeEWf+CczsDcqjr2qqc9sqVKyD0tnXY628hL34LEIrtONROTOFc228JefNzelW3t2rmM93I0snN9qiFQSjxZZE5fidmbBiUYNpuddVTVk0jmiwoRXO/BNYmclNbwkDYoMWsSGT+LBFbMgiPmRidRl7uo/aPSZdL4ujPE3uuTLpdWGnXP+8QvmheORtXYHPTd2J23f5wB+vGW72zVGmh/SbS89rBSIwcW6MURmfqgs6d2ewv55CqNvbFFkuxRAjJjrpoxJlgo485trBRRjdaH7sNO+JdRBEZY3YzFeQbn7jGxI67nRoO2ujKpqgrAhK1b9lTVAK/3o5hfb2Fl1nJARtZ22SZ23aztokxi28TMDKV0qsfK2Ilw0bXRG4WJmrGLkZSue+E4yDR7u4qTsxszcQyiPoXsP1zTCKtAVRx+tRpK4ZVNOudCjoPNWLLN/a7dTtxL/5N//mSNcDeP/738/58+cPvH5ERETEUbDvlq6np4dMJrPle0IIPvShD6G15rOf/Sxaa0ZGdq848dnPfpZf/uVfZnh4mEuXLnH16lV+67d+i0wmwwc+8AHuvfdeLly4QDxeH5xqrWumyNlsllQqxcDAwKkXcrx7Vje8JrzWdUY0Gnd0bqOp8TEKOOuISo7YzDdrz0e/K8HYW5P4ec3yN8osfqVMYaoeSbBesrv23ILuexxS9zt03e1g2M2dA0IIeu5x6LnHYe0ll+nPFsk8E3b4jVKaxJU/pzz8CoLO1lVTOTBChmlg7UPEZr6JUVoFCe7IPLErE02nXN2cbqWTPt7Lw2o7xtLO0T+PBr/T1L6PC3+0QHCmPqiyl/r2PejQaLyhBfzuTO01ZbdRHnrF0ZobBx6xma9iFhZrLxlxQee9cbrui9N+yUGazd8zpRVus/PeOMoPhZ3Mk2UqSz5BQeFXf7fK5rKXnwtTKrvPNn0c+0YIgrYhZOYaSI07ModzfezIjZC3PDQtQ0FnYgqVKIGtUP0ljPkT5OmyB3YqOX4QBALjRjv+5TQA3tACRj6BUAeLGFQN5sfHUZbcWJvBmfvGBi+3xLhF76vidN8fx2rf/XNprVFljbcW4GUVbjbAW1O159IWtJ21SJ61ifWbCLnx/DYGJCMPWQy/tZ3c8xWWv1oi82QJ7YEMKljpSbzUpSY+pI3bdxfOwhMA+H2rqEQJe3qoqZSrdQQCe2qIypnpUPy0w4kH+6lehGvs+xw8rW1XRERERMTtx75H7uPj4zz22GPbvi+E4F/8i38BhCJNIrFzx/Pxxx/n4Ycf5sEHH+Ttb387o6OjrK6u8uEPf5jPf/7z/J2/83e4fPlyTbiBjWXIn3nmGZ5//nkuXbp0awg5dnVWrGJhLaYwsq3rXPo9GVRbODuupUll6OX47UNgHONMdOATm/pKLe0j9UqHsbcmEUJgtQuG3pBg6A0JCrM+q09WyD7nhtEyErrvDgWc7ntsDOdwUp86LtjcdcEmN+nx4m+sUV4OEMojPv1VysF9+D3HMADdAu20Uzr7HcSv/gVGOYOOufjdWazV5k2LRWASuzpGZXwWHXPB0PgXs2hbYc5sP5P9oPH9p65TfLOQYy307TsqR6Nxh+cJuuqpEl7XWSoD9x6pMbDwisSmvoxRCQ1jhQGj7+ii51WJlgg42yFNQec9cTrv2RgZppUmKGn8QoBfUGQeL7P0+fC7duYfRxs2QcfRC6SVvssY+XmkX0Ili/ipFazlE1BNjFDQsecHKJ+bBCAYLiLn4ydCbNoLrRZy1pGrDnI1TEfWVoA3sIw9d7DU6g1lyZ0dvNkOAVlYIjb71drz+IjJ2R/sJj68vzZZCIERFxhxSayJDHMhBR2XY3RcjlFebOdbP7MIGszMVbzeO5ry0PG7zoIKsJe+hah69ZXPT+JMD7WkSqDQEuf6COWzU+GEVSzAu2sV66leRHD8PkgRERERERGHwb5buG/7tm9jZmaGJ554Yttl1gWd7/qu76JY3Dq0HqBUKvG5z32O7u5u3vKWt9TSt3p6evjRH/1R1tbWeO6558IDbfApWX/82GOP8Z/+039idXWVf/SP/tGGyJ3TxCYhp+QQuzKBme1oWadd2RW8waXa8/LYt4Ulxo9TyNE69HyphLn+8SGD8+/s2FKUSw6bjL0pyT0/3s23/UIf3/bv+7jzRzpJvTJ2aEJOI+1nLF72wW5Sr6yLis7c4xjZmUPf954RksrwK2pP/VQa3aSx7TrSDc9JY7WeOx6cyeGP5HdY6/AGc4fBVkLOQTxUvP7lmpCjhaQ89EoqQ/cdrZDjFohf+3xNyDESggv/vxSp1yQPVcjZ8ZikwExKYv0WbWcdRt/WSf93hoM4AcRmv44sLh/9gZkO5ZEHaleK17dMkNi+3TpqZDmGLISTIjoRoLp38Qc7IRzmtS8QmFc7IAjPZb8ng3LKu6y1NbpWySqMnjsytMZe+lbtac8Dce78idS+hZzDItZv0vWysEKo9MsYuSbbOiHwe++gPPF6lFmd5DMVlTMzuAOLaKF2Xn8vu1AGzvVRhBt+hzrp411Oo2Vr2sGIiIiIiIiTxr4jc974xjeSTqdZW1vbcbn1lKvBwUEWFha2XW5qaorXvva1XLhwAQjDhSEUdDo6Orhx48amdSqVCj/1Uz/FtWvXAPj4xz/O+Pj4fj/KiWBLIefa2IFDxrciTK+ar/l2uD3nCNr6W7b9g2KtXsFaCzuIRkxw5w93Yji7DzSldTyDUTMuueOHOrC7C8x+rhgOQGe+RtmwTsT3CaDiXfht/Zj5RbTtNe0n0YjQEmd2EM+18AbDQXdwJhTiTnuETsuEnO5V/NQKEA4Oy8MPHH20iVahMBKE6SNOn8G5f5wi1n/y/COG/24H/lrA6tdKCK2IT/01pYnvONrqXoBKpHBTl3GWnwUB7sgssStnW3ofbgZrpYdKMhSYgpECRvpkV+tppZCzLkjfPLEhKibGVFt4DxIQdBSQS7F9b3s9zUpbySOtvGYUFjDKYapYfNjkzA90bUp/Om76X58k80QokpnZKYKO5kvBq3gPpbN/C2fum5j5qrl+X5qgvYAzPYQs7+9/eDPSN3EmRymfuxGmBne6+BfTmC90IVQUoXNa+cAHPkA6naa7u5uPf/zjh74ewM/93M9RLpcPtG5ERETEUbHvnksqleL973//npYVQvC+971v0+uFQoF8Ps/AwAAf/OAHMYyww9yYPtXT00MqlWJpKYwmCYKgtpzjONx99910dXXxgz/4g3vy5TmJHIWQA+D1r9Qq6Si7DXfg7pZu/yDIwjL2/NO15xd+sIP4wMkbbN6MEIKJv5fELygWv1xGaE1s6q8pTXz7kZVv3w2v9w7MfOiR4qdWMdbaWpqWYS2HIsetIui0Ssjx29fwBuveNJWBlx9L2pC18mLonQTYvQYXf6IPM3kyRImbEUIw/g+78fOKtWcrCOURm/oSpTN/E20drTeMl7qEWVzCKC6jLR93eA57emTDtaONABUroeJlVKyM8E2shf6mval2Q+aTiIqNdlx0l4dKerXKVieNVgo5qt3Fu5gBoTEnO5DLsQ3/D2MlVrv/BPES+/1GtOWDUa1k5RyhX47WWMvP1p4Ovbn9xAk5AG3nbexuAzcdYBQWwa+A2QIh0bCpjHwbQfoK9uLTCDQ65lI+fx1zqRdrqRehD/59SNfGmRylcvYGGBrVW8G9fwnzagdyNXZq0hQj6kxPT7O0tEShUNh94RasB7CwsEA6nT7QuhERERFHxbFMU/zu7/4u3//9YYdveHi4VkZ8XchZj86xLAvfD71U1oWc+fl5AH7wB3+Qn/iJn4iEnF0I4iX8vvVIAUF59IEjnX3cCuGViU1/FVGdcR15MEHvy0/2THMjQgjO/4N2eqrHLFRA/MaXEOWdo9WOiiDZR1D1flCJcmie2mKs5V6s+Yayzqc05apVQk6QKOCOzLE+RnB7L+H3nGvVYe4ZWUpjL1UHiQImfrD7xAo56whDcOa9PSQmwqG49MvEb3wxHDge6YEIysMPoKtVxoKOPF7/Ml7vCpWRGUoXrlC69CKViekwla4jj9+TwR3cPvK0ZYeGwGzwvwqGT04aWCOtvMaDnjLe3SsQC8BR+Jcy+JcyaKtuFEzZAC+86FSivO+0UhWrn2PKPjq/HKMwj1HOAKFPTte9zUWjHBZCCnoeCNPXBRpzbbqFGxf4PRcon/lbBE41Ek+A379C+dx1VOxgaXPrGOUYzo0RqFZ/w1H4lzN4d62iYv7OK0dERERERJwSTmTMqVKhwBGLxXDduj/A5OQk//bf/lt+8id/EgDbPqLSvi3mqIQcLRTuaMMAs+8SKt68IW5zB6WITX+1Vla885LF+FuPv8z3fhGG4OIPddBxMRyAisAjfv2LCPcEDLKEwEvdUXvqp9KHspvTLui0SshRTpnK2EwtjdHrnDieUtvKJzb79ZpIOvBgO21nT4dIajiS8/+4F6eaCibdPPHpL4M62kGXtuKUh+6vPfdTK3gDSwSdObTtbblO0J3Fbz98IdfMdIIfNtmqr4y2g13WOFpaKuQMFvDvTMNNTaJKlXFfsUTQGwrUAoHMVfsBZrDt/2grNLqWEgmgYl3NHvYed6yxlp+rPR0+oVE566yLOQDm2lTLt69inZTPvAG39050tbOi4xXK56/j9S035ftmFJLEXjqDzNWj/HS3i/eKJfzxNbRs3qcnIiIiIiLiODmRYs56FE48HqdUKuH7PpOTk3zyk5/kxo0btdSt01q9yr8je+hCDoDfm0Y7Yec2iHfj9TVRWrRFWKvXMIr1DvTFH+pEGKfz/ygtwZ0/0klyrDoA9cs4s9tXejtK/I4RdDUCK2jPo83DGRRby72YN5kiq7adDVpPgqCjkl5LhByAyvAcGOH17LcNhGbHx3BvslavIN3wM8XHLIbedPRllpvBbDM4/096MTvCZskopbEXv7XLWq0naB/C7Tm/6XUtDIJ4D27PecrDD1Dpv6f2nje42DKz8e0QWmKuVaNHJAT9zUUutJKWplYlPPzza7VJCCPdgT01BH61jbQ0/p2Z2n1G5OrJVSq+9+8kaM+jkvX046B9qDUfYBdkcbkelTNq0XlCo3LWiQ9ZxAbDtsQopxHeIUxYCInXd5nymTfUK4oJ8AZW8HszTW1aujbO9VHsG8MItxqVLCEYK+C+colgoHDo125ERERERMRhcaJNSmKxGJVKhcnJSf7Tf/pPPPbYY/zKr/xKzSz5ViDMCz+cgd+6Tw5QHWCeBO2u3mnquGBhtZ+EYzo4Zlwy8ffaeOYTGQCEPhmz5fbis7Vy72jBYfRVteHjDiwTdGcbXtzbujcP/o7aT0e31WfwzZXuAws5mxCSw7qed8Mo1SOwxv9B16kUSZ1ek/P/JMWLH1tCuRorM4mXuoQ2j3bA6/bfgzZshF9BxTpRse7QU6XhHmqtvHikxxQk8/gN5e65TYIKZMVGlh2Eb6DNLe6vjZWK9nGfC7rq0VRu3z1H1j7KSv1/2P8diRM/KZV7oUJ5IWxLwsiZwzteFeuiNPEG7IUnsbKT4T7NvUdbbYdAYK61Y+SSeH0r+KnVcCrTVvgX1uBs7lDayIiD4/s+169f3/B8/e+VK1eYmppibKx5Q+6IiIiI086JHEmvp1k5jkM2m+VjH/sYjz32GJ/4xCduCSHHfLET3Gq4fKJMZWK6JWU5b2Y9GkMDKnZ0fgA74XeO1UKpSwsBKjj9Pailr9ZFM6/r+KuqWUvPY68PNDXYM4OIoHW6rRYKL7VC6eI1gp5svW9fMjCf7UbmT1f6o6w0l4rkzA5BEF7PZm4Oe+FJ0Ed/Xgu/6o0kw9n000pixCL17WHqpdCq7gF0lAiJl7oTd/Dl+F1nwupaQoJWGLlZYlNfxl6sG7jbc4OHaqoaJPMbUvnkssOjk39waPs7TmTRwpisR5V5g8uUz19Hx6oRf4HAfKGrdp9RXfVIQKOwN9NsLQOC9tDUVBkOQdtgi45+d0RQP16762T7Wfn5gGv/JV0TOry+y2grvvNKzSKNDWbUzd6fGxFaYi/2EXvpLEa2wbDf0GA2/EYcO9evX2dqavu0vrGxMSYmJo7wiCIiIiJOJicyMmfdCLmvr4/l5WWKxSIPP/ww589vDn0/jciShfWtHrx7VsDSqGSJysQMzvWRllZFUVY4o6XN2AmJygFtOgTtQ5i5WbycIvMtl56XnQ5fj63w8orlb4ZijjYs/M7RYz0eIzePs/hM7bk1O4CZbZ2Qpw2f8tmp+sAKwBcYU20Yc8mmKpCcVmQlhjM9QmV8CgTY6atoK4HXe8fuK7fyOKrpD1ancSqjchrp/1ttLH+xgKpozMwkXtdZVLzr2I5HuHmszHXMzPVayfd1zOVejPz2ldyaZSsh53NP/immeSKb75awXhlvvVLV+mcXBRPz+W5kKfzs2lC1KDtRtvcsWgcd+do2g47RI02LbBRzzLaT0S5vx+yf5PDWwommINGH13PxSPYrK/WoKVFp/eSAdG2cqRGC5RJe30otHT3iZDE2Nlbr96/f70zTvGXGAhERERGt4ET3JN7whjdwxx138Ku/+qu33M1bFi2sb/WCX63E0VakMjHTsggdjYZqSPqhz6TtE6+7Ppuy8KXWV1o6Sha/XEJXs5m8ronjrRSmFc78U7Wn1nwKK93V0l14/St1IUeDnE9gf7MPc7btthRy1jEKSezZ+uy+s/h0ayu/7Ibya4NEu/tkz/bvBavDYLDq+SMAZ+GJo492UgFmdorY9b8keeVR7JUXNgg5wjNDr6XF1A4baY7bUchZx5xp2xChI+fjWE+makIOhIbINW+d/N5L2fsNKVZ+x9EK8BvEnOTJ7YKVFzyWvhQKxFqaVIZeeWSiV6OY08rInJsxSnFiN0aJv3h2w29ERERERMRp4UT3CM+ePcvDDz98aqtW7YYsVCN07l4FU4eCzvgszo3hpiN0tOXXOrlH7TexG0HbAMqMIf0y6Wdc3GyA3Xn6BqBaaeb/qi5Ged3H2wm0Vq/WDHBlIY653NPS7WvDx1/3xwkE1lO9yMLpTedpNWa2C235eP3LADiz30CZMVTi8Ab76wivfh7eCmIOQN/r21j5cpHKoo9RWsVcm8bvPBqPBOGViE/+BdK/SWzWYOTaMdOdyELyyFOrbhchZx1zpg2ZDdv/m9M3VdzDP1sf9Bu5vRl+a9NHJUORQllJVOxoKzyKBkHQOMFizvT/ydV8mbyeO45uUkhrpBtGZAnXRKiT+x1FREREREQcNye+V3irCjnryLyN9UxV0DE0qr2AOzYXVl5oYqDQWL1InbDIHITA75rAXn4eFCx+pczo3zl95cnT33KprNSrGGnn8FItdsWvYC/Wy91ac/0tH2h6vZnawNJYiLdUyLl27Rpnz57+GVFzuRdleQTdWYRWxG98iaBtAD/ZT5DsR9uHc57LW1DMkaZg9Hs7ufLJsPqdvfg0ftsgGIcvIBqFhQ1CjqjYmJlOzExnS/2ntsNvz+GOzN7WQs46W3lwaanxL2VCrxPAWO3cs1+O35GrTXT4R5xiBfXIHGGBtE9mNGPuxQrZp6uVvswYXs/ReRUKv1Qz7xeHGJUTcbp4z3veQ6lUIh7fX3/2oOsBPPTQQ7S1tR1o3YiIiIij4lh6hlpr9DEYhJ5UZM7GeqYb765VMMJ8/srZKayFFEZx76HjjWjLb3h88hoir7sq5gCLXy4z8uDJr+rRiNaa+b9siMrpOV4hwl56DqHCvH8j3YFRbm00lpYKv6daLUmBMdNa4crzbg3PAoHAnhukYvmotgJCB5i5WczcLADKTuInB/A7RlGJFlXQAoRfLxdsd986A/6OyzE674mRfbqM9MvYKy/g9t996PsVQf3+ac33Ya72HGoUTiNedxpvcKEmONzOQs52+Oey6GR1wF+2sef697xucIwpVuEBhGKOmZQnss3TSjP9v+vfkZe660jTh2UlV39c3n0yT8XKKNtDuhbCtaNInluUhx566EjXg9Dq4VazeIiIiLj1OJZW733vex9/8Rd/cRy7PrHINQfr2Z5aWLNKlqicmyJoyx9oe9qqD46FVz6W6jo7oe0kfjJMPykvBcx8rrjLGicDrTXL3yzz1L9Pk3km7JQrK3Gk1VBuRhZXsVavhU+UwFroa+n2NRpvYAnM8OSUy3GE29roD8s6vnQt5VR2X2gfCATO9DBmuqtW5Wod6Raw01dJXP8CZnb7Sh37pTEyJ/NEifLCrSGOAQy9tW7gba28CMrfYekWoev7kK5zdEJO7wreUIOQsxiLhJybUG0uaqB6vgdiX2nJyvJQiWrEidOBdo64yqPW9cgcQ5y4Sa2gopj8rxmK0+H9I3A68TuPrkKjqOSwluvV63bzy1GxMuXz13HHZylfuE7prhcpXnqJ8tkbVEbmwjLkHTmU5e64nZt54oknDnT8ERERERERR01TPcT/+3//756XfdOb3tTMrm4LZNbBerYb7650rTPvDiwTy+/fm0F49cGxvXoF0LiDLzvykPKd8HrOYxZCf5Eb/6eAX9BM/L3kiZytBCjM+Fz93Ry5KxsHym7q4vF9r36F2PRXEdXasdZSL9Jv7cDP61/B782ETzQY061PFTrqFCuRr18ffm8a4ZtYKy2MlFEG9twg1txAOHPcViBIFlCJUu3aduYeI4h1oZ29eX3shLLqEXy5Fyo8+9FFel+dYOhNHVin0I9qHb+omPrdTP0FaRyJMC1UUH+ijlDIGViqPTemEvy/q396Yu+HpxEVr4ueftvw0R+AEGgriXBzuCsBy18s0vftJyPFuDTncfU/pykv1IVMt//eo2nbtMJaeQFr5XmErs5oaZDFnaOKg/YCm7pGVoCySpAs0XAVI9eSWMs9yGJ81/5UpdJagT8iIiIiIuKwaGrU95GPfGTXjqbWGiFEJObsEZmJYX91APf+RbA0Ol4haC9g5vaX1mKstWEt9OINVP0mVq8ivSLl0Vcdb8WlBoL2ISr9l3EWw5m42c8V8QuK8/+g/USVVvZLiqk/LjD3hVItcgogiHXi9d6B33U0pqyb0JrYzNdrURmyEMdcaq3psde7it+/UntuvtiJLO0cRfNo8DsAPGh8f0uPZct9qd/jQfmOfa8nCxbGZBvBmTDybX0Q3UpBB8IoHaMcxyjHsZZTaBngDi4QdK0hdEBs5quUzrwhFCmawO8cp6w19tIzYcUlBStfKrL6tSK935ak/41tOL0n47rfK1424KVfXaY8Fw4utTQpj37bkXjmoBuGgU2a0e+FTULOtTb+fOpPDn2/pxGZt5EL8TA6x9BUxmeJXZnYU3SOitcH6SrWdYhHuT1u/73Epr8EwPTvr9F+ySHWd7zX5srXitz4nSzKDYVSLU0qg/ejkq2N8twKWVrFmX/spnLkFvbMINLdOc1K2fWIG7nioE2Njvtgb64KqjoKVDoKyGIMc7kHY61tW1HHcSKvnpPG8vIySimklKRSey8qcND1ADKZDIuLiwdaNyIiIuKoaKoH8c//+T/f8vVCocALL7zA5z73OV73utfx2te+tpnd3HYIX2K+1IV/OfQo8fqXMXL7i84RCKylFMKzcEfmQYCZmyc++VeUx1+DNk9AZ0UIvL470YaDM/c4gtA/xy9qLv5QB9I6XkFHa83y1ypM/u88Xq7eOVR2ksrgywjaBo410slafh4zvxg+8Q3sqeZMs2/G78riDTUMMK92YCzt7OG0LuSsPz7Jgo5ZjTA6bEGnkfWInXKsjI65GJU1zLUZ/K4mUxmEwO8+g985irV6BXvlBYTy0R4s/1WB5S8V6H5FnIHvbCc+crIrkFWWfVa/XmTlSwW8bHjdKcOmPPZaVPxoKg81RuaIQ47MiYSc/WNe7cRr89BJHx1zcYcWcWZ3T3VVsUYxp/MwD3FbgrYBvK6zWJlrKFcz+V/TXPrxFEIebVvirQUUJl3ST5RZ/Vo9Ykk5HZRH/gbabj5icEeUj730DGb6Sr3V0mAu92At9u5JnNN2PUrWfLELUU1r1VKh4wE65qMTPsFAEZzqvSRRxh2fRbgW5nI3Zrpz075e/vKXt+QjRrSO97///SwtLdHX18enP/3pQ18P4Kd/+qdJp9MHWjciIiLiqGhKzHnzm9+84/sPPfQQP/7jP873fM/3NLOb2xK56iDyJrrNP3B0DhBWX/FMKuOzYCiMUpr41b+gNPGalqR3tAK/5ywYFs7M1xFas/pEhWc+kWH877XRftY8ljSDwqzPtd/NsfZSvbOohYHbdwmv90LTkRTNYuQXsasRTWhwpoZaml7ld+RCEXB9fzfaMOd2TgdoFHIaX4sEnY0ILbEXBqhMhJ45Rmm1eTFnHWnipS7hdZ3BXnkBK30NoQNQkP5GifQ3SnTc5TDwt9tJnrNPTAqPXwhIP1Yi/bUShcmN/hbKSlAafx3aPsJqcUcUmRMJOQdDKIH5fBfey1fA0AQ9WYJsx64VrVQs9MvR0kKbx1cYwO2/B6OwiPQKFCY9Fv4sz+CDh9cea6UpzfkUrrnkr7kUrrlUloNNy3md47gDLz/06F1ZWAqjcbxC/bWSE0bj7MO8vxaZ48qakAMglEQUJBQsWAFjug2VKhMM59Ft1Ug/28MbXsTrX8HItSE2B/NERERERESceA61xb7nnnt43etex6c+9Sle+cpXHuaubjkEAmOqvanonHWMQpLY1TEqZ2bQlo/0CiSu/QWlidcd2Uz3bvido2jDJjb11wgVsHbF4+lfTJMcNRl8fZzUAzGMFpVxraQDKmlFUFYEZR3+VnTtsZsNWP5mZUNKld8+RGXwZWj7YNXFWonwSjjTX6udCdZiCqPQOt+FIFnAHZ2reREYswmMqZ0H0lsJOY3vRYLORmQpBhoQIMvp1u/AdHAH7sVNXcJavYqdvlIzXl17psLaMxWSZ2z63pCk/WIMM7l/wUIHYUrGQVMilavJPlMm/bUia8+WN+gn6/jJASpD96Ot1lZn241WeOZoGaAtDy01iPqvFgqERsUr+L2rteUjIWd/yJKFOdmOfz5MzwmShR3FHG36YIX/VxXrOl7/OGlSGXolsRtfQAAzf5wjf82j55Vh9TbDaU5AVL6meMMj91KF/EuhgKMq23tNaWHgDrwcv2uiqf3uSuBhL30LK3Ot4WAF1mIKc7l7X/0bLVXt/ylKO3dlhRYYS3HkUgzd6eKP5NHdVSHIDAi6s/v+KBERERERESeBQ0/UHhwc5K//+q8Peze3JK2KzgGQlRjOlXEqEzPoeAUReMQnv0jpzMkRdIK2fkoT305s6itIP5xBLUz7XPmtHJP/O0//q2MMvj5OfB/+AlpryssBay96rL3ksfaSS2V171NwtZSq9uOrVrUBrYhNfw1ZHZjLXLJlPjlaKPzeNF7/Csiw4y8X4hjXOnbsZO8k5DQuEwk6dYQyEK6NdlxkOQsqOJxoL8PG67sTr/cCVuY61sqLSD9MqShMuhR+wwUB8WGLtgs2bXc4tJ1zNok7WmkqSz7FGx6F6y7FGy6laQ+twO42sHtNnD4DJ2Xi9JrYqfAxhGlT7nJAZcWnsuxTWQ5wl33cdABbjC8Dpx2/YzwUeK1jEk8blCWh9z/oV3aF8tnrYOztXhMJOQdDpuvpwo1+OFuxIcXKOZ4Uq0ZUohev5yL26gugIPt0mezTZYQl6Lrbofv+OJ13xZB7mMQIxRuX3IsuuZcqFK55Nf+brdBComJdBPFeVLyHIJECY/cy4M1g5Bew5x+r3X8g9HnbizfOVugGvxxR3tu9UyAQWQc766CSHsFwHtVX3myiHBERERERcUo4VDFHa80TTzyBbR9uJ+FWpZXROQDSt4hdG6MyMYNKlhDq5Ak6KtFD8Y6/g7k2jbV6DaMUfvagpJn78xJzf16i6y6b3pc7GI5A2gJhgrRE7VcrTX7SZ+0ll+yLHt7a/uOntZDVlKo7jj2lqhFr5SpGMTQkFq6JMz3UEp8cvz2PN7S4wYNArjiYL3U2LeQ0LhsJOnVkKUbguAg0srJ2uNegNPF6zuN1nw2vrZUXMCq58D0NpRmP0ozH0l8UNog70hIUrnsUp1xUeevBobsa4K4G5F88+OEpM4bfMYrfOY5yOo6/6p5quGeo/UdJeH3LkZBzFFQM8CRYChUvo9Hb3q/WU6zCx8cv5gB4fZdBSMzsZG0CQ3ua9ONl0o+XkY6g654YyTMWQUWjyjqMKK1GkqqKIihpSvM+2ttevFFmLBRtquKNcjqPrl0LXOzFp7CyNxpeE1gLfZirXQduv1RDW7VbZM5WyIKFfLEbfU2hnS3CAiMiIiIiIk4BTYk5jz/++JavB0HA8vIyn/nMZ3juuef4ru/6rmZ2c1vTyugcCCMCnOujVCamNwo6Z7/jxHRwkQZ+1wR+1wSylMZavYqZna6VLM0845J5xt1lI1ujhSRIVDuzhoWWJlqaYJihj4I0QZooO3k0VXP2gSylsZfqPjn21DAiaL5DHiSKuBMz9Rc0yPkEZgsicrZa57QJOtoMsBb6WmouDSDLMQLCFBGjsHg0gqqQ+J3j+B1jGIVFjMICRmEZWcluMCFdF3d2QtltaGki3QJC7bzszWhpoewkyunE7xwlSPQdv4BTRXglpJurv7DPyBwtA4KO6vqewFiKhalaSoSRSNXHQoPIWfxZ7vdbduy3GwIRto/dLpgB2vQR/tb37cbInOAEROYAICRe32W81J3I0grm2jRmbqaWEqkqmtVvlFj9RmmXDW1EmXFUIkVQ/dVW8uivL7+CuTaFtXoF6RdrL8t8AntmAOkdfJJPywC/J1N7vtfInK0QvkT4h1+xLiIiIiIi4jBoSsz5wAc+sKOBptaae++9lx/7sR9rZje3Na2OzoHQHPBmQSc2+VeUzn4H2ulo1aG3BBXvpjLySioD94RpIqvXkF5x9xWraGkSJMIw8iCZCr0STlCkzV6R5Szx619EqNC80ch0YJRaY+DZmJ4gshbm1U5kcW/lxw9CM+seBTcLOn7vKtpysWeG91RhZa8YhSTrEoi9/Dx+x8jRmfwKQdA2EFZkAwhcjOIKRnFps7hDdWY/1k0Q70bFuwliXRvTMgIX6RZCYccrIN080g3NTZWdRNlJtBX+VVYyXPeEiDeNiEqO+NSXalESshjb971WG0EtbUOu2ZhXt7+nPqp+78DHGgEajY4F6092vD615dcfH6WZ9l4QApVI4SZSuAMvQxaXq8LO7K5CqQa0mSBI9FYFnL4wPfE4ri8VYOTnMdduYOQXEI15lIHEnu/DSO8c7bnrLmJlKuOz9SjSQCDXdhaGTnqbExERERERcVCaEnPe8573bCnmSClpa2vj8uXL3HXXXc3s4kDMz8+TzWZxXZczZ87Q3n4yqjYdlFZH50CDoHNmCpUoIwO3FqFz4jq6AKaDl7qI13sHRmEJ4RaqVXqCMGJHB6BU7TVtxfE7hsNoI3G6Z91keY345F8hgrDzKgtx7NmBlm1fG/VBjjndfqhCzlFxkKicRszpJMIX+OdzICDoyFOxbuDcGEUErclOlRUHc7ULvyeD0AGxuccojX/78QzCDJugfYigfSh8HrgYxVVAo2JdaGsX4dCwUXH7xKRrHgRZShOf+lItKkK4Fvbs8L63IzwrjL6RGh3zd1/hFqCZiLtm1lWDRYiHYo4sJHaMVNQyjOzUiJPdJgiJSvbjJvtxB+8L27ugUo0itUCaaMOE9UhSYRyvMKo1spzGzN7AXJveUnyShTj29GBT0TgAflcWd3ih5umGJ7Ce70Z42//fT0N7FRERERERcVCaGpW8733va9VxtIzPf/7zPPLII9y4cQOlFN/xHd/BD//wD3PmzJnjPrQDcxjROVAVdCZHKZ+dQscrSL9c9dD5jhNRtWlLhCBo6z/uozgyRCVH7Ppf1QaYshjDuT7a0ggRzAa/AG/n7Z6GjnGzQs46xnwCUTbw7syCqVHxMuWzkzhTY8iKs/sG9oC10E/QlkfbPkZxGTN9Db/nXEu23RSGfXJMv48AI79IbOYrtcg3UXZwbowit0nZ2QmBQLgWOuai48GOPi63EgcRZQ56P9FCE5xZIxiuR2ma6V1Sp6piDtI8kVFhWyJkPXrupKEVZnYKK/0SsrK26W3hmRiZDsxMR9P3Sy0U3tAifk+96pTIWVjPdSPcSMiJiIiIiLh9ackUcxAELC0tsby8jO9vPRN53333tWJXO/Jnf/ZnfOQjH+GNb3wj3/M934Prujz88MM88MADhy7mLC8vs7KysuV7169fb3r7hxGdA6GHTmxd0Im5SK9I/PpfUTrz+iMvBxyxEeHmiU/+FdIP06BkMYYzOYo4gCHrTmijoXLPDmLOUXSMm72OWiXkrCMzDtaT3Xh3ZSCm0LZP+cx1nOlhjEILrj8tseeGqExMAeAsPk3QNoC2W1dqPmJnzOw0zuzXaykhshDHmRpFqIOnY0rXJoi5IAFHhUa9R8hht0fbsR9B58BCjqnwLqXRXXXfNHO5GyO7cwRuLTJHHnoRz1sb5WNmJrFWX9pQmSp8T2CstWFmOpH5xJ5ETI2uC21bvW8GuKNzqETdwFrOJzCvduxYaS4SciIiIiIibgea6tUopfiv//W/8j//5/8kl8vtuOznP//5Zna1K3Nzc/zWb/0Wf/tv/23e+973MjAQzmZ94QtfONTO6zp/8Ad/wG/8xm8c2va3is4RWiB8A3wDEZgHKqELIAKT2OQY5bM30I6HdAvErv8VpbOvP/RypRFbI9xiVcgJO7Ci5IQROU0MMLdDN0bmbGMEeVQd42auo1YLOevIooX9RA/eXRl0uw+GojI+jTU3gJVpPq3IKCQ3pFs5c9+kfFzpVrcZ1uoVnIUna8+NtbaWeCOJhlLLKuFjHLGYc9jt0U7sRdA56P1EJTy8O9O11CoU2LODmJk9GBo3RuZE7B+/gpW+gpW+uimVShZjmOlOjGz7ntsoZbv4PRn8riyYe6w4GYB5pRNjaefI4UjIufX4pV/6JYIgwDD2dy896HoAP/mTP8nIyMiB1o2IiIg4Kprq1fzH//gf+e3f/m26u7t585vfTG9v77Hd9NbW1pidneX7vu/7akKO7/u0tYWz55/61KcYHh7m4sWLnD9/vuX7f+ihh3jd61635XvXr1/nwx/+cNP7uDk6p3JmeuMCgUT4BiIwkKUY1nzfngclwjdxJseonL0RpnxUcjhzT1IZfaDp447YH8IrhUKOF856irJNbHK0JZWrtqIWmRMIhNosIBxlx/ig19FhCTnrCM/AeqoH/2IWlaqAAG94AW17WIvNV7qyFvtq6VZmcRkzM4nffbZFRx+xCa2xl57FXnm+9pKR7sSeG2xJSlRjWkkwXESm7SNNtTqK9mgndhJ0Dno/CXrK+BczYFT9UnwD58YwRnH3lGCNrq0XRebsA60Rbg4rfQ0zez30pGvAWGvDXOrZsxm/RhO0F/B7Mqj2wv6OpWRgPdd9S3i6Reyf8fHxI10PYGhoiLNno3Y4IiLiZNNUr+Yzn/kMY2Nj/Nqv/RqJxPF6rCwuLlIsFqlUKvi+j2ma/Mmf/Al//dd/TSqVIhaLMT09zR133MEP/MAP8IY3vKGl+0+lUqRSqZZu82YEAvN6O97d6a0XMBTaUGi8MCRZC+z5vfvLSM/CmRyjfP46GAorO4XfMUzQsX8T0Ij9I4urmLk5zOxUXcip2MSujbXMdHcrapE5W6RYHXXH+CDX0WELOesIJTCf6yQ4kycYDb06/NQqshzDXGuuCpxQxuZ0q2R/lG51GCgfZ/abWLmZ2kvmUi/WUqplgoux1o7oX0JbPrrbRfVWMFaOLm31KNqj3dhK0DnI/USjCUbzBBP52mui5ODcGEF6e/Q0akzjicScrVEBRmEBWc4i3RzSzSHcfFhgoBEdVlO0lnv27IWjpcLvSeP3ZOtVqGr7BbFm01j46mZk0cKYakMEp9/TLSIiIiIiopU01asplUo8+OCDxy7kALzmNa/h0qVLfOpTn+KrX/0q8XicRx99lH/wD/4Bb3nLWxgfH+eLX/wiH/7wh/kv/+W/MD0HvQUAAQAASURBVDQ0xKVLl477sPeNzMSwnuxFtXlgKbQVVP+q+l8z7BX5vWnM1S6ku/dUKena2HP9uKPzAMSmv4abuoSXuuNUlvQ+FQQ+9sLT2OlrG14WFQvnWuuqJ22Fsl2oRuaIm1KsTkPH+KiEnHUEAnOyHVxJcC4cXHoDi8hSrOlKLUYhiZHuJOjOIpRP/PpfUhm+nyB5+xh+HypaY65NYy8+XUtfRIM1P4CVbm0VLqEl1vwA7lgoGAVn8kcq5pwUGgWdgwo5/tk1VIPRsZFpx54Z3FcqnJZ1pUB4RfDLYN5+/49NaI0srWCuTWGuzexcBj0QmOkuzJXuvYtoQBAv4Y7NbRZxygbGfAJjIbGp7TkIp6G9ioiIiIiIaDVNjRLPnTu3rcniUaKUwjRN/u2//bf8+3//73nuuefQWnPXXXfxtre9jcHBsCrL6173Oj74wQ/yUz/1U7z44ounUswBkDkbmdt+4OiP5wjG8iBAJYv7EnMgnHUzOvIEHeGsnLP0LFZ2isrwfQTJvmYPP6IBWVgmNvtNpFu46fU49vTQgarp7BVl+lTOTLEejCBy9X1FHeOdMWYTqFQF3eGhLZ/KmRs4N5qvcmUv9FNOFtC2j/RLxG98kSDeg9dzHr99+GSXVD7ByFIaZ+FJjNJq/cVAYs8MYeZ3Ns49KEauDVmKoeLlsKqVoTZFFjwo38Gj6vcOtP2thMyDbusw2e1esl06lhYa/0IW1V812dVgLaQwl3v2HUElAgmBBEMhvQLxyc9TGX01Kta1r+3cKgg3j5mdwlybQnrbpDvpMDJUVmxkKYaZ7tpzqq9GoxIlvNQqquOmtm3VQc4nkGlnz//HqD2KePTRR6lUKjiOw4MPPnjo6wF8+ctf5tlnnz3QuhERERFHRVNizrvf/W7+zb/5Nzz//PPHKoxIGXaQh4eH+cVf/EVyuRzf+ta3+MpXvkJ/fzirvZ569bKXvQzLsnjuued461vfemzHfJjIrE0wFj5WjrvzwlsgENhTQ3j9y/ipNAiQ1cpKXucY7uC9aLM1pZlvW1SAvfgM1spL9e6sEuFgJdNxqNE4AFoGVM5Moe1qKeaCiXn9cAa1h8mj6vcOHJ2zPvA9yPoCgfVcJ949aXQiQFs+5YkbODdGMcp784/YcrvKwJmcwB2ZQyXDaASjtIoxs4oy43jdZ/G6zkB0/e0J4ZexF58J/T4aXpe5JPb8QNPRVDvuG4EoOxAPo4B0LEAUNotxBxF0jjoi7bDYVsgxFN6dDRWrNNgzezQ63gKhJc7kKO74LNoKhdLY9S9QGbqfoGP0oId/ughczNwMZvbGRlGz9r7AWGsPRciyjXD37/Ok0QQdefzU6obqUwBizcJ8qQtZ2l/bFgk5EQCf/OQnWVpaoq+vb1/CykHXA/i93/s90un0gdaNiIiIOCqaGjG+5jWv4UMf+hD/7J/9M173utdx/vx5ksmtPR7e9KY3NbOrPaGUQkpJe3s7Sim+8IUv8P3f//0MDg5imuFHff7557FtmwsXLhz68RwXolj/t6pY5WDb0BJ7oR8z04E7slDrmFnZKcz8PF7PebThoKUEYdT+Ig20kGgrGZU23wqtkaVVYrOPISv1CnCyEMOeGdp3FNWBDkEoKhMz6Fh1oFQ2sL7Vs6sfwUnlIIJO4+D5oIKQcA2sJ3vw7k6HVa7MgMrEFM7U6J5MWbdD+hbO9TGCzixebxpdvYalX8JZegZ7+Xn8zjG8nvMop+rVozVoFaZJBB5CeYjAQ9lJtN18CfUTj9agPKRfRnhlhF9Cuvlq5R2/tpio2Njz/S0pK78XpGuzbhmrYwEUto6024+gc8sLOXaAd3kV3Vb9v6lwcsHMNSc2G6U4sSsTVMZnUIkyQgfEZr+GW87i9d11S1aPE34ZWVzBzE1j5Oe39L+RhQRmuiP0eTpgFTctFH53Fj+V3pxOVZEYM20Yc3srVd5IJORERERERETsTFNijuu6fOlLXyKbzfLHf/zHAIibOkRaa4QQLRVz1rd5M+sROgD33nsvQRDw7/7dv+MDH/gAfX19PP/883z6058mmUzy6le/umXHc9IQngGuBFsdWMxZR1ZiOFfHCbqzuINLYChE4GEvPbfjehrwO0bwUhdR8a6mjuHUonXYmS6tYpQyyFIao5TeMLhECazFFOZyd8vMVzUazABtBGipwKg+NsLHQVsRlaymLrgyFHK80+2HtB9BZqtB84EFHV9iPd0dli3v9Kply6dwpkcw8gcXDAQCM9uFke1EJYr4vWmCtjB1UugAKzOJlZlEWQlQPkL5mwdqVdzu87j9d59uzyutEF4J6RURXgHpFhFeEemXEF4J4Zc3VdrZQCCxllKYq625zpRTxusLU4ytpV5kZWvhWjR4i+jYDsfH3gSdW13IUXEP7640rH9XvsS5Prrnakm7IXwT59oY7vACQfcaAPbqC8hKFrf/XrRz+qITa2iFrKxV25tVZGkF6RW3XFSUbcxMB0am48CpvFpoVLwUVqfqzoK58fwWeRNjtg25HEPo/V9zkZATERERERGxO02JOZ/4xCd49NFHOX/+PH/zb/7NQy1N/vzzz2MYBhcuXNhSyGlEa00sFuNd73oXjzzyCD/2Yz9GIpFAqXCw89GPfrTmo3OrIoom2narg3q/qbQdQWh8aKy14Q4u1TrBO68D1toM1toMfrIPL3Ux9Ns5ybOfWiMraxi5cAYziHWiYp1oK7H7ca8LN+UsspypiTc1o9UtECUHZ3qoKZ8VjUbHKqh4GdXwF7lDaZB1AoH1TA+yfGtUd9mLILPTYPnAgk4gsb7VjXdnBt3jgtRUxqaxZ4abr3KFwCgmMYpJlOWGFWG6smCE97LtBmuN2OkrmIUFysMPoOKtNfptGSoIo2m8EsIrNgg3RaRXCAWbncrdbIcGI9OJvdjXktRFbfi4/UsEXdma11TQnsPMdGEtpjbtQ7h7F3NgZ0Hnlhdy2l28y6tghf9n4Zo4k6NIt7UphUJL7JlB/HIMb3ARBJiFBYxrCwTtw3i9F1GxE3qdrKN8pJtHVtYQlTWMchpZSu8saPoGZqYjTOMt792vZh2NRjsuQVuRIFkI00CNzdekSNuYM22I7P7TtNaJhJyIiIiIiIi90VTv9vOf/zyXLl3i4YcfrqUxHQaf//zn+amf+ine9KY38f3f//2cO3dux+WFEFiWxXd/93czMjLCH/3RH1Eul7l8+TJvectbGB6+9Utty6JJUPUbULEKRqH5/48ITJyZIdRyT+jFIxUIjRa6/liGj/3OXG2mziwsYRaWCGKdeKk78DtGtjdy1Rp0EL5/FGavWlfD0Ocw1+a2NIPUhkUQ60LFOlHxLoKqaaZRFW5kqfo32N2fSHhmWPkon8Bc7dpXZ1ej0baHSpRC0WY/ws3N+ALruW7kNmkfp5WdBJm9pLEcWNBRAuvZLvyLWVRfBQS4I7No20W4NqGb6PrS9cfCs5CFvaUfSM/GXhjAWkrhd2XxuzJoyw9NSZVEBBKhDAhkzajU786A1FXPq7/AS13CTV06HiNlrRBuAVnJId216t8Cwq9G1hx0u4FE+CbCM8O/vonwLIRvIstOS3xxtAhLK3uplZqQVkOE37PfsYa13BtG/1TTVRrTJnV8dzEHthZ0bnUhJ+gp419MQ3UuSJQcYtdHEf7h9CsEAmulG1m2qYzNgRkgADM3i5mbxU/24/VeQiWOt7w7WiPcXNi+NFw3wivsfr0oEbY1xThGIY7MJ7e8z2h0GL0pFUgVRnBKXX8uVdjWtBXRlr/FjgjTtZZiYSROk21KJORERERERETsnabTrF7xilccqpAD8MQTTwDw//7f/0Mpxbve9S7OnDmz63rJZJLXvva1vPa1rz3U4zuJiGK9Q6ViLkZhay+jgyArzq7RJNZ8H37XGn5qFe2EOfRGOYsx/XWU9Qx++2CYGhK4iMCDwK09FlqhpUGQHMDvHMbvGN1bRI9SmGszyOIKQvlowwJpoQ0TbdgEid5aGL0srmBlbmCszSGDnVPRROBhFpagsLS3L2idQFY707Hwbym275B2bfj4XWuoRIkgWdoUyr7l8ZYMRMkEX4YlX31R+7v+miiap9YjZze2EmT2YzB7YEFHC8znO/GDNdRgGQR4/cu7r+daYcnfBhFgx+WVgbXag7Xas+uyZrorNFOOlxFo7OXnMPLzlIcfONyUEq0wCkthdFplDenmkG5+21SwHQkkwrWQnhWKNK4dPnarzw/o87FX/LYc3uDiRi8QX2BMhffUYKwApgZD4Q0s4XdnsBb6Q48XVa+itJfInHUaBZ1bXsgZLOCfW6sJnDKfwLkxHAqTh4xRSBJ/4Rx+dwYvtQrW+gTEImZhkSDeg5u6jEqGhRRQAUZxKYyI8eqpfmiFlg3tjbTAsNAy/FVORygM7TEyVRaWqj43C+H294BwTWQxjizFwzanvHN6k0bj92TCdEFr7+dmDVciMzYy4yAzTktSdSMhJyIiIiIiYn80pcJcunSJ6enpVh3LJta9cV7zmtfwwgsvcM899/Dbv/3bBEHAu9/97h0FnbW1NSzLIh6P14yRt/PauRURhUYT5O1TfQ5t/1pipbsw052bqltIr4i9enXn9VVQnyVtn6E8+qodPT+EVyI29RWMUnrH7QZOB0L5W6enVM0gjbU2hG/W0pZ0rIzerbPrG2EUQClW+ytcqyl/DmW7VM5ObT8bSlW4yVuIvIXMW4iCdcuKNPuhUZA5SLnmAws6CMyXOggCSTCyewoUgLY9vIElVKyMMzOy733uhHQdnGsT+KkVvL5lEGCUMySu/TmVwfvwu8Zbuj/hFrAy1zGz13dMMdywjleNqlkXa6qPa+LNEQzqt8PrXcEbaBBxNcj5OOaNNoQXXmfGYgx/vIAaLIEI/5/u2AxqtQtZSICoRs45ARq953vCQc6/dDpNd/fJSxHaNrWqzcU/X0/bNdId2LODB/JYOShCSayVHszVrnACom+1JtwZpVXiU1/EbxsEYVRNhA8gfABBrAsvdZkgObC9qKMV9uJTWOkd2sdAICtOtWy4E1aeKjv7mijQaNyRBYLu7D4+gECs2TUBRxTNlvm8QSTkREREREREHISmxJwf+ZEf4Sd+4if40pe+dCjRL+vCy+joKC+99BLvec97GBkZ4Rd+4RcQQvCDP/iDWwo6S0tLfOQjH2FgYIAf+7Efq1XYOm4h5+GvfWTPJdy36/zuFVG0IBBgaIKOHHqu/1gGRQKBudaOsdaGSpTw+lZR7ZtTmQhEmBoSGAglwzSu9TSt3ByxG1+mPPZqMDafsrK4SmzqK3saPBqVm/x+lMDIJTFybRi5tlp6CgBr9cgFbfqoWBkVr9TEMVkOhRtRcsLUjhZ2bLcUcnyBXLPDDnUuEm524yAizs3rH1TQMa61IVcdVLIazaGrZ8d6RpwGBKieCqrbBQFBZ45gpdRUafPtjsdaTiHzSdyRObTjhpV85r6BV1zE7b2Idprw9lEBZn4OM3Mds7C49TKa2uBTuHYoeLpOKHgecmTNQblZyBEZC/Na+6Y0EuEZWFc6UPNx/LM5dFf4P/d7MtCTqS9YOfzPGQQHExoOkx3bsoZbpvBM7JnBlt5H98OGCYjONby+1VrFPzM/v/2KSoAW1VTj7RczyhmM6S/Xo30SN3nIBRViM1/DKDaIh0ogC3GMQiJsaypOKHY28R1pNN7g0gYhR6xZiIpRbYdl2HdQAhGI8LWKgcjZ24pskRATERERERFxPDQl5nz961/nvvvu41/8i3/B/fffv21pciEE73nPew60jyAIGB4e5hWveAXPPfcc7373u8nlcvzar/0aAD/0Qz/E2NgYV65c4fz58wAYhsFzzz3HlStXeP/733/wD3iMPBr8TlOCjlACuRhHDYUmhX53Fmtl97SMwyI0ck1gXE+gLLfm9SF8A5SxqZOo0QQdedzROZAas7BE/PpfURp/LZh1HwozPYkz90QtfUO4JtZcP7LioI2g5gGgLY+gM1eLDgIwl7uwFvr2ltrimxj5tqYqFO2Vm4UcUTAxX+hq+UzodkQd8zrNCDoiayOzO/u1GPMJgsEi/oWwTL3Xt4wxNXagY90NoxwndvUM7mB9Rt7KTmFlpwhi3XhdE2FKo7GHGX6tkZUsZnYKK3sDcbNflCYUSNc6wkGoe3Az1KNGG374HXXmaq8Zk20Y0zt7G8mChfV0N2qgHEabNNxWRNrGutK+/9LM+zz/DqsAwUHZrQ0TOQuRN9FtPtryCdoLmLmjKRu/7TEhMLOdGNmOzdErvhGK//lkLfUP30AgQu+ZmufMevVAhTZ9vJ4MOh6m865H+wTxXty+u1CJFKKcJTbz1/WIUQXWfD9murPlYqfXv4KfqkawajBf6MJYPriAHLUXERERERERx0dTYs4jjzxSe/yNb3yDb3zjG1sut1cx5+Y0KK11rXM6PDzMo48+yjvf+U7e9a53IaXkk5/8JEopZmZmqFQqfPzjH6ezs5Oenh4eeeQRlFJ0dXU18xGPlWYFHWMuEYo5gN+bwVxpXfnrZpCeDbuYkq5H9IhrJpUz02AojFKa+ORfUp54Hdq0seef2pCuJQvx0Gthm6o11koPyvII2vOIQGJkO07E99GIcipUzkxvEHKsp3tDz5sjIOqYb+aggs5ekQtxGC1ATKHaCwSx1kfnrCO0xJkbwi8mcIfma+bZRjmNMZ9GLzyF3z6M3zVBsO7xoTXCK2CU0shyOqzUVs5smW6y7v9jZA9e8vg4CdryVIbnNnhTGdfaMGf25jkmEBgLcUTBxL9jDdAYN9qQK/uvHrTOfs6/k5RitZe2SyAwptrxL4figte/jJHb2qj3qBEI7Nl+fNdEGwoj14YsxLc9NoEIJyaUAWw8941qurHXv1yL9jFKK8Rv/CVBvBdZySJUNQrTM3BujLSsHHsjXu8qfv9K7bn5Umck5EScCnp6ejb8Pez1ADo7OzFN80DrRkRERBwVTYk5H//4x1t1HEAo+lQqFWzbRgiBEALf9zFNk2//9m/nK1/5CplMhlQqxT/8h/+QIAj49V//dRzH4T3veU9NuFFKMTAw0NJjOy6aEXRkyUJkbHSXG1ZBai9gtGDWU1dzRY6iw22U4sSujVE+Mw1mgFFZIz75BbQZwyg2dEpXurDm+nc9JulZyNWTM+BpJGgrUBmbrVXLiYSck8NhCjpCC8z/P3v3HSdJXeeP//Wp1Gl6ctrZCbs7uyzrEpagHGBAPRD1xIBZD8MheJyCngQDCnKcp9/zVDjkQPTAfMrJT7k7PQmCJ0FAXVhkYdk4O3kn9XRPpwqfz++P6jChZ6ZDdX4/97GPCV3VXd1T9alPveoTRnwlaZ2TpMw3QV7wwWwKwmyeh3DHE9tiQQ0OQw0Og6tecK0BcnQOjBurPxlnkEMNUALNWc/MVWmEZEHvOra0FYbBoBxshDztzvn5pAUV2u42x7av2IGi03I5Z0mzrnTrHE+8IlrnJDEhQZ0qfEarxd2NraaQHeokJwaIps9jUtQF7ehGu8WPw8yWAIwN6S5c8qFGyMe8eT8fnS9IKd1xxx0lXQ8ArrvuulSLf0IIqVQFhTm7du1yaDOAJ598Evfffz/27NmD7u5unHbaabjoootSM2Vt27YNc3NzePTRR/HmN78Z8Xgczz//PDRNQzwex+HDh3HkyBFs2rQJklSZYzDkq5BARx7zwUxMUW60zuUV5gjGwb0xcG8Eli8K7o2CWRK0kQ2OzpK1GinmhvtQP+KbhiE0E5IeBvTEuDucQRvrghJoKvp2FJPREoDRM5mesjqkQt3bSkFOBSnmBXUpW+ckMUtJzYrF3TGYzQGYTcFUmCgZkcwDhcNugZOc9lgJNq7aGq4aWN4w9J5xCC09PpU0q0HZ3+jIDD1OqZZAJ9dzVSW3znGa3YWrEfK8H1ZzEEbnTHqw5YDfHjOoCGNImY1B6D2TqZ/low1QxvM/d9P5ghBCCKkMFVEDv++++3DzzTejp6cH27dvx6FDh/DDH/4QgUAAl19+OQDA4/HgxBNPxOjoKAA7Md+zZw8+//nPY2RkBLfffjtcLhc+8YlPQFWrr3n/evINdKQ5FxCVAY8F7o+Au+LrTisuJAvcG4Pli4B7o+Ce6JLxH5LLxDeNQJ3oKEn3LUnX4DrUb3dBSjRTZ4YC7WhPUZqjl0pyMMrUGAYApBkXlBdbwHhpLmaoYp69Yl1Ql6N1zmJSzA1tohvqZCeshgWYLfPgvrAdLpoypKgbctRjD/oddZc9vBGSBaPTbmWgHuvIa3B3wTiMzimYbYtmwDMZlMMNkCZX705TTpUe6OTdirSCW+cUAwODEmiCHGiE1bgACJYxwBIQ4A1hcJcOxqXUBAGwJDBLsvd7S7IHYGYCqVHWE98LJsA9Meh946kbBfKoD/Jw/p8tnS8IIYSQylH2MOfpp5/GrbfeinPPPRcXXnghent7MTs7ixtvvBEPPfQQXve612H79u1QFAUnnXQSfv7zn+PAgQN44YUXcNVVV+GMM87AK1/5SrhcLpx22mk1GeQk5RPoMDB7kNXN9kWi2RqANp7ugiYgwH12ixvhjoO746k7hasyGaDYlUVjwxS4J1a0O4qLSaYK9+E+6N32RZw22QFmln0XzptgHHrfuF2ZT5BHfZCP5D5Qar6oYp67Yl1Ql6N1znJMSFBCjVBCjRCSBSFxx2dqK5RgHPG+EXBfFABgeaNwD/XlFDBxxUB8YBjClR64mc2rUF9ssmf1qWCVGugUNGB/HbXOWSzZ/SoTIVnQeyeWnB8KJU16Cjq/0PmCEEIIqSxlvRKORqN44IEH0NLSgje+8Y3o7e0FYA9Udtlll+HSSy/F3r17U9N579y5E/fccw9GRkZw5ZVX4uyzz4am2QPpXnjhhWV7H6WUT6AjT3ph9S+kZrWS5/2QI15wdwx69zHwhuia67OobE+HPa9BCmpAXIbVvwCrz65kWs0hxGUO19DGole+maXANbqhqK9RKkbndLqiLmCPzzFZ/G5rSVQxz18xLqiXt87RN0zAPdSfV6sTR7YnNZhr5RAQ0DeOpYIcABDuOOK9Y3AP9efwHOPpIIcnZqsaq57xfiot0CkkyEmqt9Y5axGKidim4VQrVCdI024oB5ooyCFV6Z//+Z8RCoXg9/tx1VVXFX09ALjrrrvAGMtrXUIIKZWyN2sYHh7GWWedha1btwKwZ7AC7ECnsbERR48eTS27a9cuXHrppWhubsZJJ52UCnLqTTaVqsWVa2ZJdqDTEwYkgfjACOSQPRDjinqdxcDCClhYTYU3mcaNUI76wRYUmMfNA7IA94dhdE9Bm+gs9O3VDcufHPcHUJ9vhRRYu/ubk6hiXrj7+d0FP8fyC3K7dU4EcFsQnjhim45CnW6DHGooesu3Smd3SZzM2FKB+yKwvBHIkfUHdLWaguC+xFhAcQnqn1sgRct+KsyZE/tfJanX1jnLccVAfPNwaoBkGAzKUT8gGITCAVkkpjxf9BUCdr8qAIKBJX8l7N+xkAZ5YvWwks4HpNL9/ve/x9TUFDo6OkqyHgDs2bMHc3Nzea1LCCGlUtYarMfjwTXXXJOafpxznhq8uLW1Fe3t7ZiasrvU6LoOTdNw3nnnlW17q8nyFjzyET+4x4RoiQOygNUcSi8claEMN0AKaUBMzrryLM96wPZKMHbOAhJgts9BimtQ5podfje1R0BAaImxf6IKBTl1ankLCyYY1OeaYZw4B2gcwh2H3jsGWJI9Y9R8I6Rw/V3gAoDZNguzNWD/wAF1bzOExmEeFwQAGO0zkI+uHeYkZ61KUg40VmyQU01hTSGD9C9W761zuJoIcpJdnWMytOdawWLF20fpfEAIIYRUr7Lf6u3p6UlNI54McpKtc1RVhWnaM4wkW+FMTk5meBaSyeJKGhMM6vMtYHOLQgOTQT7sh7a7A/KUFyyW+9gYUtAF5VB6Jim9ZxKWL/MMOCRNuPTU0ccipbuYpIp75Vl+0S5FFajPtoBFF7WIkzms5iDiAyOIHncAetckLHcUAqLEW1seZmMQRld6WmXlQCOkgAvSMTcQS9wMaLDHGVqL0TkFKBYAQJp2QZ4rXYiai2oKcpKcKFuSrXOSjM7putnHuaYjvvloOsiJytD+TEEOIYQQQlZX9jAnE87tqXHdbjd0Pd1n/MiRI7j++uup72oOMgU68tEGyMMN0P7UAWWsAUwUdpdfnvRCHkuM9cKAeN8ouOZcX/9axBcPvFqilgFUca9cGQOdP7ZBfbYF0oTbHnQ8SbFgts0hvmUIscHDMFrmIBgv8RaXjuWNQO8ZT/0sD/kgH7MHhmZgUIbTrXHMjpnVn8cdhdkSSCzIoBzKPPBsuVVjkJPkRBmTbJ0DINU6p9ZxVzwR5Ng3r1hEhvbnNrA4BTmEEEIIWV1FhjnJblcejwfRaBSmaeLIkSO47bbbMDQ0hA9/+MNl3sLqsjzQUYb99pg3GcbCyZd82J9u9aNwxPvrN9CxZwGy1l7GFU99X4qWOVRxr3zLL+IZGKR5DeqBJmhPdEB5vgnStAtYlNsIlw5jw6TdWqdzClxZZya6KsO1OOJ9I4Bkt86QJtyQh5cOEi4d8wBx+1Rm+RfAXbEVzyMgoG+YSE/PfNQHplfW4M5AdQc5SYWWNfXWOoe7Y4htHoZQ7XMGCytQ/9xW1P2TzgeEEEJIbajIMCfJ7XYjHo+ngpzdu3fj5ptvxo4dO8q9aVWn2JU3BgZ1X3MqmBBuHbGth6F3TtV0q4HF7PE4phA9/iCiOw4gtmkYRuschGyuWJYvmqWERdSibhdV3KvHahfzTDDIM26oLzTbwc7+RrD5RfuNzGG2zyC27SDiPWPg7pWBRrURiol4/zAg2+UHm9WgHGxc0RU0OQtYktG+snWO2ToH4bEDVBZWII+tP1ByqdVCkJNUaJlTD61zhGxC75xGbPNwqusfW0gEOQ7eaFmOzgeEEEJI7ajIkR+TAyG7XC7Mz8/jG9/4Bvbv349bbrklNesVyZ1Tg1SuhlkS1OdboO+cBdyWPShy5yys5iDU8U4oocrs1lAoAQGzNQCjcyZVKQcA3hABb4jA2HAMUtgLZd4Pec6eGpYnW+ZwgMWo4k7S1pt22p6dzgN50gPuM2D1RMA7YnY0zwCrOQirOQgp7LVnwgqXbrr7QlieCLgnBqGYEIoJ7o2mu50sKFD3Na3aJVSa9AB9YUDjsBpD4FNxSLrdUpArBoyO6dSyygF/xQ0gXUtBTlIh55tantmKazqMjllYTcFUizMAYEEV6t5WMKt499jofEBI9izLrs+ZpomDBw+ueHxgYACKUpGXUYSQOlKRLXOSAyF3dHRgenoaBw8exK233opt27aVecuqX9Fb6MQUe0Dl4YZUdxChmdAHxjLeMa92QrIQHxiB0XMsHeRwAIsHr2V2sKNvnITeOw7B+JKZrAods2g1VHGvXtle3EthFer+Jmh/aLe7HxnpfYn7IogPDMPyVn6rBqthAfHNR2F0H4PZbgfA6Rl9JKjPNWe8yBUQdqDVFwaSXXFYoiUOBEx/EPHNQ6nWPdKEx561r4LUYpCTVEgZJM26UuWo8MTBvWsPbl0NuDuG2OAQrJb5dJDD7TCSghxCKsfAwEBqyIdMhoeHMTQ0VMItIoSQzCo6Uj7nnHPw6KOP4tprr8WmTZvKvTkkS4wzKEf9kI55YG4J2tOhAzC67bvj6nRbOTfPMVzTEe8fhVjUZUqackMZ8gNxGcJngrdFwdtjEB476LGaQ9AFS89ktZC5ixVVvEkumC5DGWqAPOwD74zC6olAeBN3FZvnIUcqt3WOgIDeMZXxMRZWoLzQtKLbiYCAtTEC3h1NHVvLxftGwBd3z9ElKEcqa5rrWg5yktYry1ZrvWNtDAOL/7ZFCr1LhWs6YgMjqWARJoM84YU87sMD0f9cc91CW9TS+YSQ3CiKkmp1oygKBgcHy7xFhBCSWUWHOZs3b8att96ampacFK6Y3ayWk2IK1L0tsDaGYW0KAaidQMfyRRDvGwWURMXcYFD3tUCaT091zMIqpLAKcdQP3hGFedy8vW5LMLWMNOMu6XaT6rBWN6u1MG5fIEqTHuhnTAGKgOVfgGAcTFRkQ0xYDQvp8WwWFCiH/YAhgekSYLKMXWusLSFYPctaaghAinihzDeCqwZ4ayD1EJvToB70g5m5fQbrdXkrRD0EOetZ7XxkblxInTMAQJ1ohxz1lGqzHMcVE/FNI0BykOMcu1QV0mWNghxSC1772tciFArB78+tu36+6xW6LiGElEpFhzkAKMhxUCmDnCQGBmXUvhteK4GO2RKA3jOZmhmHRRSoz7eAxTIfTgwM0pQHUmscvH3RwLQmgxRwZVyH1C8nwgMmGKRZF3hnDJA5uC8CeaGyWqUAdgubxePZyEcbIM2vXeZbXZF0kJMIcOSgH0rQD2YpEIxD33Yw9bjyQhOkGVfe460UI9ChICe3IKdazxUAIGQL8U3DqW6DLKxAfT73LlX5BDoU5JBacdlll5V0vULXJYSQUqnMW7XEceUIchZTRhsgH1k03Wz3NMym+TJuUX7MxiD0jekgR5p1Qd3TtmqQk8TAoBxqXDKmiTTrLtp4OaQ6ORkaSNPpVl9mY3CNJctneascaXbtIIc36jAH0xf62ng33EP9UOdawCz7GLSagqnxq6RpF+QZd8ED5zoZvlCQU0dBjsQRHxhJd8WNyXaLnBxbiCXlEs5QkEMIIYTUPgpz6sDiirNgAmZvCGZvCGLRTBqlsDzQ0XsmwbV4SbehEEI2ofccS/0sj/mgPN+S9R1WZshQDjbZ47QKQJ6ovOmRSfk43fpDmtMA0w4xkl2tKkmmVjlrhS7CZcE4fj511lJmWqAEmlc+Z9ts+jlHnRsryIkQhoKcygtyLHcMlju2/oI5SgY53Jt4bl2C9lwrmF7Y7IXZhDQU5BBCCCH1gcKcGrc8yDF2zMEaWIA1sADjhBkINfPgocWijDbY0wgDgCwQ7x+ruIvMTASE3bUqdcffDeVwY853/OUZD9Rn2qE+015xs+qQ8inGuCzJrlYAUl2tKkkurXKEJGDsCABaYlaqBS/Uyc7Mz+lKzBQ3r0JaZYDxfBUSxlCQU3lBjtkYQnxwCPHBIVg+52Z9SwU5vkR3QJNBfa513Rac2VorrKEghxBCCKkfFObUsExBTnJmKQAQfgP6STPgXqOk26UcagIL25Va4dahbzi2zhrlZzWGYDUt2D8Ykt1lKk9SYmBkQoDiBDlJldrVKpdWOQIC5rZ5iAYTAMB0Fa7RjRmXNxe3yhkpzgxe+YQyFORUXpAjZBN6/5jdZZYBRueMM8+bKcj5cxukiMPBYobQhoIcUqve//734/zzz8f73//+kqxX6LqEEFIqFObUqOUVZ6snnA5yLAZmJO4Qui0YL5lFKTHOoOxrBqxEF5DWeegbJiFQ2m5f2eKqYbfKSVAONq6YKpmQfBQzyAFWdrWqhG6NAgJG51TWrXJ4iw7ekdhuzuAa7gWzVh5/ZnMgdQHNIrL93oskl3CGgpzVgxzu15cEOcqxtpIEOdwVR2zz8NLf+aLQu6YKOg8JCOi94yuDnCKF94vDGwpySC2LRqOIRCKIRqPrL+zAeoWuSwghpVLxs1mR2iRFVSgHG1PTdZttAXB3HK6jPamBTCuBYBx631hqCnJp2g15pnqnyCX1hQkGacoNviEKyBzx/mG4j2wCM8tzjNndFcdhNadbCclDa4+VswQT4J4opPjSWeDM5gD0DRPp5xzxFTzoMZBd2EZhzdrWHHx/WW5iNQXBgw2QYu7MyzvAbJ63w/kMY8aZHbPg3ii04Q2QzNwDGLNtDlZjogVnkYOcJApxCCGEkPpFLXNq1PIKnjzmA5tLjp8hIFS7y0Jydo1ykKe8UPY3AYkhc7gvitjWIVieyrkLYmw4lh7AMipDOdBU9NekyjlxknKkAWwh0a1RMxHrG4aQ1h8rS0hWVstlS0gW4v3D6SBHAMoBP+Q516rr3M/vhjSnQR5NDBbOAH3DBMzmQGqZVJCTyG7kUS+kY8ULA5YrduuqarbeLIrSgraklaZwGYhtGYLRNut4S03BOOIbJ6D3TqSCHBZWoP6pA/Jh/8rzUMNCTs9veaIwuqdSPyv7mrMKcqi8J/XINE0cPHhw1f/Dw8PrPwkhhBAKc2rZ4koiEwzq8y3pQAcAC6nQ9jjflz8X8jEv1GfbgLi9KwrVRHzzMIyOaZgtgdX/+0PgqlHUrllm8zzM1sT06Rag7st+5qp8UcWeOI1ZEtTnmoFY4hjzxBHvHc147AjJgtkcQGxgCNHt+xHddhDcgZl+uGIgtukoeENiEGYLUF5oympGtwf4f0I+3JAx0MkU5MiHc2jp4xAKdFZaL8hJkqc90J5uBwslzkMSYGyYQnxgFEI211xXyCZM/wLMxiAsTxRCNjPu19wVR2xwCFbLfOp30oQH6p52SFEFyliDfR6KJbrvKRbim0az7nYlZMtuwZncD0d8kAPrB4pU3pN6NTQ0tGZg09fXh4GBgRJuESGEVKfK6c9CiuJ+6yepSnUy0LE22ncc5bEGMF7ai55MpAUN2jPtMLbPQTQZgCRgdGU5GKUpQ4q6IEXdkGJuSFE3mKEUfDHH3bFl4+Q0UXN5UrWYIUN9rgXGSbOAKsAbItB7xqGNbQCYgOVfgNk0D94QxpJDR+aI94zDfWhT3scU1+KI9w9DaIkLc4NB3duc02xuD/D/xF9KbwcAWBsjqUDHfnOJTS1TkJN0rvQO6nKVkG2Qk8RiCtRn22D1h2D12rNKcX8Y0a1H4BrZADnsg4CAcOmwvFHwxH/hyjB4P2dgugpmqJB0BeAyzLa5dLcqi0E52Ah5ammQmDwPmVsD4G32GE3ZdLsSEIhvHE/t32xehTzkX/c9U3lP6l1fXx8GBwfLvRmEEFLVKMypA8sDHWVk/YpmqdkXm20wNwfBN+QwhbJigfsj4P5F65gy5LAHynQr5Gju49vY3UHGUpV/acK7ouLvNKrYk2KTogrUvc0wTpgDZMBqDiKuGXbLmwzjh4ADkADhjsNsnYU6m/vAtJYngnj/CCAn+rDEJKjPtUCK5n7qyRToJJU7yEmiQCf3ICeJCQZlqBHSvAvGtoA9Db1qIb55BFLYDe7W0/vRWiQB4dYh3DqWL83CCpR9q+9/zJSgvNACqycMayAESIluV9sPgZkymKHaNwsMBcy0v+fuOHhjYlpzQ4L6Ysu6+yGV94QQQghxAoU5dWJxoFOpmGBQDzWBH/NA+NZpXu8ywRtMiAYDUJdV2RULVtMCrKYFSEEf1Km2rEMdIVmI941DaPYdXxZSC5qGPBtUsSelIoU0KC82wTx+HmAA9y4bnyouQZ5yQ5py29M1nzybmLZ5GnKoEZKRfes00x+CvjEdirIFBepzzQXNBLci0EHlBDlJ9RzoOHGOkQIuaE+3w9g2n5qBkfsydPXjAFtQIQU1wJQgXBbgsiDcFoTLBJbtZtKEB8rhpnVbozIwKGMNkIIajO0BwG0BDBCqBaGuPYaU+mITmL72/k3lPSGEEEKcUpNhjhACjFVGxb6SVEOgA9jN3bGQXRcMAQFoHLzBgGgwEl91QLUvIHljGPHGMKSgD9qx9lVnSeGaDrNtDmbzPCAnWikYDOoLLWCiePsSVexJqckzbuAQhzmYmBLaYPYsbVNusKC6JBSRxj3gPVFAEtC7J+xpwdcJTQTjMDqnYLbOpVrPsDkN6gtNjow5lQx0klOPs4BWMUFOUj0GOk6eW5ghQ927tIUMdAlSUAML2QEOC6urls0CAlA5hMuCcFlgMSXnbrLJbldWXwjcb9hhkcqx2q4mD/sgrTNODpX3hBBCCHFSTYY5kUgEmqYhHo+joaGh3JtTUaol0MkWAwN0GfKsDMzaFWnBBHhnBGbfAuCyW+3wxjBi/jC0sS4oc82p9bmmw+icgdUUXFpJ54kBj9e5y1oIqtiTcpHHvfaAszIHC2qrXhQrQw3Q2+KAi4P7w7D8ISih1VuqCQjE+0btsXcSpEk3lAONjoaiD/D/rPhBh+sp0CnGOSXZQkae8thlsy5lHdoxMMCQ7VZguU1KtfR5TAnK4fQMhoItDYmEZtnnmLgEecy35nNReU8IIYQQp9VcmPPb3/4W9957L8bHx+F2u3H++efjtNNOSw2yVqxWO9PT05iZyTxo79DQkOOvV4hSBTr5Vl4L3TYmGORJH6Rj3qWhDgP0jZPgLh3KXBOMjtmVIY7FIB3zQB7zQYoV7/Cgin1m1XQcVYL1woK1Ag9pYf2WCsySoBzyw9xhzwJkdB+DHPaB8cwhp9F1LB3kWIA81AB5zFuUljP387srPtApl1o6jgrpluc0JuybB0yXgVD261F5T0hhPvWpTyEej8Plcq2/sAPrFbouIYSUSk2FOQ899BBuuOEGnHnmmTjppJMQCoXwzW9+E9u3b8fb3vY2nH/++WCMFSXQuffee3HXXXc5+pzV7lz5XTlXYh1tqr8o1LE2BWH12GNsmO1zMNvnli5sMMijDZAnvDT9eBnV23FUSCCRTasPJwIPacYFaVYDb9UhVBNG5xS0ie4Vy5nNAXvWIMBu2ba3BdJ89jNWLVeq91cs5WyVU+rjqNZafDqJyntCCnfWWWeVdL1C1yWEkFKpmTAnHA7j//v//j+ceeaZ+OQnP4mOjg4AwOOPP46bb74Z3/rWtxAMBvHOd76zKIHOBRdcgLPPPjvjY0NDQ7jxxhsde61qkkugU6yLASaYPfBlRIW5Zd4efyGphCEOQBX79dTjcZRPIJFLUFBo4MFgT+WsN00DMmC2BCAHmiDH0oOKW95weqpwAMpBf9GDnMXLVlqgU+7uVeU4jijQWYnKe0IIIYQUU82EObqu48iRI3jTm96UCnIsy8KZZ56JxsZG3HLLLfjhD38Il8uFN7/5zY63zGlvb0d7e7ujz1krsgl0SnERIE96waIyjOMCAAPkMV/JQhyAKvbZqNfjKJdAIp+goOBAJy5DPtoAa/OC3V2xZwLuQ5vAwMBVHfHe0VR3RXnUC3nSm/drleP9OancQQ5QvuOIAp00Ku8JIYQQUmyluYotAZfLhdbWVoyMjCAet6czlSQJQgjs3LkTl19+Odra2nD33XfjySefLPPW1p+1KvilrPxLQRe0P3RCe6oTymgDBTmkYmTbraiYz78WecwLtmDn/8Idh9k6CyFZiPePAIo90Lg0q0E+nP+g8+V8f06ohG0oNyrr6DMgxGn79u3Dn//8Z+zbt68k6xW6LiGElErNhDlerxfHHXcc/vSnP+HQoUMAsKT1zY4dO/Cxj30Mx44dwwMPPADAHgyZlE6m0KYcd3FZ4l+pUMWeZGutMMCJoKCQ52CCQTnQCCSKTaNzGvG+EQiXbj8ekaHsa8r72Cr3+6vm16409Vzm1fN7J6RYPvvZz+Kyyy7DZz/72ZKsV+i6hBBSKjUR5nBu3xW++OKL4fV6ccsttyAcTk+NK4SAEAKnnnoq/vqv/xr3338/Dh48WJRZrcjaFoc39dAcnyr2JFeZQgEng4JCnktaUCGNJ8bKkQS4L2p/bzCoe5vzbulWKe+vml6z0tVj2VeP75kQQggh5VMTYY4k2W+jra0NH/7wh3Hw4EFcd911iMfjYIyBMQbLsgAAJ598MiRJwvDwcDk3ua6dK7+LghxC1rA4HChGUFDIcypDDUB80amDA+rzzWCx/IZgq7T3V8mvVW3qqQysp/dKCCGEkMpQMwMgA4Asy3j5y1+Oubk5fOc738E111yDq6++Gp2dnVAU+62GQiF4vV74fL4yb23+kkFIPVceiz2gcj1/tqQyVGpIwCwJyiE/zB3zABIzVwXzm7mqUt9jUqVvX70opDwuxY0DOl8QQgghpByqsmXOWmPd+Hw+vPGNb8THPvYxHDlyBFdffTXuuecejI+P48knn8QvfvELNDQ0YPPmzSXcYuc41U2pnJXP+62fFPT6VHEmpDCFzvwkz7ihPt0K9enWvGeuKmZQ4sTMVhTkFM6JIIWCHEIIIYSQzKomzNm3bx8OHDgAAOuOdeP3+3H++efjxhtvRHNzM/7t3/4N7373u/EP//APOHz4MG688caqnP7Y6QGEy1EJXfya+bw+VZwJKYxTU3hLCyqkBTWvdSnIqX0U5BBCCCGEFFdVdLN6+OGHcd111+H888/Hu971LmzZsmXddVwuF0444QTccsst+NOf/oTp6Wn4/X5s3boVHR0dJdhqZ603tXe+lcr7rZ+UbPyaTNuYy+tTxZmQwjgV5BSCgpzaR0EOIYQQQkjxVUXLnGeeeQYA8Jvf/AY//vGPceTIkazWS3bHOvXUU3HeeefhzDPPrLkgJ5dlVlOKSular5HN61PFmZDCUJCzPgpyCkdBDiGEEEJIaVR0mJMMY84880yccMIJeNvb3ob77rsP3/ve99YNdEKhEOLxOID01OXVKJeKaaUGOoWGNVRxJqQwFOSsj4KcwlGQQwghhBBSOhUd5iTHxunt7cWBAwdw2mmn4VOf+hQefPBBfP/731810JmamsJ1112Hm266CeFwODV1ebXJp2JaaYFOLs+5WjcsQkj+KMhZHwU5haMghxBCCCGktCp+zBzLstDT04NTTjkFL7zwAi666CKEQiF861vfAgB88IMfRF9fHw4ePIjBwUEA9hTlL7zwAg4ePIhLL720nJuft0IqppUyhk6+AxzT1OuEOIOCnPVRkFM4CnIIIcX0/e9/H0KIdSdAcWq9bNYdHh5ec/2BgQEoSsVfZhFCqlxFlTLLC00hBGRZBgD09PTg/vvvx3vf+168733vgyRJuO2228A5x+joKOLxOG666SY0NTWhtbUVd955JzjnaG5uLtO7yV+pBiRejROBDk09Tkj1o6CDlEKll/mVvn2E1Dqv11vS9dZbd2BgYM11k0FP8iYzIYQUS0X1P2KMIR6Pp8bKYYzBNE0AwMtf/nJwzhEIBAAA73nPe/CRj3wEv/nNb3DkyBGcd955aG5uBmMMnHN0dXVhw4YN5XoreSv3HU4nnqMSKr7Vvv2EOKGQMKYaghwntrESWi9Vu1oubyt9+wghpacoCgYHB1f939fXV+5NJITUiYoJc5588kn84z/+Iy666CJ84hOfwPe+9z0ASDVR3LZtG+bm5vDoo48CAOLxOJ5//nlomoZ4PI7Dhw+nxtCppzFylnOy4plvN6lKUe3bT4gT8gk8qiHISaJApzLUYnlb6dtHCCGEkPpWEanHfffdhxtuuAFDQ0PYvn07ZmZm8MMf/hA333xzahmPx4MTTzwRo6OjAIDrrrsOu3fvxuc//3lceumluP/++3H33XfDMIxyvY2CVFqQk89zVmLFt9q3nxAn5BJ4VFOQk0SBTmWopfK20rePkHryk5/8BP/+7/+On/wkt+My3/UKXZcQQkql7GPmPP3007j11ltx7rnn4sILL0Rvby9mZ2dx44034qGHHsLrXvc6bN++HYqi4KSTTsLPf/5zHDhwAC+88AKuuuoqnHHGGXjlK18Jl8uF0047Daqqlvst5axSg5zFz73eNlZyxbfat58QJ9zP7143sKjGICcpm/e3nnOld1T1Z1AJaqG8rfTtI6Te/PSnP8XU1BQ6OjrwrndlX2fOd71C1yWEkFIpa8ucaDSKBx54AC0tLXjjG9+I3t5eAEBraysuu+wyBINB7N27N7X8zp07wTnHyMgIrrzySpx99tlwuVwAgAsvvBCbNm0qx9soSKUHOdm8RjVUfKt9+wlxwlpBRS2EGNRCpzJUc3lb6dtHCCGEEJJU9m5Ww8PDOOuss7B161YA9gxWQgi0traisbERR48eTS27a9cuXHrppbjyyitx1llnQdO0cm22I6olyFnrtaqp4lvt20+IEzIFHrUQ5CRRoFMZqrG8rfTtI4QQQghZrKxhjsfjwTXXXIMLLrgAAMA5B2MMjDG0traivb0dU1NTAABd1wEA5513Hl72spfB7XaXbbudUG1BTqbXrMaKb7VvPyFOWBx41FKQk0SBTmWopvK20rePEEIIIWS5so+Z09PTk/o+OQuVEAKMMaiqmpqaPNkKZ3JyEl1dXaXf0AqzVsUzGRRR5TSzSv9c6O9XG5JhQKWGJcXernK/fyfG0ClEud9/pVivHCu0vKvWGyOEEEIIIYUqezerTDjnAAC3251qkQMAR44cwfXXX4+rrrqqXJvmmEIqj9kEOcu/d0qxn7/e0edbGxaHCPXYwqNS3n8hQUoh61bK+690hZZ3VEYSQgghpJ5VZJgjyzIAuxtWNBqFaZo4cuQIbrvtNgwNDeHDH/5wmbfQGfkEOtkGOWv9Ll/Ffv56R59vbch08V5PF/SV9v7zCWWcCnLW+l29K7S8o7KRkMplmiYOHjy46v/h4eFybyIhhNSEigxzktxuN+LxeCrI2b17N26++Wbs2LGj3JvmmFwCnVyDnGwey1axn7/e0edbG9a6aK+HC/pKff+5hDNOBznZPFZvCi3vqEwkpLINDQ2tGdj09fVhYGCghFtECCG1qSLDnGQ3K5fLhfn5eXzjG9/A7t27ccstt6Rmvaol2QQ6+QY5uSxTruevd/T51oZsLtZr+YK+0t9/NiFNsYKcXJapdYWWd1QWElId+vr6MDg4uOp/RSn7sJ2EEFL1KjLMSQ6E3NHRgenpaRw8eBC33nortm3bVuYtK561wppCg5x8li3V89c7+nxrQy4X6bV4QV8t73+tsKbYQU4+y9aaQss7KgMJqU/btm3Dzp07c74OyHe9QtcFgOHh4TW7miUneCGEFNfs7CwuueQS7Nq1C6973evw+OOPr1hG13V85jOfwTnnnINTTz0V73znO7F79+7U45///Ofx8pe/HKeeeire9KY34Te/+U0p38KaKjoWP+ecc/Doo4/i2muvxaZNm8q9OUV3v/WTFZVVp4Kcxetk27Wr2M9f7+jzrQ35XJyfK72jZmY5qrb3n2mWq1IFOYvXqZW/f7YKLe8oyCGkfn35y18u6XqFrrteF7JkF7TBwcG8X4MQkvbpT38aL3vZy/C2t71txWNf/OIX0d7ejscffxyPPfYYPvGJT+DXv/41mpubU8uYpomNGzfiRz/6Ebq7u/GrX/0KH/3oR/Gb3/wGPp8PH/zgB/H5z38emqZhz549+NCHPoQHHngALS0tJXyXmVVky5ykzZs349Zbb62LICdp8YW600FOLusW+/nrHX2+taGQVha10EKjWt//4iCl1EGOE+tWm0LLOyrzCCHVRFGUNbuY9fX1lXsTScI999yD7du3Y2RkpNybQoogHA7jwQcfxOWXXw6Px4PXvva1OO644/Dggw8uWc7r9eJjH/sYenp6IEkS3vjGN0JVVRw+fBiAHbxqmgYAYIzBMAxMTk6W/P1kUtEtcwCkPrh6RBVYQgjJTzIsWS2sqbeWMYQQQgipTXv27MHPf/5zPPHEExgdHUVzczNOPvlkfOITn8DmzZtLui3hcBjf+c538Mwzz+DZZ5/F/Pw8/umf/iljq5nlnH4fQ0ND8Hq96O7uTv3uuOOOw4EDB9Zc78iRI5ifn1/Syu7666/HPffcg3g8jle96lXYvn17zttTDBXdMqcelSLAKXTA5WKuWy/o860NhQQCtRAmVOr7X9zqpZgtYCr1/VeaSi6zKnnbCCGEFNeb3/xm7NmzBxs3biz3phTk29/+Nu677z6ceeaZ+NznPod3vvOd+MMf/oC3ve1tePHFF0u6LXNzc/jmN7+JQ4cO5Rx4OP0+IpEIGhoalvyuoaEB4XB41XVisRiuuuoqXHrppfD7/anfX3/99di9ezfuuusunH322WCM5bw9xVDxLXPqSaUEOYuXzXWbqGKcPfp8a0OmMViyWadWVNr7z7QtxRyjptLef6XKp7wrNipPCakOn/70pzE/P4+mpqacxrLJd71C183GWlO3A/a4OzTjV/HJsgxZlsu9GQX74Ac/iK9+9atLerS84Q1vwJve9CZ861vfwle/+tWSbUtnZyceeeQRdHR04Nlnn8Xb3/72rNfN5X1ceuml+OMf/wjADmB+9atf4Utf+hIA4JJLLsEll1wCr9eLhYWFJa+xsLAAn8+X8fUNw8AVV1yB/v5+/N3f/d2Kx2VZxplnnonvfve72LRpE171qldl/d6KhUqJClFpQc7idbLdNqoY544+39qQywV9LV7IV8r7X2sbKiXQqcW/f7YqKdCh8pSQ/JmmiaGhoVUfHx4ednRcmP3792NqagodHR0lWa/QddeTzQDJ632GFPZkZ2FhATfddBMefPBBHDt2DH6/H8cffzyuvPJK7Ny5E/fccw8+85nP4MEHH0Rvb29qvSeeeAJf+cpXsH//fnR1deHiiy/G1NQUbrnlFuzbtw8A8K//+q+45ZZb8L//+7/45je/iYceegiqquLd7343rrjiCkxMTOCGG27AE088AY/Hg7/5m7/Bhz/84SXbNzo6ijvuuAOPP/44xsfH4fF4cMYZZ+Dqq69esj3rOfXUU1f8btOmTdi2bRsOHTqU56eXH03T8j5ucnkft99+e+r71QZAHhgYQCQSweTkJLq6ugAAL774It7ylreseB3OOa6++mowxvCVr3xlzZY365WBpUTdrCpApQY5uaxLFeP80edbG7K5SK/lC/lyv/9swpRyd7mq5b9/tiqhLKuEbSCkmg0NDa3ZsqSvr2/dwKKerTdA8stf/vI1g5zh4eGKuZCsdNdddx1+/OMf47zzzsN1112HD3/4w3C5XDh48OCq6+zduxcXX3wxAoEAPv7xj+Ptb387vvnNb+KBBx7IuPwnP/lJCCHwqU99CieffDL+7d/+Dd/97nfxoQ99CF1dXbjyyivR39+Pr3zlK3jqqaeWrPvss89i9+7deOMb34hrr70W7373u/H73/8eF110EaLRaEHvXQiB6enprGZcMgwDs7OzWf3nnBe0XbnK5X0s5/P58JrXvAY333wzYrEYHnroIbz44ot47Wtfu2LZL3zhC5iamsJNN920JCgNhUL4r//6L4TDYZimiV/96ld44okn8NKXvrSg9+UUinTLrNKDnMXPsdq2UsW4cPT51oa1WmjUw4V8ud5/LiFNuVro1MPfP1vlbKFD5Skhzujr66OptYskGfaspZBuWtm0KqiVlj+//e1v8c53vhOf/vSnU7/7yEc+suY6N998M2RZxo9//ONUa47Xv/71eMMb3pBx+ZNOOgk33HADAOBd73oXXvOa1+DLX/4y/v7v/x6XXHIJAOCv/uqv8IpXvAI/+9nPloQA55xzDs4///wlz/fqV78a73rXu/DrX/86YwuSbN17772YnJzE5Zdfvu6yf/rTn3DRRRdl9bzLWzEVWy7vI5Prr78e11xzDc444wx0d3fj61//empa8osvvhinn3463vSmN+Huu++Gy+XCX/zFX6TWveOOO3D88cfjpz/9Kb74xS9CCIGBgQH8y7/8C3bs2OHE2ytY9R+lVaxagpzFz7V8m6li7Bz6fGtDpgv6erqQL/X7z6e1TakDnXr6+2erHIEOlaeEkFqQTTctAKsGQsmWVau1/llv/WrS2NiIZ555Zkk3m7VYloXHH38cf/mXf7lk+YGBAbziFa/AQw89tGKdxWPCyLKME044ARMTE0t+39jYiM2bN68I4dxud+p7wzCwsLCA/v5+NDY2Yu/evXmHOQcPHsQNN9yAU045BW9961vXXf7444/HnXfemdVzF6Pr4WqyfR9rjWvV2tqKO+64I+Nj3/72t1PfJ7vPZfL9738/i60tDwpzyqTagpzFz5ncdqoYO48+39qw+IK+Hi/kS/X+C+k2VapApx7//tkqZaBD5Skh2Sv1mDgkN9m03FlPvbSsuvLKK/HpT38a55xzDnbu3IlXvepVeMtb3rLq/jszM4NYLJYxMFstROvp6Vnys9/vh8vlQmtr64rfBwKBJb+LxWK4/fbbcc8992BychJCiNRjoVAom7e4wtTUVGompptuuimrAZ6bmppw1lln5fV6xZLP+6hHFObUqGJWXKlSXFz0+daGer+Ip/df3+8/W6UIdKhMJWSpbMIaAKte8NKYOKRavOENb8Dpp5+O+++/H48++ii+853v4I477sC//uu/OjYTkSStHIJ2teBhcVgDAP/wD/+Ae+65Bx/4wAewa9cu+P1+MMZS4/DkKhQK4SMf+QhCoRB++MMfZtUaCQB0Xcf8/HxWy7a2thY9WMn3fdQjCnMIIYQQQgipE+t1s0mGNbUwZkq9WmtMnWxaVq03Js96KqnVT2dnJ973vvfhfe97H2ZmZvDWt74Vt912W8Ywp62tDS6XK2PYWYxBp5Pj4iwe0ycej+fVKicej+OjH/0ojhw5gjvvvBNbt27Net3du3dXzJg5hbyPTGZnZ/HpT38aTz75JLq6unD99dfjzDPPzLjsj370I9x999148cUX8dGPfhQf//jHU489//zz+OIXv4gXX3wRLS0t+OhHP4p3vKN4E2tki0ppQgghhBBCakS23aQq6YKbOGe9VlPrtawqtNXV8PBwRexblmUhEonA7/enftfW1obOzk7oup5xHVmWcdZZZ+HBBx9cMs7O0NAQfve73zm+jZlauHz/+9+HZVk5PY9lWfjEJz6Bp59+GrfeeitOOeWUnNYv15g50WgUY2NjaGlpQWtra8HvI5MvfvGLaG9vx+OPP47HHnsMn/jEJ/DrX/86NQjyYp2dnfjYxz6G//7v/17x2NVXX43Xve51+NGPfoTnn38e73//+3HqqaeWfV+nMKcE4vE4gKWJLvcZRX3NtQZxIqQSDQwMLBkIbrlMxxGpb4WWo7VYTlbjcUTnQ1Jpsj2OnnrqKYyMjJRqs7I2OTkJAGt2TYjH41VzbBiGkfqayzbnu16h61aDtabmLpRlWdi3b9+6x1GxhcNhvOpVr8LrXvc6HH/88fB6vXjsscfw7LPPLmkJs9zHPvYxPPLII3jPe96D97znPeCc4wc/+AG2bduG559/3tFtPOecc/CLX/wCDQ0N2Lp1K55++mk89thjGYOGtXz5y1/Gb37zG7z61a9GIBDAL37xiyWPv/nNb15zfafHzPnBD36AYDCIY8eOAQAeeughTExMAAD++q//OhWw7dmzBxdddBE+9rGP4eMf/3jB72O5cDiMBx98EA888AA8Hg9e+9rX4rjjjsODDz6ICy+8cMXyf/mXfwnAngVtuZGREfzVX/0VJEnCzp07MTg4iEOHDlGYUw+SO++NN96Y/uWu4r7metPuEVJp7rjjDmzfvn3VxzMeR6S+FXjDphbLyao8jnYV9+lr8e9Miivb4+hb3/pWqTaJAAgEAnkdz/muV+i69W6946jY3G433vOe9+DRRx/FfffdByEE+vv7cd111+G9733vquudcMIJuOOOO/D//t//w0033YQNGzbg8ssvx6FDh3Do0CFHt/Fzn/scJEnCf/3XfyEej+PUU0/FnXfeiYsvvjin53nhhRcA2KFJphm3cg1BCvXv//7vGB0dTf1833334b77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Sqkpr4eELAWrcTIJCQlZfdbTeLJePovruqvdhCVhrf4eSqli28OxMWCt/pZrkUwms9pNCDnNCPv3ynPw4EEANE1b8XEmFHNWCd/3AbBtGyHEuphgrIfPUGCtngh7enqA1TmZnC5U8rGx1kTikZERstnsajdjViq9L3V2dtLV1QWAEGKVW7NwOjo6eOSRR7j99tuLY+NaOI5n4ne/+x3f+MY3OHjw4Jr8LAcPHuTQoUPA2j22hBDFtmtaMO1di7/FUpLJZHBdl/Hx8dVuypzp6enh4MGD7N+/n1QqtdrNmRP33XcfN954Iw8//PBqN2VePPTQQ8V+HxKwls4ZQghs215TbQZIpVL09fXR0dGx2k2ZF7/4xS94+9vfzic/+Ulg5ddgxoq9U0iRBx54gHvuuYfjx4+TTCb5u7/7OzZs2ICUsjjRqHT279/PiRMnGBgY4IwzzmD37t3U1taudrMWxLFjxxgYGOD48eOcffbZbNq0iXg8vqZ+D4C77rqLW2+9lTe/+c286lWvKp5M1tJnqDSefvppDh8+zPDwMFu3buXiiy+u6AVNOp3G930cx6GhoaGi23rvvffygx/8gBe/+MW85CUvIR6Pr3aTgEBQyGQyZLNZtmzZQl1dHZqm4fs+uq6vdvMmcdddd/H1r3+d5zznObz+9a+npaVltZu0IH7+85/zta99jd7eXnK5HP/1X//FrbfeWjHHxUL42c9+xuc//3l27drF+eefX9H9cSruuecerr/+el75ylfyJ3/yJ2zfvn21mzRv9u/fzwMPPMDjjz/O1q1befnLX87OnTsrsi+vFPfeey8/+tGP6O7uJhqN8spXvpJnPetZ7NixAwgWrZV2rN5zzz185Stf4cSJE0gp+YM/+APe9ra3sXXr1tVu2rT87Gc/45/+6Z8488wzGRgYWO3mzJnf/OY3XHvttezevZtrr722eFycjuzbtw/btrngggswjLWxZL7//vu54447ePTRR9mwYQPPetazeOMb37jazZqVX/7yl3zve9/j6aefxrIs9u7dy8c+9rHVbtasOI7DfffdBwTHyyc/+Uk+9KEPregabG0cmeuI22+/nZtuuon29nY0TePJJ5/k7//+7/mXf/kXksnkajdvThQGKMuySKfTCCFobm7mAx/4AOecc86aEg9+/vOf85WvfIWenh5c1yUej/PKV76St7zlLWvm94AgwuFrX/saAwMD/PCHP0TTNC6//PJQ0FkEd955J1/84hfJZrNkMhmi0SjveMc7ePWrX73aTZuS++67j+9973scOHAAKSUvetGLuOKKKzjzzDNXu2mTuP322/nsZz/Ls5/9bBoaGipmwX777bfzpS99ibGxMRzHob29nYsvvph3vetdFbn4u/POO/n0pz/Ni170Ii644IJJQk4lLsqm4p577uFTn/oUL3rRi/jzP/9zRkZG+OpXv8ptt93G3/3d36128xbE73//ez73uc/xqle9iksvvXTKBVGl/z6PPPIIEAiGUkr+/M//vKIXz6dy++23c8sttxTH8v379/O73/2Od77znVx88cUV//0vB3fffTc33HADF198Meeccw6pVIpbb72VPXv28LrXvY5XvvKVxYi4Svlufv7zn/OpT32KF7/4xbzmNa/BcRy++MUvcsEFF1Ts8fjoo49yyy23cOmll/L617+e9vb21W7SnPE8DwgiPj/60Y/y0Y9+9LQUdO69916uu+46du7ciWmanHfeeRU5Dyjn9ttv5+abb6a1tZU9e/Zw5MgRvvnNbzIyMsK73/3u1W7etBTWxueddx5veMMbOH78OPfeey///M//zHve857Vbt6MWJbFGWecwd13382OHTv41a9+xT/+4z9yzTXXrNgaLBRzVpCHH36YW2+9lVe/+tW86lWvYtOmTfzgBz/gy1/+Mn19fcUJRyUvvp988kluvfVW/vAP/5BXvOIV7Ny5kx/84Af89Kc/5ZprruFv//ZvednLXkYikVjtps7KL37xCz71qU9x6aWX8pznPIdt27Zxyy238IMf/IAtW7bwmte8pqImNDNRW1vLnj17GB4eZnx8nK9//etomsall14aCjoL4Je//CU33XQTL3vZy3jJS16CZVncdNNN3H///Vx22WWYprnaTZzAnXfeyT/+4z9ywQUX8Id/+Ie4rsv3v/99BgcHef/7309zc/NqN7HIU089xZe+9CUuvfRS/viP/5i2trYpH7fSfe+BBx7gM5/5DH/4h3/IBRdcQCKR4Fvf+hbf//73efLJJ/nIRz5SUVEvXV1dfO1rX+MVr3gFf/7nf05raysQTMQLO4iFFN5K7vsDAwN84xvf4KUvfSlvfvOb2bBhA57n8ctf/rKYjlxgLZyPC2389a9/za5du7jiiivYvHkzEIgJ2WyW+vp6Nm3aRCQSqcjfp/AZLr74Yp566inOPvtsvvWtb+H7Pm984xsrdgFdzv3338/NN9/My172Mq644gpaW1t56qmn+PjHP853vvOdio+yXA7S6TTf//73ufjii7n66qtpamoCgkiMm2++mS9/+cuMjY3xx3/8xxUj6HR3d/Of//mfvPSlL+Wv/uqviufgX/ziFxw/fnxV2zYVhe/s0Ucfpa6ujssuu6wo5Pzyl79kdHSU+vp6Nm/eXPx/JXzP5dTX15NIJPjLv/xLfvrTn/Kxj32M66+//rQSdA4fPsxXv/pVWlpaGBwc5Oabb+aqq67i/PPPr1hB5+GHH+aLX/wiL3vZy4oC4tDQEJ/4xCe4++67ecUrXsGePXtWu5mT+N3vfscXvvCF4pywtbWVXC7HoUOH6OzsXO3mzYkzzjiDXbt28aY3vYnvfve73HXXXQB84AMfQNO0Ze/joZizgjz66KMkEgle8YpXFBcwZ5xxBs3NzQghGBgYIB6PV8wu9VR0d3fjeR4veMEL2LVrFwCvfe1rOffcc/na177GF77wBVzX5YorriASiaxya6ens7OT//qv/+KFL3whf/Znf8bGjRsB+PSnP82b3vQm7rrrLl7zmtdU1AA7HYXFwFlnnYVt2/zRH/0RH//4x/nqV78KUBR0Km3CUKlkMhl+9KMfsXfvXq688sriIvncc8/l8OHDk77D1f5eDxw4wL/9279x2WWX8Wd/9mfFye6OHTv47Gc/y5NPPllRYk7hO3z5y19ePA/++Mc/pre3l6qqKrZv385znvOcFf9OH3roIZqbmyfsom7bto277rqLr371q/zDP/wD119/PZs2baqIBXhfXx+Dg4NccsklxWP0K1/5CkePHgVg+/btvPGNb1z1ds5GJpOho6OD173udWzYsAHf9zEMg40bNyKl5Etf+hLRaJTLL7+choaG1W7urBSO2wMHDtDe3l4Ucj7ykY/wm9/8Btd1MU2TZzzjGVx//fU0NTVVxPFUTuEztLe3c+jQId70pjfR1tbGTTfdhBCCv/zLv6xoQWd0dJQf/OAH7Nmzh9e85jVs2bIFgL179/KGN7yBW265hYcffpjzzjtvdRu6wjiOw7Fjx3jVq15VFHJ83+fiiy+murqaW265hW9+85tEIhFe/epXV8R8YWxsjK6uLv74j/+4OLZ5nkdVVRUA//Zv/0Zrayu7d++uKLHhscceo6WlpThPvvbaa/nd735X9NHYtm0br3vd67jiiisqRjgrcNZZZ7Fz505s2+av//qv+dznPscNN9zAddddN+k7rqR2LxWe53HXXXdx5MgRrr32Wnbu3MmHPvQhvvCFL1SsoJPNZrnzzjupq6vj8ssvL85h6uvrecc73sFf//Vfc+DAgYoTc1KpFD/5yU/Yvn07r33ta2ltbS2Oh4WNnf3796OU4swzz6zYVLetW7fS1dXF008/zdVXX43nedxzzz0AXHPNNQgh6OrqKs7VlprKmT2sc5RSHDx4ECklO3bsKE7cHnroIY4fP8573/te3vSmN/G2t72Nhx56aJVbOz19fX24rsuGDRuAYHIAwcLhqquu4oUvfCFf+tKX+M1vfgMwaWe1Ujh06BBHjx7luc99blHIKXyWF77whRw6dIiurq41YR5WOJb27t3LfffdR3V1Nddffz1KKb72ta/xk5/8BKAoGIbMTC6X4+DBg+zcuZPW1tZiyLHv+/i+zwc/+EFuvPFGvve97wGsqkmr53n86le/AuClL33phMnu85//fDZu3Mi9996LUmrVTXwL39HRo0epqqrirLPOAoKdi89+9rN897vf5V/+5V/4wAc+wK233jrpecvdrhMnThCNRouTIM/zqKmp4bLLLuM973kPQ0ND3HjjjTiOU/TQWU0GBwcxDINzzjkHgL//+7/nG9/4BidPnuTxxx/nK1/5Cu985zuLRoKVei5zXRfbtsnlcsX//e///i+33347Dz/8MHfffTf/+Z//yd/8zd/wq1/9qmI/x6mUizOf/OQnefjhh3nb297GP//zP3P55Zdz/Phx/vZv/5be3t6i2F5J+L5Pa2sr559/Pk8++SRXXHEFb3/727nzzjv5xje+UTyuDh8+vMotnczY2Bj33Xcf5513XlHIKXDWWWchhGBwcHCVWrd6RCIR6uvrOXnyJLZtAxSPvbPOOot3v/vdNDQ08J3vfIf7779/lVsb0NfXRyaTwbbt4lj8k5/8hN/+9rf84he/4K677uLTn/40n/rUp4qLp9WkIGy0tLTQ19dHLpfj1ltv5bHHHuODH/wgX/7yl/noRz+KbdvcdtttfP/735/wvNWmcB6qq6vjxIkTPO95z+Pqq68mm81yww03cOzYMRzH4fbbbwcqp91LSWFcffWrX82ll17Krl27+MhHPkImk+ELX/gC+/btW/Xxfyo6Ojp47nOfy86dO4FSFb/6+nqqq6s5ceLEKrdwMrFYjPPOO4/LL7+8eK7WNI2f/vSn/O53v+PkyZN87Wtf49prr+Wtb30rBw4cWOUWT8b3fSKRCBdeeCEHDhwgkUhw1VVXceGFFxZTyD/4wQ9yyy23LJtxeyjmrBBCCM4991y6u7v52te+xv79+/mP//gPbrvtNl784hfzzne+k7/4i78gFovxD//wD0VBZ7UXYKfy7Gc/G4Af/vCHQJArWDipNTY28ta3vpVzzz2Xz3zmM3R3d1ecel2goaGBF77whbz4xS8u/s+yLCDYMUmn07iuu2YGKiklTU1NbNmyhf3793PWWWfxoQ99CCklX//61/nRj37EDTfcwI9+9KOwTOYsaJpGXV0djz76aNE75cc//jE/+MEPyGazWJbFE088wec//3n++Z//GVi9CY1hGPT19bF792727t074f81NTW0trbS3d2NEGLVd/4L31FjYyPd3d0MDAzwP//zPxw4cICPf/zjfPvb3+ZLX/oSL33pS/n2t7/NzTffPOF5y92uc845h+PHj/P4448DwXeolCISifDc5z6Xt7/97Rw5coRPfOITAKt+bmtqamJ0dJT9+/dz//33c/DgQW688Ua+/OUv881vfpP3vve9dHd384lPfKKiK0Nt2rSJSy65hJtvvpn3vve9XHvttXzmM5/hT//0T/nsZz/LN7/5Tf7xH/+RpqYmbr75Zvr7+4HKFacKY/YFF1zAgw8+yL333suJEyf4q7/6K/7oj/6I888/n6uuuoqrrroK3/f58Ic/TCaTWdWx5tTvUilVPL5bW1u544478DyPP//zP+dv/uZvuPPOO/n3f/933v72t3PDDTcwMjKyCq2enk2bNvHRj36USy+9FJg4j2psbCSZTNLd3Q2U/EEKVOpxtRTE43F2797NQw89xJEjR4CJ59czzjiDd73rXfT19XHnnXcCq/99XHzxxezZs4d/+7d/46Mf/Sg33ngjn/vc57jyyiv5p3/6J775zW/yyU9+ks7OTr7+9a8XywOvNu3t7fT09PDAAw9w6NAhLrvsMl784hezZ88eXvSiF/GRj3yEuro6vvvd7/L000+vdnMn8fKXv5wnnniCwcFBLrjgAq666iqy2SzXXXcd73//+/n0pz9djAJdj1x4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BEppYRJhGAbxeJxYLLaaTZ2W8847j/e+970cOHCA2267rZhbXZ520NzcjOM4FdvpZqIwiS0MuAUh57vf/S7ZbHY1mzYthUnPxRdfzNDQEA899BCu6/LBD36Qo0eP8uY3v5lYLMYXv/hF7rjjjlVubeVw4sQJRkdHi4NI+YT2yiuv5LrrruPv//7v2bZtG42NjWiaVhQdNm/eTGNjI+Pj4yuWcnNqe2cTFoUQOI5DNBpFCMGxY8f4whe+wOc///lly90t8OCDD3Lbbbfx6U9/mq985StF83QIoona29sZGxvj7rvvZmBgoLjIhWCHo7Gxka6uriVv169+9Ss+9alP8Td/8zd8+MMf5q677ipG4rzzne/khS98If/xH//Bj3/8Y4aGhgAmRB62trauaIWFqdpbCJd+05vexCte8QrGxsb4zW9+w759+yaMJfF4nMbGRrLZbEVGFJajaRqJRKIYtVUYV0zTRCnFY489BlD0a6uERfe9997Le97zHm677TYeeeQRfN+fsLHxR3/0R1x55ZUA/Pu//3sx0qywE/nYY48Ri8VWzaD89ttv54YbbuD48ePs2bOHwcFBvvnNbxZTHCEI39+7d2/xmL/++uvZt28fH/nIR/jrv/5r7rjjDr7zne8Uz4ur8Rk+8YlPYFkWb3jDGzjvvPP41a9+VUyBPfUcGYlEiMViRVHw8OHD/Mu//At33nknz3/+89f9Roeu61xyySW8+c1v5pFHHuGaa66hq6trQhW8VCpFPB6vmKqkhXNXMplESskvfvGL4jm70OaDBw9iWVbRL2Q1KRxzz3rWs7jiiitoaWnhwIED/N///R9jY2PFNj/99NMYhlGMMKo0mpqaePjhh/E8j4997GPs37+fv//7v+e9730vXV1dfPazn12Tc/zFsnfvXj72sY+RyWS46aabuOmmmxgdHeUd73hHxRn0FuamsViMbDaL53nFNc3x48d5y1vessotnJrC91gQRgF++9vfEo1Gi946lTAHKFC+oX748GE+/OEP88gjj/De976XP/zDP+Q973kPl112Ga997WuX5f1DMWcVkFIWf/hf/OIXPPjgg0Cw8Dp06BAPPPAAW7ZsWZXQ5anC+ae6/cIXvpDrr7+ep556iltvvbXooQOB+PH000/T1ta2qlEss32WqSj/baSUdHV18cUvfpF9+/bx5S9/mU2bNi1L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",
      "text/plain": [
       "<Figure size 1180x1180 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = ar2.corner_plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18dfb981",
   "metadata": {},
   "source": [
    "We can return pandas DataFrames with equal tail or HPD results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "eee116c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:55.800420Z",
     "iopub.status.busy": "2024-05-16T04:26:55.800210Z",
     "iopub.status.idle": "2024-05-16T04:26:55.819286Z",
     "shell.execute_reply": "2024-05-16T04:26:55.818721Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.140956</td>\n",
       "      <td>-0.083155</td>\n",
       "      <td>0.137792</td>\n",
       "      <td>0.110473</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.005472</td>\n",
       "      <td>-0.004318</td>\n",
       "      <td>0.003112</td>\n",
       "      <td>0.003715</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>21.704931</td>\n",
       "      <td>-7.272442</td>\n",
       "      <td>1.453561</td>\n",
       "      <td>4.363002</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.129818</td>\n",
       "      <td>-0.259441</td>\n",
       "      <td>0.241884</td>\n",
       "      <td>0.250663</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.199647</td>\n",
       "      <td>-0.179194</td>\n",
       "      <td>0.229105</td>\n",
       "      <td>0.204149</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.140956       -0.083155   \n",
       "fake.spectrum.main.composite.b_1      -0.005472       -0.004318   \n",
       "fake.spectrum.main.composite.F_2      21.704931       -7.272442   \n",
       "fake.spectrum.main.composite.mu_2     25.129818       -0.259441   \n",
       "fake.spectrum.main.composite.sigma_2   1.199647       -0.179194   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.137792  0.110473   \n",
       "fake.spectrum.main.composite.b_1            0.003112  0.003715   \n",
       "fake.spectrum.main.composite.F_2            1.453561  4.363002   \n",
       "fake.spectrum.main.composite.mu_2           0.241884  0.250663   \n",
       "fake.spectrum.main.composite.sigma_2        0.229105  0.204149   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"equal tail\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2ae0b064",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:55.821290Z",
     "iopub.status.busy": "2024-05-16T04:26:55.821098Z",
     "iopub.status.idle": "2024-05-16T04:26:55.844034Z",
     "shell.execute_reply": "2024-05-16T04:26:55.843493Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.140956</td>\n",
       "      <td>-0.100943</td>\n",
       "      <td>0.118609</td>\n",
       "      <td>0.109776</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.005472</td>\n",
       "      <td>-0.004423</td>\n",
       "      <td>0.002953</td>\n",
       "      <td>0.003688</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>21.704931</td>\n",
       "      <td>-6.762887</td>\n",
       "      <td>1.912775</td>\n",
       "      <td>4.337831</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.129818</td>\n",
       "      <td>-0.266135</td>\n",
       "      <td>0.230946</td>\n",
       "      <td>0.248540</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.199647</td>\n",
       "      <td>-0.205326</td>\n",
       "      <td>0.193297</td>\n",
       "      <td>0.199312</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.140956       -0.100943   \n",
       "fake.spectrum.main.composite.b_1      -0.005472       -0.004423   \n",
       "fake.spectrum.main.composite.F_2      21.704931       -6.762887   \n",
       "fake.spectrum.main.composite.mu_2     25.129818       -0.266135   \n",
       "fake.spectrum.main.composite.sigma_2   1.199647       -0.205326   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.118609  0.109776   \n",
       "fake.spectrum.main.composite.b_1            0.002953  0.003688   \n",
       "fake.spectrum.main.composite.F_2            1.912775  4.337831   \n",
       "fake.spectrum.main.composite.mu_2           0.230946  0.248540   \n",
       "fake.spectrum.main.composite.sigma_2        0.193297  0.199312   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2343a193",
   "metadata": {},
   "source": [
    "Error propagation operates the same way. Internally, the process is the same as the MLE results, however, the samples are those of the posterior rather than the (assumed) covariance matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4fde335f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:55.846299Z",
     "iopub.status.busy": "2024-05-16T04:26:55.845902Z",
     "iopub.status.idle": "2024-05-16T04:26:55.858004Z",
     "shell.execute_reply": "2024-05-16T04:26:55.857491Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: (-6 +/- 4) x 10^-3, hpd: (-6 +/- 4) x 10^-3\n",
      "equal-tail: 2.16 +/- 0.11, hpd: 2.16 -0.12 +0.10\n",
      "equal-tail: 2.16 -0.10 +0.11, hpd: 2.16 -0.12 +0.09\n"
     ]
    }
   ],
   "source": [
    "p1 = ar2.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar2.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "res = p1 + p2\n",
    "\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89e5f6e5",
   "metadata": {},
   "source": [
    "To demonstrate how the two objects (MLE and Bayes) are the same, we see that our plotting function written for the MLE result works on our Bayesian results seamlessly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0c5e54ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-16T04:26:55.860395Z",
     "iopub.status.busy": "2024-05-16T04:26:55.860026Z",
     "iopub.status.idle": "2024-05-16T04:26:59.692673Z",
     "shell.execute_reply": "2024-05-16T04:26:59.692030Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 2.14 +/- 0.11, hpd: 2.14 -0.12 +0.10\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "954515b57cd5480c8be2912e30813751",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar2, model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02a5de5b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "09fa449c7b9b4605b5857300b0c2703c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3729cced753c494f8f91e15d8d27b020",
        "IPY_MODEL_2fd9feaf74ed4de5856771dd0165a57f",
        "IPY_MODEL_93a566bc0ed6445d9552629f3415030f"
       ],
       "layout": "IPY_MODEL_ceb27fc9e2ff403d801708b7f52c3257",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1c904999be564b33850eeedbfd8525fd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "20dbd966be8d44f69c6cd2f4040f126c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "222b1094bd104fc5a5624e0c6ef318a8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_66a356aab3ee482d99e71a1204da6d4e",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9de6122140cd4411833d3a3f9869d716",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "25716820a90448ae93bf3d024c2e723b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2a220badb90e4a7885fcb770d3762df7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "2fd9feaf74ed4de5856771dd0165a57f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e3ec8514edea40428750ca6b0f41717a",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_90b802bafec74f65a625ebf6d018944b",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "3729cced753c494f8f91e15d8d27b020": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d6044e3dddaa42d18690cecba15483da",
       "placeholder": "​",
       "style": "IPY_MODEL_6ddeba7e41d44d1784042dda3e69176b",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "37959469ece14d2caf5bb5d53b86d283": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3a1b2b5153a94adbbb386bcf5dc09d7e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_37959469ece14d2caf5bb5d53b86d283",
       "placeholder": "​",
       "style": "IPY_MODEL_d202575a99a84a82a4f1a8ba28ca2f1a",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/1 [00:04&lt;00:00,  4.54s/it]"
      }
     },
     "3c0844e6e6b04ae9a328c712ad1c9d50": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_538ae8ad16c346489eb027593d1a2899",
       "placeholder": "​",
       "style": "IPY_MODEL_6a092160136c44238991cea4f4ce7342",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors:  99%"
      }
     },
     "3e51aa3fabd64bf68aa96d246a83d059": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "48bc3f331ddc418484abb40883bc228e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e84c8ba5dc394efe81939cb61b6ea5fd",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b1776b7081a047018416cff027045fe2",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "48f5e98881814ead8b6abb828eb87691": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_c9bfe3651f7245528f608e94d87ef0b7",
        "IPY_MODEL_222b1094bd104fc5a5624e0c6ef318a8",
        "IPY_MODEL_5ec81ce69da54900a50f42b6b22be5e7"
       ],
       "layout": "IPY_MODEL_8b98d014baef44de9afddeb8432c6b57",
       "tabbable": null,
       "tooltip": null
      }
     },
     "4ad64e05e35c4c02848046a01473833d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4b5dee71bbf048fdac30c1314928507f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4ad64e05e35c4c02848046a01473833d",
       "placeholder": "​",
       "style": "IPY_MODEL_75ea595d44244308bb6934dd44bbef9d",
       "tabbable": null,
       "tooltip": null,
       "value": " 99/100 [00:03&lt;00:00, 27.34it/s]"
      }
     },
     "52b90e330a03449993012ff54964d8ce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "538ae8ad16c346489eb027593d1a2899": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "53f59d3c1912425b9372b859c7cf6b5c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5ec81ce69da54900a50f42b6b22be5e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e4a9b8521c4d463a9d81b0134ba298d5",
       "placeholder": "​",
       "style": "IPY_MODEL_6659e9a1032546f299ec972febb80ab1",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:03&lt;00:00, 269.84it/s]"
      }
     },
     "65f128cb62e0465ea8186daf79e1624b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6659e9a1032546f299ec972febb80ab1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "66a356aab3ee482d99e71a1204da6d4e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6a092160136c44238991cea4f4ce7342": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6ddeba7e41d44d1784042dda3e69176b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "74e1220df8b9440c8cf524dedeb30faf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "75ea595d44244308bb6934dd44bbef9d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "86ff0212ab934ae3a06935d817571144": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_95baaf885420406cac1686cf11bfe51e",
       "placeholder": "​",
       "style": "IPY_MODEL_9073fba443b64592b6615e61e9cf2590",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "8b98d014baef44de9afddeb8432c6b57": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8fc19965d11343b3a7fd836fcea66a0f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9073fba443b64592b6615e61e9cf2590": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "90b802bafec74f65a625ebf6d018944b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "93a566bc0ed6445d9552629f3415030f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e89a91087a3b4a2f82c234a5f0ee5cb7",
       "placeholder": "​",
       "style": "IPY_MODEL_f1b407fbbed64213978f5fdd4440b5ce",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:00&lt;00:00, 273.14it/s]"
      }
     },
     "954515b57cd5480c8be2912e30813751": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3c0844e6e6b04ae9a328c712ad1c9d50",
        "IPY_MODEL_cf99bde23825482d9a355e6e7e419d25",
        "IPY_MODEL_4b5dee71bbf048fdac30c1314928507f"
       ],
       "layout": "IPY_MODEL_8fc19965d11343b3a7fd836fcea66a0f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "95baaf885420406cac1686cf11bfe51e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9b45e66d7d9345b8b94cde014420a3e7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9de6122140cd4411833d3a3f9869d716": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "a756b27b98c74dfe93e20b6ef4654c87": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "ae6d797c5c684eef9fd721b5d0a155c1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_52b90e330a03449993012ff54964d8ce",
       "placeholder": "​",
       "style": "IPY_MODEL_20dbd966be8d44f69c6cd2f4040f126c",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:03&lt;00:00, 27.92it/s]"
      }
     },
     "b1776b7081a047018416cff027045fe2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c9bfe3651f7245528f608e94d87ef0b7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_53f59d3c1912425b9372b859c7cf6b5c",
       "placeholder": "​",
       "style": "IPY_MODEL_65f128cb62e0465ea8186daf79e1624b",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "cc315fecff294ff3aa3a42e86db276ec": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_86ff0212ab934ae3a06935d817571144",
        "IPY_MODEL_48bc3f331ddc418484abb40883bc228e",
        "IPY_MODEL_ae6d797c5c684eef9fd721b5d0a155c1"
       ],
       "layout": "IPY_MODEL_25716820a90448ae93bf3d024c2e723b",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ceb27fc9e2ff403d801708b7f52c3257": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cf99bde23825482d9a355e6e7e419d25": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3e51aa3fabd64bf68aa96d246a83d059",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1c904999be564b33850eeedbfd8525fd",
       "tabbable": null,
       "tooltip": null,
       "value": 99.0
      }
     },
     "d202575a99a84a82a4f1a8ba28ca2f1a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d6044e3dddaa42d18690cecba15483da": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d628c38a6b0f4b208f5494844edda535": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "da93fb1dd2634fd08eb10662bf329e2f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d628c38a6b0f4b208f5494844edda535",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a756b27b98c74dfe93e20b6ef4654c87",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "e3ec8514edea40428750ca6b0f41717a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e4a9b8521c4d463a9d81b0134ba298d5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e84c8ba5dc394efe81939cb61b6ea5fd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e89a91087a3b4a2f82c234a5f0ee5cb7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ef8ff8c38b4a45b2af964e808421e630": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9b45e66d7d9345b8b94cde014420a3e7",
       "placeholder": "​",
       "style": "IPY_MODEL_74e1220df8b9440c8cf524dedeb30faf",
       "tabbable": null,
       "tooltip": null,
       "value": "processing MLE analyses: 100%"
      }
     },
     "f1b407fbbed64213978f5fdd4440b5ce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ff6e9baa54654c0186b7b183d868f191": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ef8ff8c38b4a45b2af964e808421e630",
        "IPY_MODEL_da93fb1dd2634fd08eb10662bf329e2f",
        "IPY_MODEL_3a1b2b5153a94adbbb386bcf5dc09d7e"
       ],
       "layout": "IPY_MODEL_2a220badb90e4a7885fcb770d3762df7",
       "tabbable": null,
       "tooltip": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
