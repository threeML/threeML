{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "09e990d0",
   "metadata": {},
   "source": [
    "# Analysis Results\n",
    "\n",
    "3ML stores the results of a fit in a container we call an \"Analysis Result\" (AR). The structure of this object is designed to be useable in a *live* sense within an *active* analysis (python script, ipython interactive shell, jupyter notebook) as well as storable as a FITS file for saving results for later.\n",
    "\n",
    "The structure is nearly the same between MLE and Bayesian analyses in order to make a seamless functionality between all analyses.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a9177988",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:39.393118Z",
     "iopub.status.busy": "2025-02-06T21:24:39.392815Z",
     "iopub.status.idle": "2025-02-06T21:24:43.336028Z",
     "shell.execute_reply": "2025-02-06T21:24:43.335257Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")\n",
    "from threeML import *\n",
    "from threeML.analysis_results import *\n",
    "import astropy.units as u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9232abe8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:43.338757Z",
     "iopub.status.busy": "2025-02-06T21:24:43.338142Z",
     "iopub.status.idle": "2025-02-06T21:24:43.393159Z",
     "shell.execute_reply": "2025-02-06T21:24:43.392587Z"
    }
   },
   "outputs": [],
   "source": [
    "silence_logs()\n",
    "from tqdm.auto import tqdm\n",
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "set_threeML_style()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7365bbfd",
   "metadata": {},
   "source": [
    "Let's take a look at what we can do with an AR. First, we will simulate some data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bc0bf9c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:43.395135Z",
     "iopub.status.busy": "2025-02-06T21:24:43.394939Z",
     "iopub.status.idle": "2025-02-06T21:24:45.375351Z",
     "shell.execute_reply": "2025-02-06T21:24:45.374678Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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AJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJAowQcAAJCoiqwHAACpmThtXGxs7YhBg33MApAtn0QAUGATp4/LeggAEBGmdAIAACRL8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACRK8AEAACSqIusB9GT9+vVx2223xaJFi2Lx4sWxbt26uPjii2PatGlbPfaFF16Iq6++OhYuXBgVFRVxyCGHxDnnnBMjRowo/sABAABKSEke4Vu7dm3Mnj07GhoaYvz48dt83OrVq+Pcc8+NP//5z3HGGWfESSedFE888UR87nOfi/b29iKOGAAAoPSU5BG+mpqauOeee6Kmpib+8Ic/xJlnntnj42655ZbYsGFD3HDDDTFq1KiIiNh3333jc5/7XMydOzfq6uqKOWwAAICSUpJH+AYNGhQ1NTWv+bj58+fHoYce2h17EREHH3xwjBkzJh599NH+HCIAAEDJK8ng2xEvvfRSrFmzJiZMmLDVun333TeWLl2awagAAABKR0lO6dwRTU1NERE9HgmsqamJV199NTZu3BiDBg3a6edubGzsfv6/19DQsNPPBwAAkIXcBl9bW1tERFRWVm61bnPktbW19Sr46uvrY/bs2X0aHwAAQNZyG3xVVVURET1ejXPjxo1bPGZn1dXVxaRJk3pc19DQELNmzerV8wIAABRTboNv81TOnqZeNjU1xbBhw3p1dC8iora2Nmpra/s0PgAAgKzl9qItb3jDG2LEiBGxZMmSrdYtXrx4u/fvAwAAKAe5Db6IiCOOOCIef/zxWLVqVfey3/zmN7F8+fI46qijMhwZAABA9kp2Sufdd98dzc3N3VM2H3vssVi9enVERMyYMSOGDh0ap5xySvzyl7+Mz3zmM3H88cdHa2tr3HrrrbHXXnvFtGnTshw+AABA5ko2+G6//fZYuXJl958XLFgQCxYsiIiIqVOnxtChQ2PUqFFx1VVXxdVXXx3XXXddVFRUxCGHHBKf/vSne33+HgAAQCpKNvjuuOOOHXrcuHHj4vLLL+/n0QAAAORPrs/hAwAAYNsEHwAAQKIEHwAAQKJK9hw+AChHE6eNi42tHTFosI9oAPrOpwkAlJCJ08dlPQQAEmJKJwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKJ6HXyf//znY8GCBdHZ2VnI8QAAAFAgFb39i7/61a/iqaeeihEjRsS0adNi+vTpscceexRybAAAAPRBr4/w3XrrrXHyySfHgAED4qc//Wmccsop8ZnPfCYefvjhaG9vL+QYAQAA6IVeH+Hbfffd45Of/GTMnDkzHn/88ZgzZ048+eST8cwzz8Quu+wSH/jAB+KYY46JPffcs4DDBQAAYEf1Ovg2GzhwYEyePDkmT54cjY2Ncf/998fcuXPjrrvuirvuuiv233//OOaYY2LKlClRVVVViDEDAACwAwp6lc7a2tr4yEc+EmeeeWbU1NREV1dX/P73v4/LLrssjj/++Lj11ltj06ZNhfyRAAAAbEOfj/Bttnz58vj5z38eDz74YLzyyitRWVkZU6dOjaOPPjr++Mc/xj333BPXXXddrFmzJs4+++xC/VgAAAC2oU/B19bWFr/85S/j5z//eSxcuDC6urrizW9+c3zkIx+JadOmxS677BIREQcddFDMmDEjPve5z8WDDz4o+AAAAIqg18F3xRVXxC9+8YtoaWmJioqKmDJlStTV1cWBBx7Y4+MHDRoU73rXu+L3v/99b38kAAAAO6HXwfezn/0sdt999zjllFNi2rRpMWLEiNf8O+94xzvitNNO6+2PBAAAYCf0Ovi++93vxkEHHbRTf2fixIkxceLE3v7IrSxfvjxuvPHGWLhwYbz66qsxatSoeN/73hcnnXRSvP71ry/YzwEAAMijXgffzsZeoa1atSo++clPxtChQ+Of/umfYtiwYfHss8/GTTfdFEuWLIlLL7000/EBAABkrWBX6Sy2efPmRXNzc1xzzTUxbty4iIioq6uLTZs2xYMPPhjr1q3rvmgMAABAOSroffiKqaWlJSIidt111y2W19TUxIABA6KiIrctCwAAUBC5Db53vOMdERFx2WWXxdKlS2PVqlXx8MMPx7333hszZsyIwYMHZzxCAACAbOX2MNi73/3u+Od//ue45ZZb4rHHHute/rGPfSzOOOOMPj13Y2NjNDU19biuoaGhT88NAABQLLkNvoiI0aNHx9vf/vY44ogjYtiwYfHEE0/ELbfcEiNHjowZM2b0+nnr6+tj9uzZhRsoAABABnIbfA8//HB8+9vfjp/85Cex2267RUTEEUccEV1dXXHdddfF+973vhg+fHivnruuri4mTZrU47qGhoaYNWtWr8cNAABQLLkNvnvuuSf22Wef7tjbbNKkSTF37txYunRpHHzwwb167tra2qitrS3EMAEAADKT24u2rFmzJjZt2rTV8o6OjoiI6OzsLPaQAAAASkpug2/MmDGxdOnSWL58+RbLH3744RgwYEDsvffeGY0MAACgNOR2SudJJ50UTz75ZJxzzjlx3HHHxbBhw+Lxxx+PJ598Mo455hhTMgEAgLKX2+A78MAD45prrombb7457rnnnnj11Vdj9OjRccYZZ8TJJ5+c9fAAAAAyl9vgi4jYb7/94tvf/nbWwwAAAChJuT2HDwAAgO0TfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAAAIkSfAAA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wrfffvvFUUcdFddff3288sor8aY3vSkeeOCBWLlyZXzhC1/ot587YsSImDp1ar89f2+NHTt2u2UPO8q2RKHYligE2xGFYluiEPK4HeU2+CIivvjFL8aoUaPiwQcfjObm5thrr73isssuiwMPPDDroQEAAGQu18FXVVUVZ599dpx99tlZDwUAAKDkDMh6AAAAAPQPwQcAAJAowQcAAJAowZdzNTU18fGPfzxqamqyHgo5Z1uiUGxLFILtiEKxLVEIed6OcnsfPgAAALbPET4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBECT4AAIBEVWQ9AHpn48aNceONN8a8efNi3bp1sffee8fMmTPjne98Z9ZDo0StX78+brvttli0aFEsXrw41q1bFxdffHFMmzZtq8e+8MILcfXVV8fChQujoqIiDjnkkDjnnHNixIgRxR84JWXx4sXxwAMPxNNPPx0rV66MYcOGxf777x8zZ86MMWPGbPFY2xHbs2zZsrj55ptjyZIl8fLLL8frX//6GDt2bJx88skxadKkLR5rW2Jn/OhHP4obbrghxo0bFz/84Q+3WLdw4cK49tpr449//GNUV1fHUUcdFWeccUYMGTIko9FSKp5++uk4//zze1z3gx/8IPbff//uP+dtOxJ8OXXppZfGL3/5y/jwhz8ce+yxR8ydOzcuvPDCuPLKK+Ntb3tb1sOjBK1duzZmz54do0aNivHjx8fTTz/d4+NWr14d5557bgwdOjTOOOOMaG1tjdtuuy2ef/75uO6666KysrLII6eU/PSnP42FCxfGUUcdFXvvvXc0NTXFPffcEzNnzowf/OAHsddee0WE7YjXtnLlyli/fn0cffTRUVtbGxs2bIj58+fHxRdfHBdccEHU1dVFhG2JnbN69eq45ZZbYvDgwVutW7p0aXz2s5+NsWPHxjnnnBOrV6+O22+/Pf70pz/Ft7/97QxGSymaMWNG7Lvvvlsse9Ob3tT9/3O5HXWRO88++2zX5MmTu3760592L9uwYUPXSSed1PWpT30qw5FRytra2roaGxu7urq6uhYvXtw1efLkrvvvv3+rx11++eVd73vf+7pWrlzZveypp57qmjx5cte9995btPFSmn73u991bdy4cYtlL774Ytd73/verksuuaR7me2I3ujo6Og6/fTTuz760Y92L7MtsTO+8pWvdJ1//vld5557btepp566xboLLrig60Mf+lBXc3Nz97L77ruva/LkyV1PPvlksYdKifmf//mfrsmTJ3c9+uij231cHrcj5/Dl0Pz582PgwIHdez8jIqqqqmL69Onx7LPPxqpVqzIcHaVq0KBBUVNT85qPmz9/fhx66KExatSo7mUHH3xwjBkzJh599NH+HCI5MHHixK2OqIwZMyb23HPPaGho6F5mO6I3Bg4cGLvttls0Nzd3L7MtsaOeeeaZmD9/fpx77rlbrWtpaYlf//rXMXXq1Kiuru5e/oEPfCAGDx5sW2IL69evj46Ojq2W53U7MqUzh5YuXRp77LHHFhtaRHQffn7uuee2+GCEHfXSSy/FmjVrYsKECVut23fffeO///u/MxgVpa6rqyvWrFkTe+65Z0TYjtg5ra2t0dbWFi0tLfHYY4/Fk08+GUcddVRE2JbYcZ2dnXHllVfG9OnTY++9995q/fPPPx+dnZ1bbUuVlZWxzz77xNKlS4s1VErcpZdeGq2trTFw4MB429veFmeddVa89a1vjYj8bkeCL4eampp6PFKzeVljY2Oxh0QimpqaIiK2uX29+uqrsXHjxhg0aFCxh0YJe+ihh+Kll16KT3ziExFhO2LnXHPNNVFfXx8REQMGDIjDDz88PvvZz0aEbYkdd++998aqVaviiiuu6HH9a21Lv/3tb/t1fJS+ioqKOOKII+I973lPDB8+PF544YW4/fbb45xzzonvf//78Za3vCW325Hgy6G2trYeT1Lf/IHX1tZW7CGRiM3bzmttX75csVlDQ0NcccUVsf/++8fRRx8dEbYjds6HP/zhOPLII6OxsTEeffTR6OzsjPb29oiwLbFj1q5dGzfddFOceuqp27xy62ttSxs3buzPIZIDEydOjIkTJ3b/+bDDDosjjzwyTj/99Lj++uvjO9/5Tm63I+fw5VBVVVX3h+Hf2ryRVVVVFXtIJGLztmP7Ykc0NTXFF77whaiuro6vf/3rMXDgwIiwHbFzxo4dGwcffHAcffTRcdlll0Vra2tcdNFF0dXVZVtih9xwww2xyy67xIwZM7b5mNfaluw0oCd77LFHHHbYYfH0009HZ2dnbrcjwZdDNTU13YeU/9bmZbW1tcUeEonYPEVhW9vXsGHDSvbNjOJqbm6OCy+8MJqbm+M73/nOFu87tiP64sgjj4w//OEPsXz5ctsSr2n58uVx3333xfHHHx+NjY2xYsWKWLFiRWzcuDE6OjpixYoV8eqrr77mtuS7E9uy2267RXt7e2zYsCG325Hgy6Hx48fHn/70p2hpadli+aJFi7rXQ2+84Q1viBEjRsSSJUu2Wrd48WLbFhHx16lRF110USxfvjy+9a1vdV+sZTPbEX2xecpUc3OzbYnX1NjYGJs2bYorr7wyTjzxxO7/LVq0KJYvXx4nnnhizJ49O8aNGxcDBw7caltqb2+PpUuX2pbYpr/85S8xaNCgGDx4cG63I8GXQ0ceeWR0dnZ2n+Qe8dfDyPfff3/st99+rtBJnxxxxBHx+OOPb3F7j9/85jexfPny7ivnUb46Ozvjq1/9ajz77LPxta99LQ444IAeH2c74rWsWbNmq2UdHR3x4IMPRlVVVfeOBNsS2zNu3Lj4xje+sdX/xo0bF6NGjYpvfOMbMX369Bg6dGgcfPDBMW/evFi/fn3333/wwQejtbXVtkS88sorWy177rnn4rHHHot3vvOdMWDAgNxuR6/r6urqynoQ7LyvfOUrsWDBgjjhhBPiTW96UzzwwAOxePHiuOKKK+LAAw/MeniUqLvvvjuam5ujqakpfvazn8Xhhx8e++yzT0REzJgxI4YOHRqrVq2KmTNnxtChQ+P444+P1tbWuPXWW+MNb3hDXH/99aZPlbmrrroq7rrrrjj00ENjypQpW62fOnVqRITtiNf0r//6r9HS0hJvf/vb4w1veEM0NTXFQw89FC+++GJ8+tOfjhNPPDEibEv0znnnnRdr166NH/7wh93LlixZEp/+9Kdj7NixUVdXF6tXr47bb7893v72t8fll1+e4WgpBeeff35UVVXFAQccELvuumu88MILcd9990VFRUV8//vf794JlcftSPDlVFtbW9x4440xb968aG5ujr322itmzpwZ73rXu7IeGiXshBNOiJUrV/a47vbbb4/Ro0dHRMSyZcvi6quvjoULF0ZFRUUccsgh8elPfzpGjhxZzOFSgs4777x45plntrl+wYIF3f/fdsT2PPzwwzFnzpx4/vnnY+3atTFkyJCYMGFCHHfccXHYYYdt8VjbEjurp+CLiPjd734X1157bfzxj3+MIUOGxFFHHRWf/OQnY8iQIRmNlFJx1113xUMPPRR//vOfo6WlJUaMGBEHHXRQfPzjH4899thji8fmbTsSfAAAAIlyDh8AAECiBB8AAECiBB8AAECiBB8AAECiBB8AAECiBB8AAECiBB8AAECiBB8AAECiBB8AAECiBB8AAECiBB8AAECiBB8AAECiBB8A9LOurq74/Oc/H4cffng8/PDDO7wOAPpK8AFAP3vd614XF198cey6665x+eWXx8qVK7vX3XnnnfHkk0/GtGnT4r3vfW+GowQgRYIPAIpg5MiR8cUvfjFaWlrikksuic7Ozli6dGlcd911sccee8T555+f9RABSNDrurq6urIeBACUi+9973tx5513xkknnRSPP/54/OUvf4kf/OAHMWHChKyHBkCCBB8AFNHGjRvjrLPOiqVLl0ZExKc+9an4yEc+kvGoAEiVKZ0AUESDBg2Kd7/73d3//5hjjsl4RACkTPABQBEtWrQobr311hg+fHhs3LgxLr/88qyHBEDCBB8AFMn69evjkksuiYEDB8aVV14ZRxxxRDz66KMxZ86crIcGQKIEHwAUyXe/+934y1/+EmeffXbstddeceGFF8Zuu+0WV111VSxfvjzr4QGQIMEHAEUwb968mDdvXhx66KFx3HHHRUTELrvsEl/60peira0tLrnkkujo6Mh4lACkRvABQD/7y1/+EldccUXU1NTERRddtMW6Aw88MD760Y/GkiVL4vrrr89ohACkym0ZAAAAEuUIHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKIEHwAAQKL+H9E0mCo9968zAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=2, b=0) + Gaussian(F=30.0, mu=25.0, sigma=1)\n",
    "\n",
    "# Generate a dataset using the line and a gaussian.\n",
    "# constant 20% error\n",
    "\n",
    "x = np.linspace(0, 50, 50)\n",
    "\n",
    "xy = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.2 * gen_function(x)\n",
    ")\n",
    "\n",
    "fig = xy.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "020b4d2a",
   "metadata": {},
   "source": [
    "## MLE Results\n",
    "\n",
    "\n",
    "First we will demonstrate how AR's work for an MLE analysis on our synthetic data. As we will see, most of the functionality exists in the Bayesian AR's as well.\n",
    "\n",
    "Let's do a simple likelihood maximization of our data and model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "261e3fdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:45.377544Z",
     "iopub.status.busy": "2025-02-06T21:24:45.377334Z",
     "iopub.status.idle": "2025-02-06T21:24:46.218857Z",
     "shell.execute_reply": "2025-02-06T21:24:46.218297Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.83 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(5 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.8 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.498 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.4 +/- 1.2) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.83 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (5 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.8 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.498 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (9.4 +/- 1.2) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139944171266256\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>0.00</td><td>-0.09</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>0.00</td><td>-0.02</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>0.00</td><td>1.00</td><td>0.01</td><td>-0.10</td></tr>\n",
       "<tr><td>0.00</td><td>-0.02</td><td>0.01</td><td>1.00</td><td>0.13</td></tr>\n",
       "<tr><td>-0.09</td><td>-0.00</td><td>-0.10</td><td>0.13</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04  0.00 -0.09\n",
       "-0.85  1.00  0.00 -0.02 -0.00\n",
       "-0.04  0.00  1.00  0.01 -0.10\n",
       " 0.00 -0.02  0.01  1.00  0.13\n",
       "-0.09 -0.00 -0.10  0.13  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>22.850182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.850182</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         22.850182\n",
       "total            22.850182"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>57.064001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>65.260479</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             57.064001\n",
       "BIC             65.260479"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fitfun = Line() + Gaussian()\n",
    "\n",
    "fitfun.b_1.bounds = (-10, 10.0)\n",
    "fitfun.a_1.bounds = (-100, 100.0)\n",
    "fitfun.F_2 = 25.0\n",
    "fitfun.F_2.bounds = (1e-3, 200.0)\n",
    "fitfun.mu_2 = 25.0\n",
    "fitfun.mu_2.bounds = (0.0, 100.0)\n",
    "fitfun.sigma_2.bounds = (1e-3, 10.0)\n",
    "\n",
    "model = Model(PointSource(\"fake\", 0.0, 0.0, fitfun))\n",
    "\n",
    "data = DataList(xy)\n",
    "\n",
    "jl = JointLikelihood(model, DataList(xy))\n",
    "_ = jl.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7aff7105",
   "metadata": {},
   "source": [
    "We can get our errors as always, but the results cannot be propagated (error propagation assumes Gaussian errors, i.e., symmetric errors)\n",
    "In this case though errors are pretty symmetric, so we are likely in the case\n",
    "where the MLE is actually normally distributed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "beec27e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:46.220992Z",
     "iopub.status.busy": "2025-02-06T21:24:46.220578Z",
     "iopub.status.idle": "2025-02-06T21:24:46.280297Z",
     "shell.execute_reply": "2025-02-06T21:24:46.279751Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.83 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(5 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.8 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.498 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.4 -1.2 +1.3) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       result  \\\n",
       "parameter                                                       \n",
       "fake.spectrum.main.composite.a_1                1.83 +/- 0.11   \n",
       "fake.spectrum.main.composite.b_1            (5 +/- 4) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2           (2.8 +/- 0.4) x 10   \n",
       "fake.spectrum.main.composite.mu_2      (2.498 +/- 0.013) x 10   \n",
       "fake.spectrum.main.composite.sigma_2  (9.4 -1.2 +1.3) x 10^-1   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.828787</td>\n",
       "      <td>-0.113679</td>\n",
       "      <td>0.113257</td>\n",
       "      <td>0.113468</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.004730</td>\n",
       "      <td>-0.003840</td>\n",
       "      <td>0.003848</td>\n",
       "      <td>0.003844</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>28.300406</td>\n",
       "      <td>-4.010681</td>\n",
       "      <td>4.010163</td>\n",
       "      <td>4.010422</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.984325</td>\n",
       "      <td>-0.126610</td>\n",
       "      <td>0.126626</td>\n",
       "      <td>0.126618</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.939472</td>\n",
       "      <td>-0.118509</td>\n",
       "      <td>0.131205</td>\n",
       "      <td>0.124857</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       1.828787       -0.113679   \n",
       "fake.spectrum.main.composite.b_1       0.004730       -0.003840   \n",
       "fake.spectrum.main.composite.F_2      28.300406       -4.010681   \n",
       "fake.spectrum.main.composite.mu_2     24.984325       -0.126610   \n",
       "fake.spectrum.main.composite.sigma_2   0.939472       -0.118509   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.113257  0.113468   \n",
       "fake.spectrum.main.composite.b_1            0.003848  0.003844   \n",
       "fake.spectrum.main.composite.F_2            4.010163  4.010422   \n",
       "fake.spectrum.main.composite.mu_2           0.126626  0.126618   \n",
       "fake.spectrum.main.composite.sigma_2        0.131205  0.124857   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jl.get_errors()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7dda71a",
   "metadata": {},
   "source": [
    "We need to get the AnalysisResults object that is created after a fit is performed. The AR object is a member of the JointLikelihood object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "443a8f88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:46.282162Z",
     "iopub.status.busy": "2025-02-06T21:24:46.281961Z",
     "iopub.status.idle": "2025-02-06T21:24:46.284726Z",
     "shell.execute_reply": "2025-02-06T21:24:46.284218Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = jl.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b21f6c46",
   "metadata": {},
   "source": [
    "We can display the results of the analysis. Note, when a fit is performed, the post display is actaully from the internal AR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0327a58b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:46.286720Z",
     "iopub.status.busy": "2025-02-06T21:24:46.286347Z",
     "iopub.status.idle": "2025-02-06T21:24:46.317030Z",
     "shell.execute_reply": "2025-02-06T21:24:46.316370Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.83 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(5 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.8 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.498 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.4 +/- 1.2) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.83 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (5 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.8 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.498 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (9.4 +/- 1.2) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139945400706768\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>0.00</td><td>-0.09</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>0.00</td><td>-0.02</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>0.00</td><td>1.00</td><td>0.01</td><td>-0.10</td></tr>\n",
       "<tr><td>0.00</td><td>-0.02</td><td>0.01</td><td>1.00</td><td>0.13</td></tr>\n",
       "<tr><td>-0.09</td><td>-0.00</td><td>-0.10</td><td>0.13</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04  0.00 -0.09\n",
       "-0.85  1.00  0.00 -0.02 -0.00\n",
       "-0.04  0.00  1.00  0.01 -0.10\n",
       " 0.00 -0.02  0.01  1.00  0.13\n",
       "-0.09 -0.00 -0.10  0.13  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>22.850182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.850182</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         22.850182\n",
       "total            22.850182"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>57.064001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>65.260479</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             57.064001\n",
       "BIC             65.260479"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6860ee2",
   "metadata": {},
   "source": [
    "By default, the equal tail intervals are displayed. We can instead display highest posterior densities (equal in the MLE case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "69e14935",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:46.319140Z",
     "iopub.status.busy": "2025-02-06T21:24:46.318751Z",
     "iopub.status.idle": "2025-02-06T21:24:46.348936Z",
     "shell.execute_reply": "2025-02-06T21:24:46.348401Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.83 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(5 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.8 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.498 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.4 +/- 1.2) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.83 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (5 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.8 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.498 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (9.4 +/- 1.2) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139945400761888\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>0.00</td><td>-0.09</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>0.00</td><td>-0.02</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>0.00</td><td>1.00</td><td>0.01</td><td>-0.10</td></tr>\n",
       "<tr><td>0.00</td><td>-0.02</td><td>0.01</td><td>1.00</td><td>0.13</td></tr>\n",
       "<tr><td>-0.09</td><td>-0.00</td><td>-0.10</td><td>0.13</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04  0.00 -0.09\n",
       "-0.85  1.00  0.00 -0.02 -0.00\n",
       "-0.04  0.00  1.00  0.01 -0.10\n",
       " 0.00 -0.02  0.01  1.00  0.13\n",
       "-0.09 -0.00 -0.10  0.13  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>22.850182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.850182</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         22.850182\n",
       "total            22.850182"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>57.064001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>65.260479</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             57.064001\n",
       "BIC             65.260479"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "758dc6cc",
   "metadata": {},
   "source": [
    "The AR stores several properties from the analysis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9cbb1025",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:46.350892Z",
     "iopub.status.busy": "2025-02-06T21:24:46.350509Z",
     "iopub.status.idle": "2025-02-06T21:24:46.354418Z",
     "shell.execute_reply": "2025-02-06T21:24:46.353907Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'MLE'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.analysis_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6726fe7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:46.356366Z",
     "iopub.status.busy": "2025-02-06T21:24:46.355989Z",
     "iopub.status.idle": "2025-02-06T21:24:46.360162Z",
     "shell.execute_reply": "2025-02-06T21:24:46.359646Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.28746233e-02, -3.69321204e-04, -1.73338055e-02,\n",
       "         4.23643660e-05, -1.24992299e-03],\n",
       "       [-3.69321204e-04,  1.47745831e-05,  1.69000627e-06,\n",
       "        -7.82459296e-06, -6.60149889e-07],\n",
       "       [-1.73338055e-02,  1.69000627e-06,  1.60827685e+01,\n",
       "         3.31026944e-03, -4.93090579e-02],\n",
       "       [ 4.23643660e-05, -7.82459296e-06,  3.31026944e-03,\n",
       "         1.57414866e-02,  1.98986176e-03],\n",
       "       [-1.24992299e-03, -6.60149889e-07, -4.93090579e-02,\n",
       "         1.98986176e-03,  1.55050159e-02]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.covariance_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c3abfa3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:46.361816Z",
     "iopub.status.busy": "2025-02-06T21:24:46.361633Z",
     "iopub.status.idle": "2025-02-06T21:24:51.127531Z",
     "shell.execute_reply": "2025-02-06T21:24:51.126862Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8c9fdaabae36410bb18ac7b8f81d2c85",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "processing MLE analyses:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flux</th>\n",
       "      <th>low bound</th>\n",
       "      <th>hi bound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake: total</th>\n",
       "      <td>1.8349585255912096e-05 erg / (s cm2)</td>\n",
       "      <td>1.6977267476857178e-05 erg / (s cm2)</td>\n",
       "      <td>1.9752427441516853e-05 erg / (s cm2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             flux  \\\n",
       "fake: total  1.8349585255912096e-05 erg / (s cm2)   \n",
       "\n",
       "                                        low bound  \\\n",
       "fake: total  1.6977267476857178e-05 erg / (s cm2)   \n",
       "\n",
       "                                         hi bound  \n",
       "fake: total  1.9752427441516853e-05 erg / (s cm2)  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.get_point_source_flux(1 * u.keV, 0.1 * u.MeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0d7895e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.130282Z",
     "iopub.status.busy": "2025-02-06T21:24:51.129667Z",
     "iopub.status.idle": "2025-02-06T21:24:51.148907Z",
     "shell.execute_reply": "2025-02-06T21:24:51.148357Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (5):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.828787</td>\n",
       "      <td>-100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.00473</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>s-1 cm-2 keV-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>28.300406</td>\n",
       "      <td>0.001</td>\n",
       "      <td>200.0</td>\n",
       "      <td>s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.984325</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.939472</td>\n",
       "      <td>0.001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (2):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (0):<br><br>(none)<br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     1\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (5):\n",
       "--------------------\n",
       "\n",
       "                                          value min_value max_value  \\\n",
       "fake.spectrum.main.composite.a_1       1.828787    -100.0     100.0   \n",
       "fake.spectrum.main.composite.b_1        0.00473     -10.0      10.0   \n",
       "fake.spectrum.main.composite.F_2      28.300406     0.001     200.0   \n",
       "fake.spectrum.main.composite.mu_2     24.984325       0.0     100.0   \n",
       "fake.spectrum.main.composite.sigma_2   0.939472     0.001      10.0   \n",
       "\n",
       "                                                unit  \n",
       "fake.spectrum.main.composite.a_1      keV-1 s-1 cm-2  \n",
       "fake.spectrum.main.composite.b_1      s-1 cm-2 keV-2  \n",
       "fake.spectrum.main.composite.F_2            s-1 cm-2  \n",
       "fake.spectrum.main.composite.mu_2                keV  \n",
       "fake.spectrum.main.composite.sigma_2             keV  \n",
       "\n",
       "Fixed parameters (2):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (0):\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.optimized_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f730bec",
   "metadata": {},
   "source": [
    "## Saving results to disk\n",
    "\n",
    "The beauty of the analysis result is that all of this information can be written to disk and restored at a later time. The statistical parameters, best-fit model, etc. can all be recovered.\n",
    "\n",
    "AR's are stored as a structured FITS file. We write the AR like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f1dc5180",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.151223Z",
     "iopub.status.busy": "2025-02-06T21:24:51.150746Z",
     "iopub.status.idle": "2025-02-06T21:24:51.195517Z",
     "shell.execute_reply": "2025-02-06T21:24:51.194779Z"
    }
   },
   "outputs": [],
   "source": [
    "ar.write_to(\"test_mle.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8a23c0d",
   "metadata": {},
   "source": [
    "The FITS file can be examines with any normal FITS reader."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a95dcaed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.197989Z",
     "iopub.status.busy": "2025-02-06T21:24:51.197760Z",
     "iopub.status.idle": "2025-02-06T21:24:51.201015Z",
     "shell.execute_reply": "2025-02-06T21:24:51.200371Z"
    }
   },
   "outputs": [],
   "source": [
    "import astropy.io.fits as fits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d617f225",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.202934Z",
     "iopub.status.busy": "2025-02-06T21:24:51.202724Z",
     "iopub.status.idle": "2025-02-06T21:24:51.208339Z",
     "shell.execute_reply": "2025-02-06T21:24:51.207812Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: test_mle.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       6   ()      \n",
      "  1  ANALYSIS_RESULTS    1 BinTableHDU     38   5R x 9C   [36A, D, D, D, D, 16A, 5D, D, D]   \n"
     ]
    }
   ],
   "source": [
    "ar_fits = fits.open(\"test_mle.fits\")\n",
    "ar_fits.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "065b9108",
   "metadata": {},
   "source": [
    "However, to easily pull the results back into the 3ML framework, we use the ${\\tt load\\_analysis\\_results}$ function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c00ebd0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.210275Z",
     "iopub.status.busy": "2025-02-06T21:24:51.210084Z",
     "iopub.status.idle": "2025-02-06T21:24:51.273111Z",
     "shell.execute_reply": "2025-02-06T21:24:51.272518Z"
    }
   },
   "outputs": [],
   "source": [
    "ar_reloaded = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b54367ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.275532Z",
     "iopub.status.busy": "2025-02-06T21:24:51.275134Z",
     "iopub.status.idle": "2025-02-06T21:24:51.281900Z",
     "shell.execute_reply": "2025-02-06T21:24:51.281241Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>22.850182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.850182</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         22.850182\n",
       "total            22.850182"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_statistic_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d191364",
   "metadata": {},
   "source": [
    "You can get a DataFrame with the saved results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "995d409f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.283939Z",
     "iopub.status.busy": "2025-02-06T21:24:51.283559Z",
     "iopub.status.idle": "2025-02-06T21:24:51.301056Z",
     "shell.execute_reply": "2025-02-06T21:24:51.300227Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.828787</td>\n",
       "      <td>-0.111646</td>\n",
       "      <td>0.114910</td>\n",
       "      <td>0.113278</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.004730</td>\n",
       "      <td>-0.003890</td>\n",
       "      <td>0.003772</td>\n",
       "      <td>0.003831</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>28.300406</td>\n",
       "      <td>-3.936790</td>\n",
       "      <td>3.971710</td>\n",
       "      <td>3.954250</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.984325</td>\n",
       "      <td>-0.120819</td>\n",
       "      <td>0.129137</td>\n",
       "      <td>0.124978</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.939472</td>\n",
       "      <td>-0.126708</td>\n",
       "      <td>0.123221</td>\n",
       "      <td>0.124965</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       1.828787       -0.111646   \n",
       "fake.spectrum.main.composite.b_1       0.004730       -0.003890   \n",
       "fake.spectrum.main.composite.F_2      28.300406       -3.936790   \n",
       "fake.spectrum.main.composite.mu_2     24.984325       -0.120819   \n",
       "fake.spectrum.main.composite.sigma_2   0.939472       -0.126708   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.114910  0.113278   \n",
       "fake.spectrum.main.composite.b_1            0.003772  0.003831   \n",
       "fake.spectrum.main.composite.F_2            3.971710  3.954250   \n",
       "fake.spectrum.main.composite.mu_2           0.129137  0.124978   \n",
       "fake.spectrum.main.composite.sigma_2        0.123221  0.124965   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_data_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dd20639",
   "metadata": {},
   "source": [
    "## Analysis Result Sets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec3319d2",
   "metadata": {},
   "source": [
    "When doing time-resolved analysis or analysing a several objects, we can save several AR's is a set. This is achieved with the analysis result set. We can pass an array of AR's to the set and even set up descriptions for the different entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9921f1d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.303194Z",
     "iopub.status.busy": "2025-02-06T21:24:51.302811Z",
     "iopub.status.idle": "2025-02-06T21:24:51.370367Z",
     "shell.execute_reply": "2025-02-06T21:24:51.369670Z"
    }
   },
   "outputs": [],
   "source": [
    "from threeML.analysis_results import AnalysisResultsSet\n",
    "\n",
    "analysis_set = AnalysisResultsSet([ar, ar_reloaded])\n",
    "\n",
    "# index as time bins\n",
    "analysis_set.set_bins(\"testing\", [-1, 1], [3, 5], unit=\"s\")\n",
    "\n",
    "# write to disk\n",
    "analysis_set.write_to(\"analysis_set_test.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f2cefc9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.372708Z",
     "iopub.status.busy": "2025-02-06T21:24:51.372326Z",
     "iopub.status.idle": "2025-02-06T21:24:51.495135Z",
     "shell.execute_reply": "2025-02-06T21:24:51.494553Z"
    }
   },
   "outputs": [],
   "source": [
    "analysis_set = load_analysis_results(\"analysis_set_test.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0f34ab0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.497578Z",
     "iopub.status.busy": "2025-02-06T21:24:51.497191Z",
     "iopub.status.idle": "2025-02-06T21:24:51.528651Z",
     "shell.execute_reply": "2025-02-06T21:24:51.528013Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.83 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(5 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.8 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.498 +/- 0.013) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.4 +/- 1.2) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               1.83 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1           (5 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.8 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.498 +/- 0.013) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2   (9.4 +/- 1.2) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139944174549648\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>0.00</td><td>-0.09</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>0.00</td><td>-0.02</td><td>-0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>0.00</td><td>1.00</td><td>0.01</td><td>-0.10</td></tr>\n",
       "<tr><td>0.00</td><td>-0.02</td><td>0.01</td><td>1.00</td><td>0.13</td></tr>\n",
       "<tr><td>-0.09</td><td>-0.00</td><td>-0.10</td><td>0.13</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04  0.00 -0.09\n",
       "-0.85  1.00  0.00 -0.02 -0.00\n",
       "-0.04  0.00  1.00  0.01 -0.10\n",
       " 0.00 -0.02  0.01  1.00  0.13\n",
       "-0.09 -0.00 -0.10  0.13  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>22.850182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>22.850182</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         22.850182\n",
       "total            22.850182"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>57.064001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>65.260479</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             57.064001\n",
       "BIC             65.260479"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis_set[0].display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5e6562c",
   "metadata": {},
   "source": [
    "## Error propagation\n",
    "In 3ML, we propagate errors for MLE reults via sampling of the covariance matrix *instead* of Taylor exanding around the maximum of the likelihood and computing a jacobain. Thus, we can achieve non-linear error propagation.\n",
    "\n",
    "You can use the results for propagating errors non-linearly for analytical functions:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8496fce8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.530647Z",
     "iopub.status.busy": "2025-02-06T21:24:51.530454Z",
     "iopub.status.idle": "2025-02-06T21:24:51.537963Z",
     "shell.execute_reply": "2025-02-06T21:24:51.537325Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Propagating a+b, with a and b respectively:\n",
      "equal-tail: (5 +/- 4) x 10^-3, hpd: (5 +/- 4) x 10^-3\n",
      "equal-tail: 1.83 +/- 0.11, hpd: 1.83 +/- 0.11\n",
      "\n",
      "This is the result (with errors):\n",
      "equal-tail: 1.83 +/- 0.11, hpd: 1.83 -0.10 +0.11\n",
      "(1.723750109365203, 1.9423958735368796)\n"
     ]
    }
   ],
   "source": [
    "p1 = ar.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(\"Propagating a+b, with a and b respectively:\")\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "print(\"\\nThis is the result (with errors):\")\n",
    "res = p1 + p2\n",
    "print(res)\n",
    "\n",
    "print(res.equal_tail_interval())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce87ff79",
   "metadata": {},
   "source": [
    "The propagation accounts for covariances. For example this\n",
    "has error of zero (of course) since there is perfect covariance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "754763ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.539929Z",
     "iopub.status.busy": "2025-02-06T21:24:51.539715Z",
     "iopub.status.idle": "2025-02-06T21:24:51.544169Z",
     "shell.execute_reply": "2025-02-06T21:24:51.543552Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is 50 * a/a:\n",
      "equal-tail: (5.0 +/- 0) x 10, hpd: (5.0 +/- 0) x 10\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is 50 * a/a:\")\n",
    "print(50 * p1 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94c506ea",
   "metadata": {},
   "source": [
    "You can use arbitrary (np) functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9799a798",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.546076Z",
     "iopub.status.busy": "2025-02-06T21:24:51.545872Z",
     "iopub.status.idle": "2025-02-06T21:24:51.551389Z",
     "shell.execute_reply": "2025-02-06T21:24:51.550783Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is arcsinh(b + 5*) / np.log10(b) (why not?)\n",
      "equal-tail: (1.11 -0.08 +0.10) x 10, hpd: (1.11 -0.09 +0.08) x 10\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is arcsinh(b + 5*) / np.log10(b) (why not?)\")\n",
    "print(np.arcsinh(p1 + 5 * p2) / np.log10(p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98110929",
   "metadata": {},
   "source": [
    "Errors can become asymmetric. For example, the ratio of two gaussians is\n",
    "asymmetric notoriously:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "402c587b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.553364Z",
     "iopub.status.busy": "2025-02-06T21:24:51.553175Z",
     "iopub.status.idle": "2025-02-06T21:24:51.557514Z",
     "shell.execute_reply": "2025-02-06T21:24:51.556893Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Ratio a/b:\n",
      "equal-tail: (3.1 -1.6 +5) x 10^2, hpd: (3.1 -2.0 +3.5) x 10^2\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nRatio a/b:\")\n",
    "print(p2 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15a6707f",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "You can always use it with arbitrary functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "54ef296c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.559322Z",
     "iopub.status.busy": "2025-02-06T21:24:51.559129Z",
     "iopub.status.idle": "2025-02-06T21:24:51.564159Z",
     "shell.execute_reply": "2025-02-06T21:24:51.563602Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Propagating using a custom function:\n",
      "equal-tail: 1.83 +/- 0.11, hpd: 1.83 -0.10 +0.11\n"
     ]
    }
   ],
   "source": [
    "def my_function(x, a, b):\n",
    "    return b * x**a\n",
    "\n",
    "\n",
    "print(\"\\nPropagating using a custom function:\")\n",
    "print(my_function(2.3, p1, p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a379021",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "This is an example of an error propagation to get the plot of the model with its errors\n",
    "(which are propagated without assuming linearity on parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "78ad553b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.565936Z",
     "iopub.status.busy": "2025-02-06T21:24:51.565719Z",
     "iopub.status.idle": "2025-02-06T21:24:51.573059Z",
     "shell.execute_reply": "2025-02-06T21:24:51.572500Z"
    }
   },
   "outputs": [],
   "source": [
    "def go(fitfun, ar, model):\n",
    "    fig, ax = plt.subplots()\n",
    "\n",
    "    # Gather the parameter variates\n",
    "\n",
    "    arguments = {}\n",
    "\n",
    "    for par in fitfun.parameters.values():\n",
    "        if par.free:\n",
    "            this_name = par.name\n",
    "\n",
    "            this_variate = ar.get_variates(par.path)\n",
    "\n",
    "            # Do not use more than 1000 values (would make computation too slow for nothing)\n",
    "\n",
    "            if len(this_variate) > 1000:\n",
    "                this_variate = np.random.choice(this_variate, size=1000)\n",
    "\n",
    "            arguments[this_name] = this_variate\n",
    "\n",
    "    # Prepare the error propagator function\n",
    "\n",
    "    pp = ar.propagate(\n",
    "        ar.optimized_model.fake.spectrum.main.shape.evaluate_at, **arguments\n",
    "    )\n",
    "\n",
    "    # You can just use it as:\n",
    "\n",
    "    print(pp(5.0))\n",
    "\n",
    "    # Make the plot\n",
    "\n",
    "    energies = np.linspace(0, 50, 100)\n",
    "\n",
    "    low_curve = np.zeros_like(energies)\n",
    "    middle_curve = np.zeros_like(energies)\n",
    "    hi_curve = np.zeros_like(energies)\n",
    "\n",
    "    free_parameters = model.free_parameters\n",
    "\n",
    "    p = tqdm(total=len(energies), desc=\"Propagating errors\")\n",
    "\n",
    "    with use_astromodels_memoization(False):\n",
    "        for i, e in enumerate(energies):\n",
    "            this_flux = pp(e)\n",
    "\n",
    "            low_bound, hi_bound = this_flux.equal_tail_interval()\n",
    "\n",
    "            low_curve[i], middle_curve[i], hi_curve[i] = (\n",
    "                low_bound,\n",
    "                this_flux.median,\n",
    "                hi_bound,\n",
    "            )\n",
    "\n",
    "            p.update(1)\n",
    "\n",
    "    ax.plot(energies, middle_curve, \"--\", color=\"black\")\n",
    "    ax.fill_between(energies, low_curve, hi_curve, alpha=0.5, color=\"blue\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8ea33005",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:51.574716Z",
     "iopub.status.busy": "2025-02-06T21:24:51.574525Z",
     "iopub.status.idle": "2025-02-06T21:24:55.514197Z",
     "shell.execute_reply": "2025-02-06T21:24:55.513567Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 1.85 -0.12 +0.11, hpd: 1.85 +/- 0.11\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0e5fdeaa784c4bb7b0a294d707b9af4b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar, model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7706dbbb",
   "metadata": {},
   "source": [
    "## Bayesian Analysis Results\n",
    "Analysis Results work exactly the same under Bayesian analysis.\n",
    "\n",
    "Let's run the analysis first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "00cf23c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:24:55.516309Z",
     "iopub.status.busy": "2025-02-06T21:24:55.515901Z",
     "iopub.status.idle": "2025-02-06T21:25:01.531231Z",
     "shell.execute_reply": "2025-02-06T21:25:01.530656Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6b9f498ffb4d4b4eabffd2422299f265",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f32924b8bef44a61bbb19ab161286702",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Maximum a posteriori probability (MAP) point:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mMaximum a posteriori probability \u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mMAP\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m point:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.84 +/- 0.12</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(4.8 -3.5 +4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.73 -0.8 +0.29) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.500 -0.015 +0.017) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.3 -1.5 +1.2) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                   1.84 +/- 0.12   \n",
       "fake.spectrum.main.composite.b_1           (4.8 -3.5 +4) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2          (2.73 -0.8 +0.29) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.500 -0.015 +0.017) x 10   \n",
       "fake.spectrum.main.composite.sigma_2     (9.3 -1.5 +1.2) x 10^-1   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(posterior) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mposterior\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(posterior)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>-26.135147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>-26.135147</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(posterior)\n",
       "sim_data       -26.135147\n",
       "total          -26.135147"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>63.633930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>71.830409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIC</th>\n",
       "      <td>-211.914484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PDIC</th>\n",
       "      <td>-273.939715</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      statistical measures\n",
       "AIC              63.633930\n",
       "BIC              71.830409\n",
       "DIC            -211.914484\n",
       "PDIC           -273.939715"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for parameter in ar.optimized_model:\n",
    "    model[parameter.path].value = parameter.value\n",
    "\n",
    "model.fake.spectrum.main.composite.a_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.b_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.F_2.set_uninformative_prior(Log_uniform_prior)\n",
    "model.fake.spectrum.main.composite.mu_2.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.sigma_2.set_uninformative_prior(Log_uniform_prior)\n",
    "\n",
    "bs = BayesianAnalysis(model, data)\n",
    "bs.set_sampler(\"emcee\")\n",
    "bs.sampler.setup(n_iterations=1000, n_burn_in=100, n_walkers=20)\n",
    "samples = bs.sample()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03338135",
   "metadata": {},
   "source": [
    "Again, we grab the results from the BayesianAnalysis object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d157f773",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:25:01.533294Z",
     "iopub.status.busy": "2025-02-06T21:25:01.533109Z",
     "iopub.status.idle": "2025-02-06T21:25:01.536125Z",
     "shell.execute_reply": "2025-02-06T21:25:01.535458Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2 = bs.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cdfa658",
   "metadata": {},
   "source": [
    "We can write and read the results to/from a file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "81c2e664",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:25:01.538252Z",
     "iopub.status.busy": "2025-02-06T21:25:01.537906Z",
     "iopub.status.idle": "2025-02-06T21:25:01.594415Z",
     "shell.execute_reply": "2025-02-06T21:25:01.593885Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2.write_to(\"test_bayes.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "11fd2c40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:25:01.596320Z",
     "iopub.status.busy": "2025-02-06T21:25:01.596117Z",
     "iopub.status.idle": "2025-02-06T21:25:01.646378Z",
     "shell.execute_reply": "2025-02-06T21:25:01.645694Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2_reloaded = load_analysis_results(\"test_bayes.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "522218e2",
   "metadata": {},
   "source": [
    "The AR holds the posterior samples from the analysis. We can see the saved and live reults are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "62ef5275",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:25:01.648697Z",
     "iopub.status.busy": "2025-02-06T21:25:01.648496Z",
     "iopub.status.idle": "2025-02-06T21:25:01.681987Z",
     "shell.execute_reply": "2025-02-06T21:25:01.681418Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.allclose(ar2_reloaded.samples, ar2.samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9dafd516",
   "metadata": {},
   "source": [
    "**NOTE:** *MLE AR's store samples as well. These are the samples from the covariance matrix*\n",
    "\n",
    "We can examine the marginal distributions of the parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "eaca0798",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:25:01.683996Z",
     "iopub.status.busy": "2025-02-06T21:25:01.683618Z",
     "iopub.status.idle": "2025-02-06T21:25:03.124062Z",
     "shell.execute_reply": "2025-02-06T21:25:03.123315Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1180x1180 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = ar2.corner_plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f308dbe8",
   "metadata": {},
   "source": [
    "We can return pandas DataFrames with equal tail or HPD results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6ed1d65e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:25:03.126350Z",
     "iopub.status.busy": "2025-02-06T21:25:03.126166Z",
     "iopub.status.idle": "2025-02-06T21:25:03.146581Z",
     "shell.execute_reply": "2025-02-06T21:25:03.146067Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.835780</td>\n",
       "      <td>-0.117094</td>\n",
       "      <td>0.121585</td>\n",
       "      <td>0.119340</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.004788</td>\n",
       "      <td>-0.003469</td>\n",
       "      <td>0.003726</td>\n",
       "      <td>0.003597</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>27.272560</td>\n",
       "      <td>-7.694274</td>\n",
       "      <td>2.934516</td>\n",
       "      <td>5.314395</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.998973</td>\n",
       "      <td>-0.148410</td>\n",
       "      <td>0.174541</td>\n",
       "      <td>0.161475</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.928535</td>\n",
       "      <td>-0.147395</td>\n",
       "      <td>0.123220</td>\n",
       "      <td>0.135307</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       1.835780       -0.117094   \n",
       "fake.spectrum.main.composite.b_1       0.004788       -0.003469   \n",
       "fake.spectrum.main.composite.F_2      27.272560       -7.694274   \n",
       "fake.spectrum.main.composite.mu_2     24.998973       -0.148410   \n",
       "fake.spectrum.main.composite.sigma_2   0.928535       -0.147395   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.121585  0.119340   \n",
       "fake.spectrum.main.composite.b_1            0.003726  0.003597   \n",
       "fake.spectrum.main.composite.F_2            2.934516  5.314395   \n",
       "fake.spectrum.main.composite.mu_2           0.174541  0.161475   \n",
       "fake.spectrum.main.composite.sigma_2        0.123220  0.135307   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"equal tail\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c38c784b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:25:03.149094Z",
     "iopub.status.busy": "2025-02-06T21:25:03.148547Z",
     "iopub.status.idle": "2025-02-06T21:25:03.171469Z",
     "shell.execute_reply": "2025-02-06T21:25:03.170814Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>1.835780</td>\n",
       "      <td>-0.127038</td>\n",
       "      <td>0.107425</td>\n",
       "      <td>0.117231</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>0.004788</td>\n",
       "      <td>-0.003212</td>\n",
       "      <td>0.003942</td>\n",
       "      <td>0.003577</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>27.272560</td>\n",
       "      <td>-6.226229</td>\n",
       "      <td>3.792182</td>\n",
       "      <td>5.009206</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.998973</td>\n",
       "      <td>-0.177014</td>\n",
       "      <td>0.131523</td>\n",
       "      <td>0.154269</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.928535</td>\n",
       "      <td>-0.155726</td>\n",
       "      <td>0.097920</td>\n",
       "      <td>0.126823</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       1.835780       -0.127038   \n",
       "fake.spectrum.main.composite.b_1       0.004788       -0.003212   \n",
       "fake.spectrum.main.composite.F_2      27.272560       -6.226229   \n",
       "fake.spectrum.main.composite.mu_2     24.998973       -0.177014   \n",
       "fake.spectrum.main.composite.sigma_2   0.928535       -0.155726   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.107425  0.117231   \n",
       "fake.spectrum.main.composite.b_1            0.003942  0.003577   \n",
       "fake.spectrum.main.composite.F_2            3.792182  5.009206   \n",
       "fake.spectrum.main.composite.mu_2           0.131523  0.154269   \n",
       "fake.spectrum.main.composite.sigma_2        0.097920  0.126823   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df75f0c9",
   "metadata": {},
   "source": [
    "Error propagation operates the same way. Internally, the process is the same as the MLE results, however, the samples are those of the posterior rather than the (assumed) covariance matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "6ef7eac1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:25:03.173544Z",
     "iopub.status.busy": "2025-02-06T21:25:03.173186Z",
     "iopub.status.idle": "2025-02-06T21:25:03.185353Z",
     "shell.execute_reply": "2025-02-06T21:25:03.184712Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: (4.5 -3.1 +4) x 10^-3, hpd: (4.5 -2.9 +4) x 10^-3\n",
      "equal-tail: 1.83 -0.11 +0.13, hpd: 1.83 -0.12 +0.11\n",
      "equal-tail: 1.84 -0.11 +0.12, hpd: 1.84 -0.12 +0.11\n"
     ]
    }
   ],
   "source": [
    "p1 = ar2.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar2.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "res = p1 + p2\n",
    "\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0d1521d",
   "metadata": {},
   "source": [
    "To demonstrate how the two objects (MLE and Bayes) are the same, we see that our plotting function written for the MLE result works on our Bayesian results seamlessly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "9425aec2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-06T21:25:03.187402Z",
     "iopub.status.busy": "2025-02-06T21:25:03.186953Z",
     "iopub.status.idle": "2025-02-06T21:25:07.186212Z",
     "shell.execute_reply": "2025-02-06T21:25:07.185503Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 1.86 -0.11 +0.12, hpd: 1.86 +/- 0.12\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e53a4a1645ff46ebaeff6be6cf0ba1c4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar2, model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "087f91f3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.21"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0e5fdeaa784c4bb7b0a294d707b9af4b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_cc957019af8e4baa99ab98885a079eb9",
        "IPY_MODEL_7f0e1bc4d7ff4883b8f2acb0b2dcea79",
        "IPY_MODEL_d15d2425300b4aff930d95e059a273cf"
       ],
       "layout": "IPY_MODEL_b9b7f44ba3954506a84642d006fe64c5",
       "tabbable": null,
       "tooltip": null
      }
     },
     "108a06ef88fb49cc95f582f226691254": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "12f2f6d666de42d9b0f287729a10f26e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1758ca2865924ccb823a18e3a6be5581": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8c11d52507d94582aba2e3928ad5ad88",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_855fe5f0c5da4d25a3776ef49efdf394",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "236b2e48e1cc417781116a60603339a8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8a4687b590d0471b87b980d1f192f787",
       "placeholder": "​",
       "style": "IPY_MODEL_2e0eb3518fd146c99b5ba88726df0893",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/1 [00:04&lt;00:00,  4.75s/it]"
      }
     },
     "259349788448419d998017d30d832f9a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "28d2ba09bef345a9a83d46f2fe7e5835": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2911528e43a1457f97744577245c7912": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "29dbe7de14184ec99d01d7ed0ae1d842": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2d6201afc2944b69ae90e14f2319e7de": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2e0eb3518fd146c99b5ba88726df0893": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2f1a88cc4107460b84a1c312062f3f26": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3379d8a00f24409991f5ad6b21f9c5cf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "33e22bb48c9b44ff8a5355ce50d1796f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4156dfb3d56a48c2b82f234fec5b627a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "487eff9ef2cd49b0b01d277a9b17aa6a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cf53ec8b22b84a94b250576e0ca16cbd",
       "placeholder": "​",
       "style": "IPY_MODEL_29dbe7de14184ec99d01d7ed0ae1d842",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "4959eeeec16d49d8a5040b9c23535ef8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_12f2f6d666de42d9b0f287729a10f26e",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_84f8bf4efe0b455b99f6d54f6ad81a3c",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "55f35353cf6f4a3b9a01189ecec85d7d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bef0d41dc4794f3b9930223a5245153d",
       "placeholder": "​",
       "style": "IPY_MODEL_f60e8625d9d14c9a946d93e23e987f7b",
       "tabbable": null,
       "tooltip": null,
       "value": "processing MLE analyses: 100%"
      }
     },
     "57c4612c34024b77a8ef44dc3f38885c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5dfd29d8f22e493996e881ba936b5aab": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "66ca005448d4470a941c713390e39bc4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a485f174a0774e7db35545ad2ee80b40",
       "placeholder": "​",
       "style": "IPY_MODEL_db872d8d23d341bc9afc2835fea4094f",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:03&lt;00:00, 25.88it/s]"
      }
     },
     "6ad782afaada42529740ed63528679e8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2911528e43a1457f97744577245c7912",
       "placeholder": "​",
       "style": "IPY_MODEL_87be3f7fe8684276af0bc86dafaf5e96",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:03&lt;00:00, 255.16it/s]"
      }
     },
     "6b9f498ffb4d4b4eabffd2422299f265": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_86dc8afb364f4d9d8f828f8db1879863",
        "IPY_MODEL_de9c6fd0af6643719f7fdd7645919c19",
        "IPY_MODEL_c5e82723ab4b4376a71aef41831f5600"
       ],
       "layout": "IPY_MODEL_57c4612c34024b77a8ef44dc3f38885c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "794031637f954c6ba02844de0eca1466": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7f0e1bc4d7ff4883b8f2acb0b2dcea79": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e3ba3e5ba62f415eb95681434dbfea00",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_3379d8a00f24409991f5ad6b21f9c5cf",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "84f8bf4efe0b455b99f6d54f6ad81a3c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "855fe5f0c5da4d25a3776ef49efdf394": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "86dc8afb364f4d9d8f828f8db1879863": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_33e22bb48c9b44ff8a5355ce50d1796f",
       "placeholder": "​",
       "style": "IPY_MODEL_259349788448419d998017d30d832f9a",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "87be3f7fe8684276af0bc86dafaf5e96": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8a4687b590d0471b87b980d1f192f787": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8b284eddd6a34d12a62958cad5ce57a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8c11d52507d94582aba2e3928ad5ad88": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8c9fdaabae36410bb18ac7b8f81d2c85": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_55f35353cf6f4a3b9a01189ecec85d7d",
        "IPY_MODEL_4959eeeec16d49d8a5040b9c23535ef8",
        "IPY_MODEL_236b2e48e1cc417781116a60603339a8"
       ],
       "layout": "IPY_MODEL_afd037bd7b5f47d8b8b714cbfd76f7ac",
       "tabbable": null,
       "tooltip": null
      }
     },
     "9a89e165d76d4203adbc73a01a35eded": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e0b62ab5375349bc9c9f49870f8637ce",
       "placeholder": "​",
       "style": "IPY_MODEL_f795d74228ae42bda691ef13616e51d4",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "9fb3f2937e0d4aa5b2cae141630381be": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f72979484a0149e39d771919960ed588",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8b284eddd6a34d12a62958cad5ce57a0",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "a485f174a0774e7db35545ad2ee80b40": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "afd037bd7b5f47d8b8b714cbfd76f7ac": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "b9b7f44ba3954506a84642d006fe64c5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bb6843f832314bcab20769e859340d19": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bef0d41dc4794f3b9930223a5245153d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c5e82723ab4b4376a71aef41831f5600": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5dfd29d8f22e493996e881ba936b5aab",
       "placeholder": "​",
       "style": "IPY_MODEL_2f1a88cc4107460b84a1c312062f3f26",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:00&lt;00:00, 274.83it/s]"
      }
     },
     "cc957019af8e4baa99ab98885a079eb9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4156dfb3d56a48c2b82f234fec5b627a",
       "placeholder": "​",
       "style": "IPY_MODEL_28d2ba09bef345a9a83d46f2fe7e5835",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "cf53ec8b22b84a94b250576e0ca16cbd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d15d2425300b4aff930d95e059a273cf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bb6843f832314bcab20769e859340d19",
       "placeholder": "​",
       "style": "IPY_MODEL_2d6201afc2944b69ae90e14f2319e7de",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:03&lt;00:00, 26.66it/s]"
      }
     },
     "db872d8d23d341bc9afc2835fea4094f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ddea54d7c19a42eba91f68fdfa13db6d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "de9c6fd0af6643719f7fdd7645919c19": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ddea54d7c19a42eba91f68fdfa13db6d",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ef1279bc539d4af59557ec94a33f19dc",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "e0b62ab5375349bc9c9f49870f8637ce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e3ba3e5ba62f415eb95681434dbfea00": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e53a4a1645ff46ebaeff6be6cf0ba1c4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9a89e165d76d4203adbc73a01a35eded",
        "IPY_MODEL_1758ca2865924ccb823a18e3a6be5581",
        "IPY_MODEL_66ca005448d4470a941c713390e39bc4"
       ],
       "layout": "IPY_MODEL_108a06ef88fb49cc95f582f226691254",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ef1279bc539d4af59557ec94a33f19dc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "f32924b8bef44a61bbb19ab161286702": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_487eff9ef2cd49b0b01d277a9b17aa6a",
        "IPY_MODEL_9fb3f2937e0d4aa5b2cae141630381be",
        "IPY_MODEL_6ad782afaada42529740ed63528679e8"
       ],
       "layout": "IPY_MODEL_794031637f954c6ba02844de0eca1466",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f60e8625d9d14c9a946d93e23e987f7b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f72979484a0149e39d771919960ed588": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f795d74228ae42bda691ef13616e51d4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
