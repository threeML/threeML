{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "36ba8d37",
   "metadata": {},
   "source": [
    "# Analysis Results\n",
    "\n",
    "3ML stores the results of a fit in a container we call an \"Analysis Result\" (AR). The structure of this object is designed to be useable in a *live* sense within an *active* analysis (python script, ipython interactive shell, jupyter notebook) as well as storable as a FITS file for saving results for later.\n",
    "\n",
    "The structure is nearly the same between MLE and Bayesian analyses in order to make a seamless functionality between all analyses.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8efe691a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:44.996920Z",
     "iopub.status.busy": "2023-11-06T18:10:44.996723Z",
     "iopub.status.idle": "2023-11-06T18:10:48.398766Z",
     "shell.execute_reply": "2023-11-06T18:10:48.398057Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")\n",
    "from threeML import *\n",
    "from threeML.analysis_results import *\n",
    "import astropy.units as u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0d354d7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:48.401534Z",
     "iopub.status.busy": "2023-11-06T18:10:48.401221Z",
     "iopub.status.idle": "2023-11-06T18:10:48.430880Z",
     "shell.execute_reply": "2023-11-06T18:10:48.430231Z"
    }
   },
   "outputs": [],
   "source": [
    "silence_logs()\n",
    "from tqdm.auto import tqdm\n",
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "set_threeML_style()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d55359e8",
   "metadata": {},
   "source": [
    "Let's take a look at what we can do with an AR. First, we will simulate some data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "43ba8705",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:48.433374Z",
     "iopub.status.busy": "2023-11-06T18:10:48.432918Z",
     "iopub.status.idle": "2023-11-06T18:10:50.345939Z",
     "shell.execute_reply": "2023-11-06T18:10:50.345186Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=2, b=0) + Gaussian(F=30.0, mu=25.0, sigma=1)\n",
    "\n",
    "# Generate a dataset using the line and a gaussian.\n",
    "# constant 20% error\n",
    "\n",
    "x = np.linspace(0, 50, 50)\n",
    "\n",
    "xy = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.2 * gen_function(x)\n",
    ")\n",
    "\n",
    "fig = xy.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "364716be",
   "metadata": {},
   "source": [
    "## MLE Results\n",
    "\n",
    "\n",
    "First we will demonstrate how AR's work for an MLE analysis on our synthetic data. As we will see, most of the functionality exists in the Bayesian AR's as well.\n",
    "\n",
    "Let's do a simple likelihood maximization of our data and model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc25e653",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:50.348446Z",
     "iopub.status.busy": "2023-11-06T18:10:50.348040Z",
     "iopub.status.idle": "2023-11-06T18:10:51.165989Z",
     "shell.execute_reply": "2023-11-06T18:10:51.165458Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.12 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-4 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.3 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.504 +/- 0.011) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.19 +/- 0.09</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.12 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-4 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.3 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.504 +/- 0.011) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.19 +/- 0.09               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140413829283168\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.05</td><td>0.03</td><td>-0.10</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.03</td><td>0.00</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>1.00</td><td>-0.02</td><td>-0.26</td></tr>\n",
       "<tr><td>0.03</td><td>-0.03</td><td>-0.02</td><td>1.00</td><td>-0.09</td></tr>\n",
       "<tr><td>-0.10</td><td>0.00</td><td>-0.26</td><td>-0.09</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.05  0.03 -0.10\n",
       "-0.85  1.00 -0.00 -0.03  0.00\n",
       "-0.05 -0.00  1.00 -0.02 -0.26\n",
       " 0.03 -0.03 -0.02  1.00 -0.09\n",
       "-0.10  0.00 -0.26 -0.09  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>13.176778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>13.176778</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         13.176778\n",
       "total            13.176778"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>37.717192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>45.913670</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             37.717192\n",
       "BIC             45.913670"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fitfun = Line() + Gaussian()\n",
    "\n",
    "fitfun.b_1.bounds = (-10, 10.0)\n",
    "fitfun.a_1.bounds = (-100, 100.0)\n",
    "fitfun.F_2 = 25.0\n",
    "fitfun.F_2.bounds = (1e-3, 200.0)\n",
    "fitfun.mu_2 = 25.0\n",
    "fitfun.mu_2.bounds = (0.0, 100.0)\n",
    "fitfun.sigma_2.bounds = (1e-3, 10.0)\n",
    "\n",
    "model = Model(PointSource(\"fake\", 0.0, 0.0, fitfun))\n",
    "\n",
    "data = DataList(xy)\n",
    "\n",
    "jl = JointLikelihood(model, DataList(xy))\n",
    "_ = jl.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ecc7821",
   "metadata": {},
   "source": [
    "We can get our errors as always, but the results cannot be propagated (error propagation assumes Gaussian errors, i.e., symmetric errors)\n",
    "In this case though errors are pretty symmetric, so we are likely in the case\n",
    "where the MLE is actually normally distributed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2aad5918",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:51.168608Z",
     "iopub.status.busy": "2023-11-06T18:10:51.168194Z",
     "iopub.status.idle": "2023-11-06T18:10:51.227572Z",
     "shell.execute_reply": "2023-11-06T18:10:51.226950Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.12 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-4 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.3 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.504 +/- 0.011) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.19 +/- 0.09</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.12 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-4 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.3 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.504 +/- 0.011) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.19 +/- 0.09               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.122701</td>\n",
       "      <td>-0.113798</td>\n",
       "      <td>0.113708</td>\n",
       "      <td>0.113753</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.003522</td>\n",
       "      <td>-0.003844</td>\n",
       "      <td>0.003845</td>\n",
       "      <td>0.003845</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>33.338005</td>\n",
       "      <td>-3.885052</td>\n",
       "      <td>3.896510</td>\n",
       "      <td>3.890781</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.036774</td>\n",
       "      <td>-0.111216</td>\n",
       "      <td>0.112285</td>\n",
       "      <td>0.111751</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.190601</td>\n",
       "      <td>-0.088742</td>\n",
       "      <td>0.094315</td>\n",
       "      <td>0.091529</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.122701       -0.113798   \n",
       "fake.spectrum.main.composite.b_1      -0.003522       -0.003844   \n",
       "fake.spectrum.main.composite.F_2      33.338005       -3.885052   \n",
       "fake.spectrum.main.composite.mu_2     25.036774       -0.111216   \n",
       "fake.spectrum.main.composite.sigma_2   1.190601       -0.088742   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.113708  0.113753   \n",
       "fake.spectrum.main.composite.b_1            0.003845  0.003845   \n",
       "fake.spectrum.main.composite.F_2            3.896510  3.890781   \n",
       "fake.spectrum.main.composite.mu_2           0.112285  0.111751   \n",
       "fake.spectrum.main.composite.sigma_2        0.094315  0.091529   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jl.get_errors()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3423419a",
   "metadata": {},
   "source": [
    "We need to get the AnalysisResults object that is created after a fit is performed. The AR object is a member of the JointLikelihood object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "006e1532",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:51.230130Z",
     "iopub.status.busy": "2023-11-06T18:10:51.229721Z",
     "iopub.status.idle": "2023-11-06T18:10:51.232596Z",
     "shell.execute_reply": "2023-11-06T18:10:51.232048Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = jl.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c4b4d93",
   "metadata": {},
   "source": [
    "We can display the results of the analysis. Note, when a fit is performed, the post display is actaully from the internal AR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cbcc6c46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:51.234805Z",
     "iopub.status.busy": "2023-11-06T18:10:51.234436Z",
     "iopub.status.idle": "2023-11-06T18:10:51.263685Z",
     "shell.execute_reply": "2023-11-06T18:10:51.263167Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.12 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-4 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.3 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.504 +/- 0.011) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.19 +/- 0.09</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.12 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-4 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.3 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.504 +/- 0.011) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.19 +/- 0.09               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140415035255728\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.05</td><td>0.03</td><td>-0.10</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.03</td><td>0.00</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>1.00</td><td>-0.02</td><td>-0.26</td></tr>\n",
       "<tr><td>0.03</td><td>-0.03</td><td>-0.02</td><td>1.00</td><td>-0.09</td></tr>\n",
       "<tr><td>-0.10</td><td>0.00</td><td>-0.26</td><td>-0.09</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.05  0.03 -0.10\n",
       "-0.85  1.00 -0.00 -0.03  0.00\n",
       "-0.05 -0.00  1.00 -0.02 -0.26\n",
       " 0.03 -0.03 -0.02  1.00 -0.09\n",
       "-0.10  0.00 -0.26 -0.09  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>13.176778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>13.176778</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         13.176778\n",
       "total            13.176778"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>37.717192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>45.913670</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             37.717192\n",
       "BIC             45.913670"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca2721a8",
   "metadata": {},
   "source": [
    "By default, the equal tail intervals are displayed. We can instead display highest posterior densities (equal in the MLE case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "90836082",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:51.266106Z",
     "iopub.status.busy": "2023-11-06T18:10:51.265520Z",
     "iopub.status.idle": "2023-11-06T18:10:51.296449Z",
     "shell.execute_reply": "2023-11-06T18:10:51.295803Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.12 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-4 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.3 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.504 +/- 0.011) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.19 +/- 0.09</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.12 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-4 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.3 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.504 +/- 0.011) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.19 +/- 0.09               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140415035189616\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.05</td><td>0.03</td><td>-0.10</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.03</td><td>0.00</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>1.00</td><td>-0.02</td><td>-0.26</td></tr>\n",
       "<tr><td>0.03</td><td>-0.03</td><td>-0.02</td><td>1.00</td><td>-0.09</td></tr>\n",
       "<tr><td>-0.10</td><td>0.00</td><td>-0.26</td><td>-0.09</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.05  0.03 -0.10\n",
       "-0.85  1.00 -0.00 -0.03  0.00\n",
       "-0.05 -0.00  1.00 -0.02 -0.26\n",
       " 0.03 -0.03 -0.02  1.00 -0.09\n",
       "-0.10  0.00 -0.26 -0.09  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>13.176778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>13.176778</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         13.176778\n",
       "total            13.176778"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>37.717192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>45.913670</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             37.717192\n",
       "BIC             45.913670"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34aacacd",
   "metadata": {},
   "source": [
    "The AR stores several properties from the analysis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c03b2d09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:51.298863Z",
     "iopub.status.busy": "2023-11-06T18:10:51.298494Z",
     "iopub.status.idle": "2023-11-06T18:10:51.302693Z",
     "shell.execute_reply": "2023-11-06T18:10:51.302152Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'MLE'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.analysis_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "14b1efe7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:51.305026Z",
     "iopub.status.busy": "2023-11-06T18:10:51.304661Z",
     "iopub.status.idle": "2023-11-06T18:10:51.308950Z",
     "shell.execute_reply": "2023-11-06T18:10:51.308329Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.29397981e-02, -3.69613629e-04, -2.11210394e-02,\n",
       "         4.18955071e-04, -9.87885412e-04],\n",
       "       [-3.69613629e-04,  1.47839717e-05, -1.26924166e-06,\n",
       "        -1.27698240e-05,  5.14183428e-07],\n",
       "       [-2.11210394e-02, -1.26924166e-06,  1.51425199e+01,\n",
       "        -9.52814465e-03, -9.25648899e-02],\n",
       "       [ 4.18955071e-04, -1.27698240e-05, -9.52814465e-03,\n",
       "         1.23118115e-02, -9.21203527e-04],\n",
       "       [-9.87885412e-04,  5.14183428e-07, -9.25648899e-02,\n",
       "        -9.21203527e-04,  8.25337238e-03]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.covariance_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "78cdd7f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:51.311399Z",
     "iopub.status.busy": "2023-11-06T18:10:51.311025Z",
     "iopub.status.idle": "2023-11-06T18:10:55.879536Z",
     "shell.execute_reply": "2023-11-06T18:10:55.878829Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fd858736f74945dd8226b37fac55e561",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "processing MLE analyses:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flux</th>\n",
       "      <th>low bound</th>\n",
       "      <th>hi bound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake: total</th>\n",
       "      <td>1.6481799883675876e-05 erg / (s cm2)</td>\n",
       "      <td>1.5130482582892947e-05 erg / (s cm2)</td>\n",
       "      <td>1.7866314909588137e-05 erg / (s cm2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             flux  \\\n",
       "fake: total  1.6481799883675876e-05 erg / (s cm2)   \n",
       "\n",
       "                                        low bound  \\\n",
       "fake: total  1.5130482582892947e-05 erg / (s cm2)   \n",
       "\n",
       "                                         hi bound  \n",
       "fake: total  1.7866314909588137e-05 erg / (s cm2)  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.get_point_source_flux(1 * u.keV, 0.1 * u.MeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "17ca2336",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:55.882198Z",
     "iopub.status.busy": "2023-11-06T18:10:55.881800Z",
     "iopub.status.idle": "2023-11-06T18:10:55.899371Z",
     "shell.execute_reply": "2023-11-06T18:10:55.898739Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (5):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.122701</td>\n",
       "      <td>-100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.003522</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>s-1 cm-2 keV-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>33.338005</td>\n",
       "      <td>0.001</td>\n",
       "      <td>200.0</td>\n",
       "      <td>s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.036774</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.190601</td>\n",
       "      <td>0.001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (2):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (0):<br><br>(none)<br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     1\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (5):\n",
       "--------------------\n",
       "\n",
       "                                          value min_value max_value  \\\n",
       "fake.spectrum.main.composite.a_1       2.122701    -100.0     100.0   \n",
       "fake.spectrum.main.composite.b_1      -0.003522     -10.0      10.0   \n",
       "fake.spectrum.main.composite.F_2      33.338005     0.001     200.0   \n",
       "fake.spectrum.main.composite.mu_2     25.036774       0.0     100.0   \n",
       "fake.spectrum.main.composite.sigma_2   1.190601     0.001      10.0   \n",
       "\n",
       "                                                unit  \n",
       "fake.spectrum.main.composite.a_1      keV-1 s-1 cm-2  \n",
       "fake.spectrum.main.composite.b_1      s-1 cm-2 keV-2  \n",
       "fake.spectrum.main.composite.F_2            s-1 cm-2  \n",
       "fake.spectrum.main.composite.mu_2                keV  \n",
       "fake.spectrum.main.composite.sigma_2             keV  \n",
       "\n",
       "Fixed parameters (2):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (0):\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.optimized_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb407560",
   "metadata": {},
   "source": [
    "## Saving results to disk\n",
    "\n",
    "The beauty of the analysis result is that all of this information can be written to disk and restored at a later time. The statistical parameters, best-fit model, etc. can all be recovered.\n",
    "\n",
    "AR's are stored as a structured FITS file. We write the AR like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b37d881c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:55.901785Z",
     "iopub.status.busy": "2023-11-06T18:10:55.901403Z",
     "iopub.status.idle": "2023-11-06T18:10:55.938433Z",
     "shell.execute_reply": "2023-11-06T18:10:55.937862Z"
    }
   },
   "outputs": [],
   "source": [
    "ar.write_to(\"test_mle.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b6c8a8c",
   "metadata": {},
   "source": [
    "The FITS file can be examines with any normal FITS reader."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "70effe2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:55.941131Z",
     "iopub.status.busy": "2023-11-06T18:10:55.940730Z",
     "iopub.status.idle": "2023-11-06T18:10:55.943872Z",
     "shell.execute_reply": "2023-11-06T18:10:55.943264Z"
    }
   },
   "outputs": [],
   "source": [
    "import astropy.io.fits as fits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c3a3dfde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:55.946091Z",
     "iopub.status.busy": "2023-11-06T18:10:55.945684Z",
     "iopub.status.idle": "2023-11-06T18:10:55.951777Z",
     "shell.execute_reply": "2023-11-06T18:10:55.951269Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: test_mle.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       6   ()      \n",
      "  1  ANALYSIS_RESULTS    1 BinTableHDU     38   5R x 9C   [36A, D, D, D, D, 16A, 5D, D, D]   \n"
     ]
    }
   ],
   "source": [
    "ar_fits = fits.open(\"test_mle.fits\")\n",
    "ar_fits.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd18867c",
   "metadata": {},
   "source": [
    "However, to easily pull the results back into the 3ML framework, we use the ${\\tt load\\_analysis\\_results}$ function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f9cfda7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:55.953948Z",
     "iopub.status.busy": "2023-11-06T18:10:55.953562Z",
     "iopub.status.idle": "2023-11-06T18:10:56.013795Z",
     "shell.execute_reply": "2023-11-06T18:10:56.013260Z"
    }
   },
   "outputs": [],
   "source": [
    "ar_reloaded = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5727ba9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:56.016111Z",
     "iopub.status.busy": "2023-11-06T18:10:56.015730Z",
     "iopub.status.idle": "2023-11-06T18:10:56.021879Z",
     "shell.execute_reply": "2023-11-06T18:10:56.021293Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>13.176778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>13.176778</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         13.176778\n",
       "total            13.176778"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_statistic_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ffff176",
   "metadata": {},
   "source": [
    "You can get a DataFrame with the saved results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1dea5997",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:56.024014Z",
     "iopub.status.busy": "2023-11-06T18:10:56.023669Z",
     "iopub.status.idle": "2023-11-06T18:10:56.040799Z",
     "shell.execute_reply": "2023-11-06T18:10:56.040158Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.122701</td>\n",
       "      <td>-0.110642</td>\n",
       "      <td>0.116925</td>\n",
       "      <td>0.113784</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.003522</td>\n",
       "      <td>-0.003751</td>\n",
       "      <td>0.003877</td>\n",
       "      <td>0.003814</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>33.338005</td>\n",
       "      <td>-3.787168</td>\n",
       "      <td>3.982294</td>\n",
       "      <td>3.884731</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.036774</td>\n",
       "      <td>-0.111929</td>\n",
       "      <td>0.111645</td>\n",
       "      <td>0.111787</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.190601</td>\n",
       "      <td>-0.088156</td>\n",
       "      <td>0.089032</td>\n",
       "      <td>0.088594</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.122701       -0.110642   \n",
       "fake.spectrum.main.composite.b_1      -0.003522       -0.003751   \n",
       "fake.spectrum.main.composite.F_2      33.338005       -3.787168   \n",
       "fake.spectrum.main.composite.mu_2     25.036774       -0.111929   \n",
       "fake.spectrum.main.composite.sigma_2   1.190601       -0.088156   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.116925  0.113784   \n",
       "fake.spectrum.main.composite.b_1            0.003877  0.003814   \n",
       "fake.spectrum.main.composite.F_2            3.982294  3.884731   \n",
       "fake.spectrum.main.composite.mu_2           0.111645  0.111787   \n",
       "fake.spectrum.main.composite.sigma_2        0.089032  0.088594   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_data_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c53e3ee",
   "metadata": {},
   "source": [
    "## Analysis Result Sets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9584a3e",
   "metadata": {},
   "source": [
    "When doing time-resolved analysis or analysing a several objects, we can save several AR's is a set. This is achieved with the analysis result set. We can pass an array of AR's to the set and even set up descriptions for the different entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0d6b9cf8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:56.043120Z",
     "iopub.status.busy": "2023-11-06T18:10:56.042768Z",
     "iopub.status.idle": "2023-11-06T18:10:56.108285Z",
     "shell.execute_reply": "2023-11-06T18:10:56.107665Z"
    }
   },
   "outputs": [],
   "source": [
    "from threeML.analysis_results import AnalysisResultsSet\n",
    "\n",
    "analysis_set = AnalysisResultsSet([ar, ar_reloaded])\n",
    "\n",
    "# index as time bins\n",
    "analysis_set.set_bins(\"testing\", [-1, 1], [3, 5], unit=\"s\")\n",
    "\n",
    "# write to disk\n",
    "analysis_set.write_to(\"analysis_set_test.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3e84f809",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:56.110871Z",
     "iopub.status.busy": "2023-11-06T18:10:56.110415Z",
     "iopub.status.idle": "2023-11-06T18:10:56.229756Z",
     "shell.execute_reply": "2023-11-06T18:10:56.229091Z"
    }
   },
   "outputs": [],
   "source": [
    "analysis_set = load_analysis_results(\"analysis_set_test.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "90ebade1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:56.232306Z",
     "iopub.status.busy": "2023-11-06T18:10:56.232098Z",
     "iopub.status.idle": "2023-11-06T18:10:56.263983Z",
     "shell.execute_reply": "2023-11-06T18:10:56.263356Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.12 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-4 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.3 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.504 +/- 0.011) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.19 +/- 0.09</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.12 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-4 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (3.3 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.504 +/- 0.011) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.19 +/- 0.09               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140413829998624\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.05</td><td>0.03</td><td>-0.10</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.03</td><td>0.00</td></tr>\n",
       "<tr><td>-0.05</td><td>-0.00</td><td>1.00</td><td>-0.02</td><td>-0.26</td></tr>\n",
       "<tr><td>0.03</td><td>-0.03</td><td>-0.02</td><td>1.00</td><td>-0.09</td></tr>\n",
       "<tr><td>-0.10</td><td>0.00</td><td>-0.26</td><td>-0.09</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.05  0.03 -0.10\n",
       "-0.85  1.00 -0.00 -0.03  0.00\n",
       "-0.05 -0.00  1.00 -0.02 -0.26\n",
       " 0.03 -0.03 -0.02  1.00 -0.09\n",
       "-0.10  0.00 -0.26 -0.09  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>13.176778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>13.176778</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         13.176778\n",
       "total            13.176778"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>37.717192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>45.913670</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             37.717192\n",
       "BIC             45.913670"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis_set[0].display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1712398e",
   "metadata": {},
   "source": [
    "## Error propagation\n",
    "In 3ML, we propagate errors for MLE reults via sampling of the covariance matrix *instead* of Taylor exanding around the maximum of the likelihood and computing a jacobain. Thus, we can achieve non-linear error propagation.\n",
    "\n",
    "You can use the results for propagating errors non-linearly for analytical functions:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b540a296",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:56.266322Z",
     "iopub.status.busy": "2023-11-06T18:10:56.266012Z",
     "iopub.status.idle": "2023-11-06T18:10:56.273317Z",
     "shell.execute_reply": "2023-11-06T18:10:56.272675Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Propagating a+b, with a and b respectively:\n",
      "equal-tail: (-3 +/- 4) x 10^-3, hpd: (-3 +/- 4) x 10^-3\n",
      "equal-tail: 2.12 +/- 0.11, hpd: 2.12 -0.11 +0.12\n",
      "\n",
      "This is the result (with errors):\n",
      "equal-tail: 2.11 +/- 0.11, hpd: 2.11 +/- 0.11\n",
      "(2.0086217944285316, 2.225915869577595)\n"
     ]
    }
   ],
   "source": [
    "p1 = ar.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(\"Propagating a+b, with a and b respectively:\")\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "print(\"\\nThis is the result (with errors):\")\n",
    "res = p1 + p2\n",
    "print(res)\n",
    "\n",
    "print(res.equal_tail_interval())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00252340",
   "metadata": {},
   "source": [
    "The propagation accounts for covariances. For example this\n",
    "has error of zero (of course) since there is perfect covariance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f98ffccc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:56.275701Z",
     "iopub.status.busy": "2023-11-06T18:10:56.275356Z",
     "iopub.status.idle": "2023-11-06T18:10:56.279601Z",
     "shell.execute_reply": "2023-11-06T18:10:56.279104Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is 50 * a/a:\n",
      "equal-tail: (5.0 +/- 0) x 10, hpd: (5.0 +/- 0) x 10\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is 50 * a/a:\")\n",
    "print(50 * p1 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dc3ca50",
   "metadata": {},
   "source": [
    "You can use arbitrary (np) functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b94e4f55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:56.281946Z",
     "iopub.status.busy": "2023-11-06T18:10:56.281493Z",
     "iopub.status.idle": "2023-11-06T18:10:56.286781Z",
     "shell.execute_reply": "2023-11-06T18:10:56.286270Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is arcsinh(b + 5*) / np.log10(b) (why not?)\n",
      "equal-tail: 9.4 +/- 0.5, hpd: 9.4 +/- 0.5\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is arcsinh(b + 5*) / np.log10(b) (why not?)\")\n",
    "print(np.arcsinh(p1 + 5 * p2) / np.log10(p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f96d9d29",
   "metadata": {},
   "source": [
    "Errors can become asymmetric. For example, the ratio of two gaussians is\n",
    "asymmetric notoriously:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cd1b5d03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:56.289140Z",
     "iopub.status.busy": "2023-11-06T18:10:56.288701Z",
     "iopub.status.idle": "2023-11-06T18:10:56.293222Z",
     "shell.execute_reply": "2023-11-06T18:10:56.292611Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Ratio a/b:\n",
      "equal-tail: (-4 -7 +9) x 10^2, hpd: (-4.1 -9 +2.4) x 10^2\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nRatio a/b:\")\n",
    "print(p2 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b86396dd",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "You can always use it with arbitrary functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2d47d0a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:56.295694Z",
     "iopub.status.busy": "2023-11-06T18:10:56.295260Z",
     "iopub.status.idle": "2023-11-06T18:10:56.300112Z",
     "shell.execute_reply": "2023-11-06T18:10:56.299594Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Propagating using a custom function:\n",
      "equal-tail: 2.11 -0.10 +0.11, hpd: 2.11 -0.11 +0.10\n"
     ]
    }
   ],
   "source": [
    "def my_function(x, a, b):\n",
    "    return b * x**a\n",
    "\n",
    "\n",
    "print(\"\\nPropagating using a custom function:\")\n",
    "print(my_function(2.3, p1, p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "493cb703",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "This is an example of an error propagation to get the plot of the model with its errors\n",
    "(which are propagated without assuming linearity on parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1d8e63db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:56.302390Z",
     "iopub.status.busy": "2023-11-06T18:10:56.302026Z",
     "iopub.status.idle": "2023-11-06T18:10:56.309027Z",
     "shell.execute_reply": "2023-11-06T18:10:56.308510Z"
    }
   },
   "outputs": [],
   "source": [
    "def go(fitfun, ar, model):\n",
    "    fig, ax = plt.subplots()\n",
    "\n",
    "    # Gather the parameter variates\n",
    "\n",
    "    arguments = {}\n",
    "\n",
    "    for par in fitfun.parameters.values():\n",
    "        if par.free:\n",
    "            this_name = par.name\n",
    "\n",
    "            this_variate = ar.get_variates(par.path)\n",
    "\n",
    "            # Do not use more than 1000 values (would make computation too slow for nothing)\n",
    "\n",
    "            if len(this_variate) > 1000:\n",
    "                this_variate = np.random.choice(this_variate, size=1000)\n",
    "\n",
    "            arguments[this_name] = this_variate\n",
    "\n",
    "    # Prepare the error propagator function\n",
    "\n",
    "    pp = ar.propagate(\n",
    "        ar.optimized_model.fake.spectrum.main.shape.evaluate_at, **arguments\n",
    "    )\n",
    "\n",
    "    # You can just use it as:\n",
    "\n",
    "    print(pp(5.0))\n",
    "\n",
    "    # Make the plot\n",
    "\n",
    "    energies = np.linspace(0, 50, 100)\n",
    "\n",
    "    low_curve = np.zeros_like(energies)\n",
    "    middle_curve = np.zeros_like(energies)\n",
    "    hi_curve = np.zeros_like(energies)\n",
    "\n",
    "    free_parameters = model.free_parameters\n",
    "\n",
    "    p = tqdm(total=len(energies), desc=\"Propagating errors\")\n",
    "\n",
    "    with use_astromodels_memoization(False):\n",
    "        for i, e in enumerate(energies):\n",
    "            this_flux = pp(e)\n",
    "\n",
    "            low_bound, hi_bound = this_flux.equal_tail_interval()\n",
    "\n",
    "            low_curve[i], middle_curve[i], hi_curve[i] = (\n",
    "                low_bound,\n",
    "                this_flux.median,\n",
    "                hi_bound,\n",
    "            )\n",
    "\n",
    "            p.update(1)\n",
    "\n",
    "    ax.plot(energies, middle_curve, \"--\", color=\"black\")\n",
    "    ax.fill_between(energies, low_curve, hi_curve, alpha=0.5, color=\"blue\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e307eeca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:10:56.311231Z",
     "iopub.status.busy": "2023-11-06T18:10:56.310865Z",
     "iopub.status.idle": "2023-11-06T18:11:00.132901Z",
     "shell.execute_reply": "2023-11-06T18:11:00.132192Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 2.10 -0.11 +0.12, hpd: 2.10 -0.11 +0.12\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "25ea8a0b540e41799c0d8dbb8fbbc2a2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA2QAAAL3CAYAAADlbYaRAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/SrBM8AAAACXBIWXMAAA9hAAAPYQGoP6dpAACIhklEQVR4nOzdd5hkZZn+8btydVd3dU93z/TMMDkwDBkFCeMQlCg6qKBgQnDFsIIYWF133XV3ZXX9qcvigi6KOq5I0GURUDGxBCUJCoIwDGGgGZjcsXI8vz8Op3Lnqj4Vvp/r6muqTtWp8/ZQTPddz/s+r8MwDEMAAAAAgDnntHsAAAAAANCqCGQAAAAAYBMCGQAAAADYhEAGAAAAADYhkAEAAACATQhkAAAAAGATAhkAAAAA2KSpAlk8HtfWrVsVj8ftHgoAAAAATKqpAtnAwIAuuugiDQwM2D0UAAAAAJhUUwUyAAAAAGgkBDIAAAAAsAmBDAAAAABsQiADAAAAAJsQyAAAAADAJgQyAAAAALAJgQwAAAAAbEIgAwAAAACbEMgAAAAAwCYEMgAAAACwCYEMAAAAAGxCIAMAAAAAmxDIAAAAAMAmBDIAAAAAsAmBDAAAAABsQiADAAAAAJsQyAAAAADAJgQyAAAAALAJgQwAAAAAbEIgAwAAAACbEMgAAAAAwCYEMgAAAACwCYEMAAAAAGxCIAMAAAAAmxDIAAAAAMAmBDIAAAAAsAmBDAAAAABsQiADAAAAAJsQyAAAAADAJgQyAAAAALAJgQwAAAAAbEIgAwBgAqmU9PTTdo8CANCs3HYPAACAevXKK9KPfiT19EgHHGD3aAAAzYhABgBABb//vfTrX0tOp9TZafdoAADNikAGAECBZFK64QZp61bJ6zWPxWL2jgkA0LwIZAAAvGr7dun666VIJB/GJCket29MAIDmRiADALQ8w5DuvVf67W8ll8ucplgoHjef43DYMz4AQPOiyyIAoOXt3i3dfrsZxipJpcypjAAAVBuBDADQ8oaHJY9n/MczGSkanbvxAABaB4EMANDyhocl9yST+EOhuRkLAKC1EMgAAC0vEilfN1bI45EGB+duPACA1kEgAwC0vHh84oYdbrc0Ojp34wEAtA4CGQCg5SUSEz/ucLCGDABQGwQyAEDLm8o+Y+xFBgCoBQIZAKDlTVYhkwhkAIDaIJABAFoegQwAYBcCGQCg5RHIAAB2IZABAFreVMJWLFb7cQAAWg+BDADQ8qiQAQDsQiADALS0dFpKJid/XiIhGUbtxwMAaC0EMgBAS4vHpWx28uel01OrpAEAMB3TDmTRaFTf+973dNlll+nMM8/U8ccfrzvuuGPCc9LptN73vvfp+OOP1w033DDjwQIAUG2xmJTJTP68dJrNoQEA1TftQDY6OqrNmzdrYGBAa9asmdI5N998s/bs2TPtwQEAUGsjI5Jzij8NQ6GaDgUA0IKmHch6e3t1yy236Cc/+Yk++tGPTvr84eFh/eAHP9C73/3uGQ0QAIBaGhmRPJ7Jn+fxSENDNR8OAKDFTDuQeb1e9fb2Tvn511xzjZYuXapTTjllupcCAKDmxsYkl2vy57nd0vBw7ccDAGgt7lq++FNPPaVf/vKXuuqqq+RwOGp5KQAAZiQel6byI8rhYC8yAED11SyQGYahK6+8Um94wxt08MEHa+fOnVV53X379mlwcLDiYwMDA1W5BgCgdUxnfzH2IgMAVFvNAtkdd9yhbdu26V/+5V+q+rq33XabNm/eXNXXBAC0rum0sieQAQCqrSaBLBKJ6Nvf/rbe9a53qb+/v6qvvWnTJm3YsKHiYwMDA7r88surej0AQHObyqbQFgIZAKDaahLIbrzxRqVSKb3hDW/ITVXcu3evJCkcDmvnzp3q6+uTZyptrUr09fWpr6+vquMFALSu6VTI2BgaAFBtNQlku3fvVigU0vnnn1/22A9/+EP98Ic/1He/+12tXbu2FpcHAGDKphOyaOoBAKi2mgSys88+Wxs3biw6Njw8rK997Ws644wz9PrXv16LFi2qxaUBAJgWmnoAAOw0o0B28803KxwO57od3nfffdqzZ48kM4ytW7dO69atKzrHmrq4YsWKsrAGAIBdphvIDGNqbfIBAJiKGQWym266Sbt27crdv/fee3XvvfdKkk499VR1dHRUZ3QAANRQNmtOWZzqkuZ02ny+31/bcQEAWseMAtmPf/zjaZ+zaNGiXGgDAKAexONmKJuqTEaKRglkAIDqcdo9AAAA7BKLmSFrOkZHazMWAEBrIpABAFpWKDS953s80tBQbcYCAGhNBDIAQMsaHp76+jFJcrulkZGaDQcA0IIIZACAljU6aoasqXI4aH0PAKguAhkAoGXFYtNvYU8gAwBUE4EMANCyEonpnxOLVX8cAIDWRSADALSsmQQyKmQAgGoikAEAWtZMAtlMzgEAYDwEMgBAy6JCBgCwG4EMANCyZhKuWEMGAKgmAhkAoGXNJJDF45JhVH8sAIDWRCADALSsmUxZzGSYtggAqB4CGQCgJRnGzANZNFr98QAAWhOBDADQkpJJKZ2e/nkOhzQyUvXhAABaFIEMANCSYjGz2jVdHo80NFT98QAAWhOBDADQkiKRmTXncLmksbHqjwcA0JoIZACAljQ8LLnd0z/P4aD1PQCgeghkAICWNDJiTj+cCbosAgCqhUAGAGhJkYjknOFPQQIZAKBaCGQAgJY0k5b3FgIZAKBaCGQAgJZEIAMA1AMCGQCgJc0mkNHUAwBQLQQyAEBLmk2ViwoZAKBaCGQAgJY0mwpZIiFls9UbCwCgdRHIAAAtaTaBLJ2mSgYAqA4CGQCgJc0mUGWzUjRavbEAAFoXgQwA0JJmUyFzOMyNpQEAmC0CGQCg5aRS5tdMeTzS0FD1xgMAaF0EMgBAy4nFZteUw+WSxsaqNx4AQOsikAEAWk40KmUyMz/f4aCpBwCgOghkAICWMzpqVrlmg0AGAKgGAhkAoOUMD5vrwGYjFqvOWAAArY1ABgBoOaGQ5JzlT0AqZACAaiCQAQBaTjJprgObDQIZAKAaCGQAgJZTjTBFIAMAVAOBDADQcmazKbSFQAYAqAYCGQCg5VQjkCUSs9vLDAAAiUAGAGhB1ahuZTJ0WgQAzB6BDADQcqoRyNJpc4NpAABmg0AGAGg5U5myaBiGnnjiev3nf+6v7373WKVSxenL5ZJGRmozPgBA63DbPQAAAObaZIFseHibfv7zj+r5538tl8snj6ddu3Y9pqVLj8s9x+ORhoZqPFAAQNMjkAEAWkomYwYyr7f8sWw2rQceuEJ33/0FpdPmAjGXy6PTTruiKIxJ5sbSY2NzMWIAQDMjkAEAWko8Xrk74o4dj+j22y/Srl2P5Y4Fg0v0pjddrZUrTyp7vsNBUw8AwOwRyAAALSUWKw5kyWREd931D3rooStlGNYDDr3udZfoDW+4XD5f57ivxV5kAIDZIpABAFrK6KhZ3bL89Kfv15YtN+fuL1hwiN7ylu9oyZKjJ32tauxnBgBobQQyAEBLGRmR3AU//V566fe5229845d17LGflsvlkSQZRlY//en7FYnsUWfnEp111neLXosKGQBgtghkAICWMjpaHMguueRZxWKDisWGtGjRa4qe63A4tXXrbUokxtTbu67stVhDBgCYLQIZAKClxOPFUxZ9vk75fJ3q7l5R8fmBwAIlEmOKRPZUfC0AAGaDjaEBAC1luuu+AoEFkqR4fFiZTLLoMQIZAGC2CGQAgJYy00AmSZHI3rLXqtRCHwCAqWLKIgCgpRRWtfbufUpPPvkTtbf3avnyE9Tff0jZ89vbCwPZHgWD++XuZzLmOrJAoKZDBgA0MQIZAKClFAaynTv/pHvu+SdJ0umnX1kxkBVXyIrXkaXTUjRKIAMAzBxTFgEALSVZsAwsGh3M3W5v76v4/I6O/tzt0kDmdktDQ9UdHwCgtRDIAAAtpbBCFo3uy91ua+ut+PyJKmQeD4EMADA7BDIAQEspbOoRixVWyKYfyJxOKRyu7vgAAK2FNWQAgJZhGGYgszaGLg5klacszpu3Sq997UcUCCzQ8uXHFz3mcLA5NABgdghkAICWEY+bnRGtQDaVKYtdXcv05jd/a9zXJJABAGaDKYsAgJYRi5mBzGI19XA6PfJ6O2b0mtPd1wwAgEIEMgBAy4hEiu9bUxbb2/vkcDhm9JqFTUIAAJguAhkAoGUMD+enK0r5KYvjNfQolErFNDIyIMMwio4TyAAAs8EaMgBAyxgZyQeyTCalpUs3KBrdp97e/Sc874Yb3qJnnvmZJOlv/3ZUPl8w9xiBDAAwGwQyAEDLiMXMVvWS5HJ5dP75v53SeYUBLBLZU3Sfph4AgNlgyiIAoGXMtAFHe3t+L7JweHfRY8mklM3OZlQAgFZGIAMAtIyZTi+caHPobNYMZQAAzASBDADQMmZaISOQAQBqhUAGAGgZhRWyxx+/Ttdcc4T++79P1osv3jPheR0d/bnblQIZe5EBAGaKQAYAaBmFgWx4+AXt2vWYXnjhTiWToQnPm6hC5nDQ2AMAMHMEMgBAyyisZFl7kElSW9vE+5AVBrJotDiQuVxSOFyd8QEAWg+BDADQMgoDWSw2mLs92cbQ7e3zc7dLuyy6XFIkUp3xAQBaD4EMANASDKN4ymJxIOub8FyvNyCPJyCpfMoigQwAMBtsDA0AaAmplJROmwFKyk9ZdDic8vu7Jz3/3e/+mXy+oAKB/qLjDgdNPQAAM0cgAwC0hFiseAPnaNSskPn98+RwTD5hZMWKE8d9LJWa7egAAK2KKYsAgJYQjRYHMmvK4mTTFaeCQAYAmCkCGQCgJQwPS+5X54VkMkklEmOSJm/oMRXp9KxfAgDQopiyCABoCSMj+UAWiw3ljk/W8t4yNPS8dux4WJHIHq1Zc4Z6e9fmHksmqzlSAEArIZABAFpCJJJv6OHxtOv007+hWGxQPT1rpnT+M8/8TL/61SckSW97W09RIGPKIgBgpghkAICWUNjy3ucL6uijL5nW+YWbQ5e2vieQAQBmijVkAICWMNvW9BMFMtaQAQBmikAGAGgJs13n1dGR33+sNJCxDxkAYKaYsggAaAmFgSwc3q10Oq729l55PAE5HI5Jz2fKIgCgFghkAICWUDit8P77v6oHHvi6JOmCC+7V8uUbJz3f7MbokGQQyAAAVcOURQBASygMTdHovtztqe5D5nS6cptIRyK7x31tAACmg0AGAGgJhaEpFhvM3Z7qPmRSftpiJLJHhmEUvXbBXQAApoxABgBoCcUVssJA1jPl17Aae6TTcSWT4dzxbJZOiwCAmWENGQCgJVSqkPl8XXK5PFN+jWBwiYLBJQoEFiiZDMvn65RkBrJEQvJM/aUAAJBEIAMAtIhKa8imun7M8ta3/qDi8Uxm9m31AQCtadqBLBqN6sYbb9RTTz2lLVu2KBQK6XOf+5zOOOOM3HOy2ax+9atf6Z577tGzzz6rUCikRYsW6Q1veIPOO+88+Xy+qn4TAABMJpWSnE4pm80oFhuWNL31YxMxDPYiAwDMzLTXkI2Ojmrz5s0aGBjQmjVrKj4nHo/ry1/+skZHR3XWWWfpkksu0fr16/X9739fn/nMZ4oWQgMAUGuZTH6NVzw+Isn8OWR1TZwtt1sKhyd/HgAApaZdIevt7dUtt9yi3t5ePf300/rQhz5U9hyPx6Orr75ahxxySO7YW97yFi1cuFDf+9739Mc//lFHHnnk7EYOAMAUJZP5LogzaXk/GZeLQAYAmJlpV8i8Xq96eyf+AebxeIrCmGXjRnPjzYGBgeleFgCAGUsmzcYb0sxb3kvSyMiA/ud/ztMPfvAG/f73/5Y77nJJkUhVhgoAaDFz2tRjaGhIktTV1TXj19i3b58GBwcrPkbQAwBUkkya0xYlafHio/SJTwwoGh2U3989rdcxjIyefPImSfk9ySTJ4ZBisWqNFgDQSuY0kN1www0KBAI6+uijZ/wat912mzZv3ly9QQEAml40ajb0kCSXy6OurmXq6lo27dcpDGGRyJ7cbYejuIsjAABTNWeB7Ic//KEeeeQRfepTn1JnZ+eMX2fTpk3asGFDxccGBgZ0+eWXz/i1AQDNKRIxpxXOlscTkNvdpnQ6VhTIJDaGBgDMzJwEsjvvvFPXXnutzjzzTL31rW+d1Wv19fWpr686XbEAAK2hWoHM4XAoEFig0dEBRSK7ix5jHzIAwEzUPJA9/PDD+tKXvqRjjz1Wn/70p2t9OQAAyhQGsqefvlWjowNqa+vVunWb5PNNb9aGFcii0UFls2k5neaPUqYsAgBmoqaB7KmnntLnP/95rVu3Tv/8z/8st3tOl6wBACDJrF45HObtP//5B3r66VskSZ/85MszCmQmQ9HooDo6+iURyAAAMzPttvdT9eKLL+qzn/2sFi5cqK985Svy+Xy1uhQAABMqDEuz3YcsEOjP3S5cR8aURQDATMyoZHXzzTcrHA7n2s/fd9992rPH/KF09tlny+l06rLLLlMoFNJ5552nBx54oOj8xYsX6+CDD57l0AEAmJrCQGbtQ+bxtMvt9k/7tcbrtEhTDwDATMwokN10003atWtX7v69996re++9V5J06qmnSlIuoF1zzTVl559++ukEMgDAnCmukJmBrL19Zg2ixgtkTFkEAMzEjALZj3/840mfYwU0AADsZk0nNAwjVyFra5v+dEVJWrz4SB111McUCCzQggX5DxcJZACAmaDLBgCg6VlhKZEYUzZrzi2cyfoxSVq+fKOWL9847jUAAJiOmjX1AACgXljru6zqmDTzKYvjIZABAGaCQAYAaHpWWCrssDjTKYvjocsiAGAmCGQAgKaXD2T5CtlsAplhGEokQhobeyV3LJMxvwAAmA7WkAEAmp4VyFwujxYuPEKx2KA6OxfP+PX+4z+Wa2xsu7q7V+rSS7dJkrJZs0rW1laNEQMAWgWBDADQ9KxAtmrVyfrwh/8069fz+TolFbe9J5ABAGaCKYsAgKZX7YYb1l5kqVREyWREkhnIEonqXgcA0PwIZACAplerQCblq2QOhxSJVPc6AIDmRyADADS1TCbf9r5a2tvLA5nLRSADAEwfa8gAAE0tmZQMw7x9++0f0tDQc2pv79Xb3/4juVzeGb1mR0d/7rYVyNxuAhkAYPoIZACAppZMmuu7JOmVV/6g3bv/LKfTI6fTM+PXrDRl0emUotFZDRUA0IKYsggAaGqFgSwWM/cha2/vlcPhmPFrjreGjM2hAQDTRSADADS1aNQMS+ZtM5DNZlNoqTSQ7c7drnbzEABA8yOQAQCaWiRiNtxIpaJKp2OSpPb2vlm9ZqUKmUSFDAAwfawhAwA0tXDY6oA4mDvW3j67ClkwuFTvfe+vFQgsUDC4X+44FTIAwHQRyAAATc2qkFnrx6TpTVnMZqV4XGpvzx9zu31avfqUsucSyAAA08WURQBAU0ulzDVk1voxaepTFg1D6uyUVq+e+rUAAJgOAhkAoKlZISka3Zc7NtUKmccjfehDUnf39K4FAMBUMWURANDUrJBUOGVxqmvILrxQ6uoqnq5o2bnzT9q79ylFInv0mtdcJJ+vk6YeAIBpI5ABAJqaFZL22+91OvHEf1Y0Oqj+/kMnPCeTkd7zHmm/V/t1dHSY0xcLty77wx/+U489tlmStHr1aVqw4CCl0zX4BgAATY1ABgBoalaFbPHiI7V48ZGTPj+dljZtkg44IH9s/nwz2Pl8+WPt7aWt7w9iyiIAYNpYQwYAaGrTqVqlUtKJJ0qve13x8QULyl+n0l5kBDIAwHQRyAAATW2qISmVkg4/XDr55PLHgkHJXTKnpFIgYw0ZAGC6CGQAgKZmBbJQaIcSiTEZhlH2nExGWrVKOuecyq/h80leb/Gxjo7+3O1IZHfuWhVeHgCAcbGGDADQ1KxA9r3vvV4jIy+oo2ORPv3pHUXPicels84qbtpRyOGQAgEpGs0fq1QhM4zytWYAAEyEChkAoKmV7kPm8wXLnuN2m50UJ1La+r44kJkVsmyWaYsAgOkhkAEAmloyKWUySSWTIUmV9yBzuyevagUCxff9/nm52/H4qCRz6iOBDAAwHQQyAEBTS6elWGwod7+9va/sOe3t409XLHxOIbfbL6fTnPmfSIzljsfjMx8rAKD1sIYMANDUUqn8dEVJamsrr5C1tU3+OqUVMofDoa6u5TKMjDo7F0uSXC4pHJ7VcAEALYZABgBoWpmMWSGLRgdzxyoFstLqVyWdneYaMWfB3JKPf/y5oucQyAAA08WURQBA00omzc6HsVg+kFWasjiVCtnChZOvD3O5pEhkuqMEALQyAhkAoGklk2ZVq3DKYqWmHlMJZH195mtNxOmUEonpjhIA0MoIZACAppUPZNWZsuiewkR/q80+AABTwRoyAEDTikbN7okTTVnMZqcWyLxeszW+YeSPPfzwt7Rt22+UTIb01rf+QJ2diwlkAIBpIZABAJpWOGyu69q48e902GHnKxodVH//oUXPSaWk+fOn9nqBQHHTjl27HtXTT98iyZwWSSADAEwXgQwA0LQiETOQ+Xw9amvrqficdNpcHzYVpYHM6+3M3bb2IiOQAQCmgzVkAICmZQWyibhcUkfH1F6vdGqjzxfM3U4kQpIIZACA6SGQAQCaViplriGbiNs9tS6LUvnm0D5feYVsstb4AAAUYsoiAKBpWdWqhx/+przeDnV1LdOKFScWPaetrXiz54mUB7LCChlTFgEA00cgAwA0LbPtfUa/+MXFkgwtXnyULrroD0XPmWp1TJK6uqRMJj8NkkAGAJgtpiwCAJpWKiXF48OSzF71M90U2tLfXzwlsbCpRzIZevXPGQ0VANCiCGQAgKaVShVvCl26B5k0vUDWW5LnqJABAGaLQAYAaFrpdPGm0G1t5RWyqWwKbenoMJuAWAhkAIDZYg0ZAKBppVJSLDacu+/3zyt7znQqZFZHxnTavN/R0a/DD/+AfL5OLVlyrCTzMcOYvLsjAAASgQwA0MRSqfzaLqm4oiWZwam0c+Jk2tulMbMYpkBggc4667tFj6fTZuMPNz9hAQBTwJRFAEDTSqXyUwml8kCWSkk9PdN7zckCXDZLYw8AwNQRyAAATSuZlBKJ8StkqZQ0f/70XnOyQGYYBDIAwNQRyAAATSudLq2QdRY97nRKwWDpWROrtObMMAylUjFJ5nTFRGLaQwUAtChmuAMAmlYqJXm9HeruXqFEYkw+X1fR4y7X9LosSuUVsm9/+7Xatesx+f3d+sxnBuVySeGwuWcZAACTIZABAJpWMilt2PA32rDhbyo+3tZmhrLpmDfPrLwVNu0wjKwSiTEZhiGXy6FIZBaDBgC0FKYsAgCaUiZjfk1kOi3vLQsXFq8Rs9alZbNppdPxXIUMAICpIJABAJpSMmk22JjIdKcrSmaFrHCPMa83vy4tkRiT0ynFYtN/XQBAayKQAQCaUjJptqCfyEwqZIFA8XTFws6NyWRIDgddFgEAU8caMgBAU7IC2e23f1ix2D61t8/Xm9/8X0XPmUkgsxqBpFLm/cJAZnV0tB4DAGAyVMgAAE0pEjGnFj7//K+0Zcv/6umnbyl7zkymLJaeVzplUTKbfgAAMBUEMgBAU4pEzGpWMmluDF26KbRhzKxCJhW3vqdCBgCYDQIZAKAphcOS02nkQlJhJUsyq1jz5s3stQsrZMWBzAx/BDIAwFQRyAAATcnsdJhQNmvOHyytkKVS0vz5M3ttKmQAgGqhqQcAoCklk1IyOZa77/N1lj2nq2tmrx0ImFMeHQ5p5cqTdN55t8rnC6qv7wBJBDIAwNQRyAAATSmZzE8hlMorZG53caVrOnp7zSmPHo/U1bVMXV3Lih5PJGb2ugCA1sOURQBAU0ql8lMIpfI1ZD6fGahmYuHCifcao0IGAJgqAhkAoCmlUvkOi1J5hWymHRYlc6qjyzX+47S9BwBMFVMWAQBNKZ2euEI2m0DW3m5OeZSkTCal7dvvVzIZks/XpeXLN1IhAwBMGYEMANCUUilzfdfRR1+qRGJMixa9pujx2QQyp9MMZcmklE7H9YMfnChJWrXqZL3vfb+ZcDojAACFCGQAgKaUSkn9/Yfq9NP/o+LjhXuJzUQgYAYyrzcgySEpv+dZOi1ls2ZwAwBgIvyoAAA0pcmmDc6mQiblOzQ6HM5cS30rkBnGxE0/AACwEMgAAE1pskA02wpZ4fnW+jQrkGUyBDIAwNQQyAAATSmdNhtuGIZR9lgmIwWDFU6ahsI9zKwOjta+Z9ksgQwAMDWsIQMANKVUSvrZzz6iP/95s3y+oP7qrx5UX986SWZY6uub3esHAubURIcjH8iSyZAMIyuHw6lYbLbfAQCgFVAhAwA0pWRSSibHZBhZxeMj8njyi8ayWamnZ3av39eXX6dWuMdZMhmWyyWFw7N7fQBAayCQAQCaUiqVn0IoFYcmt1vq6Jjd6y9cWBjI8nucJRJjBDIAwJQRyAAATSeTMb+KN4buKLhtfs1GMCi5XObtwrCXSITkckmRyOxeHwDQGlhDBgBoOsmk1XrerJB5PO1yOvM/8trazLVfs9HWlg91Xm9QkkM+X6fS6ZgcDpp6AACmhkAGAGg6yaS5TsyqkFlt6S2zbXkvmYEuEJBiMenUU7+m00+/Qg5HfuLJZPugAQAgMWURANCEEgkrkJkVssIphdLsN4W2WMHO5fIUhTGJChkAYGoIZACAphONSpKRq5AVNt2Qqh/IKqFCBgCYCgIZAKDphMOSYcRlGBlJtauQFW4OXYpABgCYCtaQAQCaTiQipdP5Dou1nrI4OPiMHn74W0omQ1qz5gwdeODZBDIAwJQQyAAATScWkwKBbp1//v8pkRhTe3tf7rFs1mxZXw2dnWY3x1Bopx566D8kSW1tPQQyAMCUEcgAAE0nkZA8Hp9Wrjyp7LFkUurrq3DSDMyfb75e6T5kkpROV+caAIDmxhoyAEDTmag6lclIPT3Vuc6CBWbwKgxkyeTYpGMAAMBChQwA0HQmCkNut9TRUZ3rBIPm60n5Lo5WZ0fa3gMApoJABgBoOum0NDLyovbs+Yu83k7Nn79egcACSWaAqlZTD59P8noll6twyiIVMgDA1DFlEQDQdFIp6bnnfqkbbniLfvCDE/Xss7/IPdbWJjkc1bmOw2G2vne5fHI6PZLya8iokAEApoJABgBoOslkvlIlSV5vfkphtapjlvZ2yeFw5NaRWddNp80OjAAATIRABgBoOul0vlIlFTfdqHYgszaH9vnM0GcFskyGTosAgMlNew1ZNBrVjTfeqKeeekpbtmxRKBTS5z73OZ1xxhllz33xxRd11VVX6YknnpDb7daxxx6riy++WN3d3dUYOwAAFZVWyKywJOU3c64W6/Ws0JdMmkEwmzXH4fFU93oAgOYy7UA2OjqqzZs3q7+/X2vWrNGjjz5a8Xl79uzRJZdcoo6ODl100UWKxWK68cYbtW3bNl1zzTXy8BMKAFAj6XQ+GEm1rZBZHRtXrDhJ8+atks8XlGFklc06lUjkK2gAAFQy7UDW29urW265Rb29vXr66af1oQ99qOLzrrvuOsXjcV177bXq7++XJK1fv16f+tSndMcdd2jTpk2zGzkAAONIpcZfQ1btClkgYK4VO/30/yg6bhjmBtUAAExk2mvIvF6vent7J33ePffco+OOOy4XxiTpyCOP1NKlS3XXXXdN97IAAExZKlW5QmYY1a9YBYOV14o5nVI4XN1rAQCaT032Idu7d6+Gh4e1bt26ssfWr1+vBx98cMavvW/fPg0ODlZ8bGBgYMavCwBoHuVdFs15hamU1NNT3WtZgax0Jr7bLUUi1b0WAKD51CSQWYGpUiWtt7dXY2NjSiaT8nq9037t2267TZs3b57tEAEATcycsmhWyDyegJxOlyQzqPX1VfdawaDZwKOUy0UgAwBMriaBLPHqpPlKjTusEJZIJGYUyDZt2qQNGzZUfGxgYECXX375tF8TANA8MhkrIBmSHEUNPdxuM0BVk99vTk985JFrdP/9/0+JxJje9rbrtHr1aYrFqnstAEDzqUkg8/l8kqRUKlX2WDKZLHrOdPX19amv2h9vAgCaRjJpBrK//usnZRhZpVL5VOR2V7+ph89nVsNSqaiGh7dJkuLxYTkcZqUOAICJ1GRjaGuqYqW1XoODgwoGgzOqjgEAMBkrkEmSw+GU15vv4mFVs6rJ6zVfs7ASZ02XJJABACZTk0A2f/58dXd3a+vWrWWPbdmyRWvWrKnFZQEAUCJReU2XVP3qmCQ5HGYoKw5kZkMRAhkAYDI1CWSSdMIJJ+j+++/X7t27c8f++Mc/avv27TrppJNqdVkAQIuLRMyQVEm1N4W2+HyVA9mrs/QBABjXjNaQ3XzzzQqHw7kpiffdd5/27NkjSTr77LPV0dGh9773vbr77rv1iU98Quecc45isZhuuOEGrVq1SmeccUb1vgMAAApEIlI0ukO//e0X5PN1atmy12v9+rdLql0gMytk+c2nqZABAKZqRoHspptu0q5du3L37733Xt17772SpFNPPVUdHR3q7+/XN77xDV111VW65ppr5Ha7deyxx+pjH/sY68cAADUTiUix2E49+ui1kqR0OjFHgSxfIbM2pSaQAQAmM6NA9uMf/3hKz1u5cqW+/vWvz+QSAADMSCwmpVL5TaELK1e1WENmXoMpiwCAmanZGjIAAOyQSEipVCh33wpKhlG7QDZeU490ujbXAwA0DwIZAKCppFL5QCRJXq9ZIUunpXnzanNNn0/yejty91lDBgCYqppsDA0AgF3S6fw+YFK+cpVMSvPn1+aaHo/kdLr1pjddLY+nXcHgEkkEMgDA5AhkAICmUlohs9aQOZ1SMDjeWbPj85l/HnXUX5eNBQCAiTBlEQDQVFKpfJdDKV8hc7mkQKA21/R6zTVqlcYCAMBECGQAgKaSTFZeQ9bWJrlrNC8kEJCy2fLj6bSUydTmmgCA5sCURQBAUxmvQub31+6awaAZvmKxXYpE9iqRGNOSJUcrm3Urmazd/mcAgMZHIAMANJV0Wlq48AitWzesRGJMbW09kmobyLq6zOv+7Gcf0datt0qSPv3pnXK5FhLIAAATIpABAJpKKiUdffTHdfTRHy867vXW7prW2rTCTagTiTH5fAvZHBoAMCHWkAEAmsp4jTRqGch8PnN9mtdbvDm00ylFIrW7LgCg8RHIAABNZbyKVC0Dmd8vORz59WqSuReayyWFw7W7LgCg8RHIAABNxY4Kmctlvn5xIBuTy0WFDAAwMdaQAQCaSjotXXXVaklSf/+hOvfcWyTlN2+uFY+nfA2ZyyVFo7W9LgCgsRHIAABNI5OR0umshodfkGSora0395jHU9tr+3zFFbJkMiSHY/wplAAASExZBAA0kWRSiscjkgxJ+YqVYdS27b1UecqiNP4USgAAJAIZAKCJJBJSPF6+KXQmI3V01PbaBDIAwEwQyAAATcOskI3l7nu9ZoUsnZaCwfHOqg6fL389KR/ImLIIAJgIa8gAAE0jEpFSqcoVsloHMq/XbCLyiU+8JJ+vU16vWZKjQgYAmAiBDADQNCIRKZ0ur5A5nXOzhszt9qmra2nRcQIZAGAiTFkEADQNM5CVV8jmIpCN11afQAYAmAiBDADQNKJRKZXKV8gKA1mt9yEbb+Np1pABACbClEUAQNNIJqVksjCQmVMWPR4zlNWS32+21//Tn76tSGSPXC6vNmz4DBUyAMCECGQAgKaRTkurVp2sTZu+p2QypP32O1pS7atjktTZaV7/3nsv19jYdnV0LNKGDZ+hQgYAmBCBDADQNFIpqa/vAPX1HVB0fLzphNUUDJqBzJomyT5kAICpYA0ZAKBpjBd+5iKQdXZK2Wx+mmQqFVE2myGQAQAmRCADADSN8aYHzkUga2uzmofkNzxLJsNKp8190AAAqIQpiwCAppFKSfv2Pa1MJiWfr1NdXcvkcDjnZA2Z318eyBKJMfn9XUomzcAGAEApAhkAoGmkUtIvfvExvfDC/0mSPve5kLzeDnk8tb+21yu5XJLXWxzIvF4pkSCQAQAqY8oiAKBppNNSImFtDO2QxxOQNDddFh0OM5RZa8gkM5Bls2YgAwCgEgIZAKBppFL57oY+X6ccDoekuVlDZl6zdA1ZSE6nFInMzfUBAI2HQAYAaBrmxtBmhawwGM1VIPN4yteQuVxSKDTBSQCAlsYaMgBA0yiskHm95tRBw5jbClkwuFQLFx4uny8on69LLhcVMgDA+AhkAICmkUxmlUyGJeUrVZmM1NExN9f3+aSDDz5XBx98bu6YYUjR6NxcHwDQeJiyCABoCoYhRSLh3H2ruUY6LQWD451VXZW6OToc429YDQAAgQwA0BQyGSkWyy/WKqyQdXaOd1Z1jdfNkUAGABgPgQwA0BQSCSkWG8vdtwKZwzF3e4CNt1YtmZyb6wMAGg9ryAAATSGRkOLxfCCzmnq4XJLfPzdj8PmkcHiXbr753UokxrR8+Qk67bSvUyEDAIyLQAYAaArxuNTff6Q+85khJZMhuVzm/EGHY242hpasCplLL754lySpo2OhJCpkAIDxEcgAAE0hFJI8Hpf8/nlqa5uXO+7xmFWyuRAISB5P8T5kEmvIAADjYw0ZAKAphMOVg9dc7UEmWd0cfXI6zXaL1ibVBDIAwHgIZACAphAOS+4K8z7mOpBlMvmGIlTIAACTYcoiAKApJBLSiy/+n7Zvv19eb6fWr3+burqWzdn6McmcsmgYZiCLxQZzgYw1ZACA8RDIAABNIZmUnn/+17rvvq9Ikvr7D1VX17KKmzXXit9vTpvMV8jMKYvp9NyNAQDQWJiyCABoCul0PgBJ+VA0lxUyn09yOiWfz2y5n8kklE4nqJABAMZFIAMANIVkUkomCzeGNkPRXK4hc7vN61lh0BxXSKmUOZURAIBSBDIAQFNIJu2vkElmm/3CQJZIhJTJMG0RAFAZa8gAAE3BDGT5CpnXO/cVMskMgOvXn63e3gPk8wXl93cpmzWbjszlejYAQGMgkAEAmkIqld/3y+FwyuNplzT3gczrlQ488BwdeOA5uWORCJ0WAQCVMWURANAUCitkPl9QDodDhmFPhaySWGxuxwEAaAwEMgBAU0il8oHMmq6YzZp7g82lSgHQ5TI3rgYAoBRTFgEATcEMZOaURaupRjotBYMTnVV9Xq9kGFklk2ElEmPyejvkcnUrEpnbcQAAGgOBDADQFJJJQ4sXv1aJxJh6etZIsi+QPfXUzfqf/3mnJOmUU76qY465jAoZAKAiAhkAoCmkUg5dcME9Zcfb2+d2HD5fedt7p9PssggAQCnWkAEAGl46XXmfL7e7HvYhM9e1pVJzOw4AQGMgkAEAGl4iIRlG+XGHQ/L753Ysfr/k9RLIAABTQyADADS8ZFLKZMqPe71mh8O51Nkpud2dufvJ5Nirf87tOAAAjYE1ZACAhhePSy+/fL/uuedSeb2dOuKIv9Khh75HHs/cjyUYlFyu4jVkEhUyAEBlBDIAQMMLhaRYbKd27HhEkrRmzemS5n79mGQGMqczXyGzpixSIQMAVMKURQBAw4tEpHQ6lLtvNdWotElzrbW1SR6PSx6P2d6RNWQAgIkQyAAADS8UklKpsdx9r7fz1T/nfiw+n7luzQqFVMgAABMhkAEAGl48LiWT9VEh8/kkpzM/BmtcVMgAAJWwhgwA0PBSqXwlSpJ8PvsqZA6HuRfZ2WffKIfDURDM5n4sAID6RyADADS8ZLJ+KmTm9aVFi44oOkaFDABQCVMWAQANL5ksrZDZG8gqXZdABgCohEAGAGh46XRxILOzqYdUud1+KiVls3M/FgBAfWPKIgCg4aVS5VMWDcPeCtnu3Y9r164/K5EY0/r1b5PXu1jJpOT32zMmAEB9IpABABpeMikdccQHtXz5iUokxuR2+5XNSu3t9ozH65X+8peb9Pvff0mS1Nd3gBYvJpABAMoRyAAADS+RkA499D1Fx9JpqavLnvH4fPl1bJKUSIwqkzHHCQBAIdaQAQAaXqWGGem01Nk592ORzLb3xYFsTA6HFIvZMx4AQP0ikAEAGt54HQwDgbkdh8Xnk/z+fHkukRiTyyWFQhOcBABoSQQyAEDDi8ezGht7RYlESIZhtjJ0uSp3O5wLpVMW4/FRuVxSJGLPeAAA9Ys1ZACAhheNjumKK5ZIklavPk3vfe8v5XTa10CjvV3yeIqnLBLIAACVUCEDADS0dFqKRAo3hTYXjrnd5pcdOjslt7t4yqLDYXaDBACgEIEMANDQkkkpFssvzvJ6g6/+adeIzO6OLldxl0WJQAYAKEcgAwA0tETCrEBZrAqZnYGsoyMfDKX8+MZrPgIAaF2sIQMANLR4XEok8hUyq5mGXQ09rGu3tQXl93fL5+tSe3ufJAIZAKAcgQwA0NDCYSmVKqyQ2T9l0e+XPB6PPvvZ4aLjTFkEAJRiyiIAoKGFw1I6nQ9kXq/9UxbHayhChQwAUIpABgBoaGaFrL6mLI53fSpkAIBSBDIAQEOLx6Vksryph8dj14iscZQfo0IGACjFGjIAQENLJqVksv4qZF6vdP/9X9PLLz+gRGJM5513q1KpdnsHBQCoOwQyAEBDS6Wk4467TIcc8m4lEmPq7z9Mkr1ryKzrb99+n55++qeSpHh8hEAGAChDIAMANLRkUgoEFigQWJA7Zhj2BzKfL1+tk8y9yFKpxTaOCABQj1hDBgBoaJXWZWWzUrvNxSivV/L5unL3zUBm44AAAHWJQAYAaGiVQk4mI3V2zv1YCpmBLF8hi8dHlUqZYwMAwFLTKYvbt2/Xd7/7XT3xxBMaGxtTf3+/Tj75ZJ133nny+/21vDQAoEWkUtJf/nKjMpmU2tt7tXbtm5ROS8Hg5OfWUqUpi4YhJRL2V+8AAPWjZoFs9+7d+vCHP6yOjg697W1vUzAY1JNPPqnvfe972rp1q7785S/X6tIAgBaSSEi//e3fanR0QIHAAl122W5JUiBg77gqTVnMZMw1bwQyAIClZoHs17/+tcLhsK6++mqtXLlSkrRp0yZls1n96le/UigUUqfd80kAAA0vmTTDjpSvSDmdkt0TMcorZKPKZs0ACQCApWZryCKRiCRp3rx5Rcd7e3vldDrldtPgEQAwe6mUURDIzIqU02n/PmQdHZLbXTxl0eWSwmEbBwUAqDs1S0VHHHGErr/+en3lK1/RBz7wAQWDQf3lL3/RrbfeqrPPPlttbW0zet19+/ZpcHCw4mMDAwOzGTIAoAGFwxEZhtkpw+83A5nbbX7ZKRiUPJ7iKYsEMgBAqZr9uDr66KP1V3/1V7ruuut033335Y6/733v00UXXTTj173tttu0efPmKowQANAMIpGx3G1riqDXKzkcdo3IFAxK7e1LdPjhF8jrDWrZso0EMgBAmZp+frho0SIddthhOuGEExQMBvXAAw/ouuuuU09Pj84+++wZveamTZu0YcOGio8NDAzo8ssvn82QAQANJJORwuHR3H1ryqLdm0JLUlubNG/eCp111vdzxwxDisVsHBQAoO7ULJDdeeed+upXv6of/ehHWrBggSTphBNOkGEYuuaaa3TyySerq6trklcp19fXp76+vmoPFwDQgBIJc38vixXI7F4/JplNRZwlK7UdDrMJCQAAlpo19bjlllu0du3aXBizbNiwQfF4XM8++2ytLg0AaBHJpBSL5QOZtYbM47FrRHk+X3kgk6R0eu7HAgCoXzULZMPDw8pms2XH06/+JMpkMrW6NACgRcTjUjxeeQ2Z3RyO/DgMw1A6HZdEhQwAUKxmgWzp0qV69tlntX379qLjd955p5xOp1avXl2rSwMAWkQ4LLndLnV1LZff3y2/39xqpR4CmWRWya6++kB98Yse/ed/rpUkpVI2DwoAUFdqtobsvPPO00MPPaSLL75Yb3/72xUMBnX//ffroYce0pvf/GbWgQEAZi0Ukg488O067LC3Fx2vhzVkkhkMDSMrw8jk9kqjQgYAKFSzQHb44Yfr6quv1ve//33dcsstGhsb06JFi3TRRRfpXe96V60uCwBoIZGI5HKVH6+HNWSSGcisdW2JREiGkVUqVbPJKQCABlTTtvcHHnigvvrVr9byEgCAFhaLVW6cUS8VMp8vv65NMpRMRpRKddo6JgBAfeFjOgBAwxpvPVa9rCHzegsDmZRIjLGGDABQpKYVMgAAaimZlO6551+0e/ef5fN16bTTrpDX26W2NrtHZioPZKNKJvezcUQAgHpDhQwA0LCSSWlg4F5t2fK/euyx78vhcCqdljrrZFag1yt5vVTIAADjI5ABABpWKmVWnUwOeb0dSqelYHDC0+aMz5dv6iGZgYwuiwCAQgQyAEDDMgOZ2U7e5wvK4XDIMKSODpsH9qpKa8jSackwbBwUAKCuEMgAAA0rlZLicbNCZlWinE7J77dzVHnt7cVTFuPxUWUybA4NAMijqQcAoGElEsUVMsncl6xe2t4Hg9KyZafo3HN/Kp8vqPnz1yubNde+1UsnSACAvQhkAICGFY+nlE7HJEk+n1khc7nqZ2PoYFDq6FipBQtW5o5FImaQrJdplQAAezFlEQDQsEKh0dxta8qizyc5HHaNqNh4oSsen9txAADqF4EMANCwQqGx3G1rymK9VMckcy2bs+QnrcslhcP2jAcAUH+YsggAaFiRSL5CZk1ZrJf1Y5IZyAwjpYGBB5VIjMrn69LixRsVidg9MgBAvSCQAQAaUiYjud3z9LrXfVyJxKiWLj1OUn01y3C7JcOIaPPm4yVJq1efqne/+1cKhWweGACgbhDIAAANKZmUgsEVOuOMK4uO11Mgk6SOjs7c7URiTE6n2BwaAJDDGjIAQENKJMwqWal6C2RtbS55vWZ3D2vPNAIZAMBCIAMANKREQspmy4/X0xoyyQyIVsMRa880NoYGAFgIZACAhhQOSw5HWoZhFB2vpy6LkhXIzIYjViCjQgYAsBDIAAANKRSSfv/7v9cXv+jR//t/vdq+/QFJ9V0hSyZDymYzBDIAQA6BDADQkCIRKZkclWFkFIsNye02k1i9rSHz+fKBTJKSybDSaRsHBACoKwQyAEBDisWkZLJwY+guZbPm3l/1xOuV/P6u3P1EYowKGQAgh0AGAGhIyaSUSOQ3hvb7u5ROS52dE5xkA69X8nrzFbJEYpSmHgCAHAIZAKAhJZP5NvKSOS0wk5GCwQlOskHhlEWvt1OpVIwKGQAgh42hAQANKZXKdy10u/1yubzKZOqvQubzSSef/BWddtrX5XCYn4NSIQMAWAhkAICGVDhl0Wor73bXX5fFjg5J8srhyB8jkAEALExZBAA0pFQqP2XRaprhcNRfU49gUGVdFQlkAAALgQwA0JASiWxuyqK1Rsvtrr+Nobu6pEym+FgqJWWz9owHAFBfmLIIAGhIkUhEkiEpP2XR41HR1MB64PdLo6PP6/e//6YSiTGtXn2K1q59p5LJ+qvmAQDmHoEMANCQDMOv88//PyUSo/L7uyXV3/oxyQxd8fgePfjgv0uSvN4OrVr1TiUSBDIAAIEMANCgMhmPVq48qehYvU1XlMyQ6PcX70OWzYrW9wAASawhAwA0qEqNMeqxQuZ0Sh0dhYFsTA6HFInYOCgAQN0gkAEAGlKlCpPXO/fjmIpgsCt3O5EYk8tFIAMAmJiyCABoONmstG/fgIaHn5DP16W+vnUKBBbU5ZRFSQoEOnK3E4lRuVxSKGTjgAAAdYMKGQCg4SQS0rZtv9YNN7xFmzcfr61bb5NUn1MWJcnvd8rr7ZSUr5DFYjYPCgBQFwhkAICGk0zmN4WW8m3v63XKotnYwxyjtYYskbB5UACAukAgAwA0nERCisfHcvetsFOvgczrzW9ebQXJSk1JAACth0AGAGg4oZCUShVWyMyw0wiBLJWKKJvN0PYeACCJph4AgAYUDkvJZPGUxWxWamuzcVAT8PmkZcuOVyDQL58vqEwmqXS6TgcLAJhTBDIAQMOJRKRksnjKYjotBYMTnGQjr1c65ZSvFB2jQgYAkJiyCABoQJGI2T7e4vMFlU5LXV0TnGSjSlMpWUMGAJAIZACABpRO5ytkDodLHk9AktTZaeeoxtfWZu6dVogKGQBAIpABABpQYdt7ny8oh8Mhp1Py+20e2Dg6O6VMpvgYFTIAgEQgAwA0oGRSMgyz5GS1vK/nQBYMSn/+83X6xjdW66tfna+nnvofAhkAQBJNPQAADSiVkj7+8edkGFmlUlFJktttftWjYFBKpRIaHt4mSYrFhghkAABJVMgAAA3IWn/lcDjl9XZIMlvL1yu/X/L78y0gE4kx1pABACQRyAAADahSdameA5nPJ7W15VtAJhJjVMgAAJIIZACABtRogczjkdra8hWyeHxU6bTZLRIA0NrqdLY9AADj27lzm37+8y/J5+vSqlVv1Nq1b6q411e9cDikjo58IEsmx2QY5tTLel33BgCYG/wYAAA0nN27X9Sjj35XkuRyebV27ZvqukImScFg8ZTFTEZKJKT2dhsHBQCwHVMWAQANJxIZy932+YKv/mnXaKamsEIWj48qm2VzaAAAgQwA0IAikdHcbWsfsnqesihJnZ0BSQ5JZoXM5ZJCIXvHBACwH4EMANBQslkpGm28Cpnf78yN1QpkkYjNgwIA2I41ZACAhpJMmlP+LD5f16t/2jWiqfH5pFNP/ZocDpc6OvrlcknhsN2jAgDYjUAGAGgoiURxIPP7u5TNSm1tNg5qCrxe6TWv+WDuvmFIsZiNAwIA1AWmLAIAGkoiYU75s/h8QaXTUjA4wUl1oHSNm8NBUw8AAIEMANBgIhEpmSyesphOS11dE5xUBypNqWRjaAAAUxYBAA0lFDI3VrZYUxY7Omwc1BR4PFI4vFfR6G7F46NatOgIJZNsQgYArY5ABgBoKOGwtHTpcfJ4PIrHR+X1diqVkvx+u0c2sY4O6c47/06PPXatJOkjH/mzUqlDbR4VAMBuBDIAQEOJRqUTTvi8HI78sUym/gNZV5fk8eQXuiUSY6whAwCwhgwA0FhSKRWFMclsmOFy2TOeqQoGJY8nv9AtkRhTKmXjgAAAdYFABgBoKJVCTGkHw3rU3p7fxFoyW/cTyAAABDIAQEOpFGLqfVNoyZxS6fczZREAUIw1ZACAhjI8PKavfnW1fL4urV59qs4885sNUSHz+cyOkJZEYkyJhI0DAgDUBQIZAKChjI6OKhrdp2h0nyKRPZIao0LmckmBQGGFbJRABgBgyiIAoLGEw8WbQkuNsYZMKg1kZoXMMGwcEADAdgQyAEBDGRsrDGRmwGmUQBYMFk9ZzGZFlQwAWhyBDADQUMLhsdxta01WI0xZlKRgsHjKYiYjxWI2DggAYDvWkAEAGkooVD5lsVECWU9Pvy699AX5fF3y+ToVi0mRiDRvnt0jAwDYhQoZAKChRCL5QNZoFbK2Npe6u1eorW2enE633G5peNjuUQEA7EQgAwA0lGg0P2XR5wsqmzU3XW4EpWvdPB5pZMSWoQAA6gSBDADQMLJZKRotnrKYTktdXROcVEdKK3lOpxSN2jMWAEB9YA0ZAKBhJJNmMwyL399YgczrlZ544gYNDz+vZDKik0/+Ml0WAaDFEcgAAA0jkZAOPPB87bffa5RIjKq7e6UkKRCweWBT5PVKDz98tbZvv0+SdNJJ/6x4vEF69gMAaoJABgBoGMmktGDBUVq16qjcsURC8vttHNQ0+P35zpCSlEiElEz22jgiAIDdWEMGAGgY4bC57qqQ09k4XRY7OyWvt3AvsjHF4zYOCABgOwIZAKBhhMOSu2Ruh8cjuVz2jGe6gkHJ4ykOZKwhA4DWxpRFAEDDCIelPXv+KK/XJ79/noLB/cpaydezzs7SQDZKIAOAFkcgAwA0jGhUuuGG0xWN7lN390pdeum2hpmuKEltbZLfz5RFAEAeUxYBAA0jHjdDjGRuCi2Vb7Zcz/x+s1W/hSmLAAACGQCgYYyNxZXJJCXlg00jVci83vIKWSolpVI2DgoAYCsCGQCgYQwP5zeFttrHN1KFzOGQAoF8IIvHR5XNimmLANDCWEMGAGgYo6NjudtWhaxR9iCzdHf3q7//MPl8QXV2LlImI8ViZsMPAEDrIZABABrG6Gi+Qmbt59VIFTJJ2n//DfrIRx7L3Y/HpZERacEC24YEALARUxYBAA2jUoWskdaQSeXjdbvNQAYAaE0EMgBAwwiHi9eQGUbjVchKA5nLJY2NVX4uAKD5EcgAAA0jFMoHMr+/S9msFAjYOKAZ8HiK7zscovU9ALQw1pABABpCOi1Fo/lSks8XVDotBYMTnFSHfD7puutOVyw2qGBwqc4993/psggALYxABgBoCLGYdNhhf60jjnivEokxtbX1KJ2WuromP7eeeL3Sjh0PKxYbUjw+IokKGQC0spoHsq1bt+r73/++nnjiCSWTSS1evFhvectbdM4559T60gCAJhKNSpJbbW09amvrkWRWzRptyqLXa1b3YrEhJRJmxS+ZtHlQAADb1DSQ/eEPf9DnPvc5rV27Vu9///vV1tamV155RXv37q3lZQEATWhkxGyAUcjtbrx9yHw+M5BJygUypiwCQOuqWSCLRCL60pe+pGOOOUZf/OIX5XTSPwQAMHPDw+UNMZzOxgtk7e35PdTS6bgymaQSiQZrFQkAqJqaBbLf/va3Ghoa0kUXXSSn06lYLCafz0cwAwDMSCgk/fnP31U4vEs+X1BHHvkReb0eNdqPlWAwH8gks0qWSPTZOCIAgJ1qFsgeeeQRBQIB7du3T3//93+v7du3q62tTaeeeqouvvhi+Wa4k+e+ffs0ODhY8bGBgYHZDBkAUMficenRR6/Vyy8/KEk66qi/brg9yCQrkOU7kSQSY4rHCWQA0KpqFshefvllZTIZ/d3f/Z3OPPNMfehDH9Jjjz2mm2++WeFwWF/4whdm9Lq33XabNm/eXN3BAgDqXiIhxePmPmReb4ecTlfZJsuNoKOjUoVMymbVcNU+AMDs1SyQxWIxxeNxnXXWWbr00kslSSeccIJSqZRuu+02feADH9DSpUun/bqbNm3Shg0bKj42MDCgyy+/fFbjBgDUp3g83wTDaorRiIGssKmHZIbMbNYMnG1tNg4MAGCLmgUya0riG9/4xqLjJ598sm677TY9+eSTMwpkfX196utjagcAtBozkJkVMp/PnPLXiFMW/X7J7y+ukKXT5j5rBDIAaD01C2S9vb164YUX1NPTU3R83rx5kqRQKFSrSwMAmlAsllEyGZYk+f1mIGvECpnbLa1ceYIcji/I5wtq/vz1cjikcFgq+ZEJAGgBNQtk69at0yOPPKK9e/dq2bJlueP79u2TJHV3d9fq0gCAJjQ2lv8gr5GnLErS2rUbtWLFxtz9ZNJs61/w4xIA0CJqtnz4pJNOkiT9/Oc/Lzr+85//XC6XS0cccUStLg0AaELDw6O529aUxdJ9yRpF6VRLt9vc+BoA0HpqViHbf//99aY3vUm/+MUvlMlkdPjhh+uxxx7TXXfdpfe+972sAwMATJlhSKHQWO6+FcgatULm9UqRSP6+02muIQMAtJ6aBTJJuuyyy9Tf36877rhDv/vd79Tf36+LL75Y73znO2t5WQBAk0mnpWi0sEIWlGE0ZlMPyRx3KhVTLGbuqxkMLlEiYfOgAAC2qGkgc7vduvDCC3XhhRfW8jIAgCYXjUoOh1/Llm1UIjGq7u4VymbNPb0aUTT6ir70pSWSpAMOeJvOPfd/FY/bPCgAgC1qGsgAAKiGaFTq7z9SF154b+5YIiF1ddk4qFmYN683dzsaNZtdUSEDgNZUs6YeAABUy/Cw2fiiUDrduIGso8Mvj6ddknLTFglkANCaCGQAgLpXKZA5HFJ7uz3jmS2fT2prM6tk0SiBDABaGYEMAFD3IhHJ5So+5nJJfr8945ktr1dqbze7DcdigzIMg0AGAC2KNWQAgLoXj0v33PNFPfPMbfL5gnrzm69RZ+eahm17X1ghy2bTSiTGFI836PxLAMCsEMgAAHUvHpeGhp7Rjh2PSJIMIyuv19y/qxF1duYDmWRWybzeLhmGORUTANA6GvRHGQCglSQSUiJRuDF0sGGrY5IUDEp+f1/ufjQ6qHTabFQCAGgtBDIAQN1LJKR4vHBj6K6G3RRaMgOZz1fc+j6TkWIxGwcFALAFgQwAUPdiMSmRMAOZ0+mR2+1v6EDW1lY+ZTGTMfdbAwC0FtaQAQDqXuGURZ8vKIfD0dBTFn0+6cAD36HVqzeovb1XHR0LlU5LIyPSwoV2jw4AMJcIZACAulc4ZdHvN7sRNnogCwYXyeNZlDvmcJiBDADQWpiyCACoa4YhxWJGbsqiz9f4gczpVNmUS6dTCoXsGQ8AwD4EMgBAXUsmpXg8rmzWbEFoVcgaeQ2ZVD5+h0NsDg0ALYgpiwCAuhaLSZHIUO6+398tqbErZJLk8WT1xz/+WNHoPvl8QR122PkEMgBoQQQyAEBdC4Uktzug00+/UpHIXvX1rZNhNH4g83oduuWW85XNptTff5gOO+x8xeN2jwoAMNcIZACAujY8LHV2duvooz+eO5bJSB0dNg6qCvx+h9rbexUO71I0uk8SUxYBoBWxhgwAUNdGRiR3yceH6bTU1WXLcKrG683vRRaLDUoikAFAKyKQAQDqWjRqdiAslE5LwaA946kWn09qb++TJKXTcaVSUQIZALQgAhkAoK4lElIotFOjo9uVTpuLrJxOqb3d5oHNktcrtbf35u5Ho4MEMgBoQawhAwDUtXhcuvvuf9Kf/vRtSdKHPvQn9fQcIb/f5oHNUuGURcmcthiPL7VxRAAAO1AhAwDUtXhcikb35u63t/fJ6Wz8LouFUxYlKRrdp2RSymZtHBQAYM4RyAAAdS2RKA5kgcB8eb3mRsqNzO+X/P7iKYuZjGh9DwAthkAGAKhriYQUiZiBzOvtkNvtb/jqmGQ2JfH5iqcsZjLmRtgAgNbBGjIAQF2LxfIVsvb2+ZLM9VeNrqtLamtbqGBwidraeuX1dsrhkMbGpN7eyc8HADQHAhkAoK5Fo2nFYkOSzOmKkhq+oYdkbmy9YsXp+uQnt+eOpVLmvmsAgNbBlEUAQN0yDGlkZDB3v5kqZH5/+f5qbrc0OmrPeAAA9iCQAQDqVjwuhcPFDT2kxu+wKJmBzOUqPuZwsIYMAFoNgQwAULdiMSkUKmx53zwVMre7PJBJYnNoAGgxrCEDANStUEiKxcoDWTNUyBwOM1j+9Kcf1vDw83K7/Xr3u39GIAOAFkMgAwDUraEh6cAD36rVqwcUiexVR8dCSc1RIZPMYDkwcI8GB7fK5wtKYh8yAGg1BDIAQN0aHZV8Pq/8/mXq6lomyWz00QwVMskMlu3tvRoclBKJMWUySSUSTZI2AQBTwhoyAEDdikbNqX2FMhmzZXwz8PmktrbCzaGHmLIIAC2GQAYAqFuVwkk6LXV3z/lQasLjMStklmh0kCmLANBimLIIAKhbiYT06KPfVzIZViAwXwcd9E5lMk4Fg3aPrDrMCllf7n4sNqhk0sYBAQDmHIEMAFC34nHpwQf/XXv2/EVut18HHXSunE6prc3ukVWHtYbMEo3uUzxurpMrnaoJAGhOTFkEANSteFyKRMy29+3t8+VwOORyNU8ga2srXkMWjQ4qkxFVMgBoIQQyAEDdisWyikb3SZICAXMPMqezedrelwayWMwMZKwjA4DWQSADANSt0dERGUZGUvGm0M0yna+7W/L5iitk2azZXRIA0BpYQwYAqFuDg3tzt60KWbNUxySpr08KBFbpqKMuVnt7r5Yte73cbml4WFq0yO7RAQDmAoEMAFCXsllpdDQfyAorZM2iu1sKBpfqTW/6z9yxTEYaGbFtSACAOcaURQBAXYrFpHC4uQNZICC5XMXHXC4pHLZnPACAuUcgAwDUpVgs32FRyk9Z9HjsGlH1eTyVp2BW2hAbANCcCGQAgLo0OirFYvty95uxQuZwSH6/ZBiGksmIxsZelkQgA4BWwhoyAEBdGhmRAoEeLVx4uCKRvero6JfUXE09JLP1/be+tVHbt98nh8Opz38+qXjcNfmJAICmQCADANSl0VHpda/7iI4++iNFx5upQiaZgczn65QkGUZW8fiIEoneSc4CADQLpiwCAOpSLFZ5v7FmrJCVbg7NlEUAaB0EMgBAXYrHy48Zhrnmqpm0tUnt7X25+9HoYMXvHQDQnAhkAIC6VKlKlMlInZ1zP5ZaKq2QRaP7qJABQAthDRkAoC7F44a+/e2j5Pd3a/HiI3Xyyf+mdFoKBu0eWXW1tzNlEQBaGYEMAFCXRkfD2rnzj6/eMyRJ6bTU1WXfmGph3jzJ5yuesphKmdXA0k2jAQDNhymLAIC6NDiY3xTa2oPM5TKn+DWTvj7J4ymespjJmE1NAADNj0AGAKhLQ0PlgczpbL6mHsGg1N5ePGUxk6nc1AQA0HwIZACAujQykg9kgYAZyNzu5mt7394udXTkpyzGYoNyOs192AAAzY81ZACAupPJSGNj5RWytrbKe5M1Mo9H6unp1/ve9xu1tfWqs3OR3G5pZMTukQEA5gKBDABQd2IxKRIpDGR9r/5p14hqq6PDo1WrTs7dNwwqZADQKpiyCACoO9GoFA6XT1kMBOwaUW2VrotzOFhDBgCtgkAGAKg7IyNSPF55ymIzqvR9EcgAoDUwZREAUHeGh6VYrLxC1qxTFtvapFdeeViDg88oFhvUa15zkZLJJk2fAIAiBDIAQN0ZG5OOOOJCLVlylCKRvWprM9vCN3Mge+CBr+nJJ38sSdp//7coHl9p86gAAHOBQAYAqDuJhHTQQedIOid3LJORurrsG1MttbUpFzols/V9IkEgA4BWwBoyAEDdqbR+KpmU+vvnfixzob1damvL70UWjQ4qkbBxQACAOUMgAwDUnUqBzDCkefPmfixzobdX8nrzFbJodB9NPQCgRRDIAAB1JxxOaHj4BSWTYRmGIUlyu6WODpsHViO9vZLPVzpl0cYBAQDmDGvIAAB158UX/6JvfONISdJRR31Mb3rTVfL5JI/H5oHVSGen1N5eWCEzA5lhmHuSAQCaFxUyAEDdGRrKt7z3+815is3aYVEyv7dAIL+GLBYbVDYrqmQA0AIIZACAujM8XL4HWSBg12hqz+WSuruL15BlMlIsZuOgAABzgkAGAKg7o6P5QNbe3tybQlt6eorXkGWzUjhs44AAAHOCQAYAqCuplBQOl1fI2trsGtHcmDcvKL+/W11dy9TePl8+n7Rzp92jAgDUGk09AAB1JRYrDmStUiFra3Pos58dLjo2NGTTYAAAc4YKGQCgrkSj5hoqSyAwX4ZhdiJsZpUqgExZBIDmRyADANSV4WEpHi+skPUplTL36mpmBDIAaE0EMgBAXRkelmIxM5D5fF1yubxKpaQFC2weWI0RyACgNbGGDABQV8JhKRo1A5nV0MPlav4pix0d0p///CM988ytikb36cwzv6W2tnV2DwsAUGMEMgBAXYnHpY9+9C+KRvcqk0lKkjye5u+y2Ncn7dz5hJ566ieSpFDoFYXD65TNSk7mswBA0yKQAQDqSiIhBYP7KRjcL3esvV1yOGwc1Bzo6ZF8vsLNoQeVSkmRSPNXBwGglfGZGwCgriQS5ceaveW9ZE5ZDAT6cvetzaEHB20cFACg5ghkAIC6Eo+XH2uFQNbWJgUChRWyffL5pB07bBwUAKDmmLIIAKgrzz//uB599P/U3j5fy5ZtUHf3iqZfPyaZ68S6u4unLLpc0siIfWMCANQegQwAUFf+8pd79KtffVKS9Na3/kDd3StaokImST09xVMWJSkUsms0AIC5wJRFAEDdyGSk4eHCTaHNtveBgF0jmlu9vcVTFiWzqQcAoHkRyAAAdWNsTIpE8oEsEJivdFrq6rJxUHOot3eeJLOdpFUhY3NoAGhuBDIAQN3YuVOKxYorZMmk1N9v46DmUHu7S21t8ySZa8gkAhkANDvWkAEA6saOHcWBLBCYr1RKmjfPxkHNobY26bDDLlA2m1YwuESSOWUxk5FcLpsHBwCoCQIZAKBujI1J0agZyDyednk87TIMc4+uVtDWJp122teLjqXTZmOP7m57xgQAqC2mLAIA6kYolA9kVkMPv19yt8jHh8GgWQ0rtXdv+TEAQHOYs0D23//93zr++OP1/ve/f64uCQBoMKOjmdzaqUDADGSt0vJeknp7pWSy+JjPZ66tAwA0pzkJZHv27NF1112ntlbY2RMAMGO7dw9JMiTlK2StFMh6eiTDkAzDUCIxpnQ6IadTGh21e2QAgFqZk0kg3/zmN3XggQcqm81qlJ8qAIAKMhlpbCyuxYuPVCSyV11dyyS1ViALBKRHH/2G/u//LlM2m9I73/m/Wr/+bexFBgBNrOaB7LHHHtM999yja6+9VldeeWWtLwcAaFBjY1J7+1JddNHDRcdbKZD5/ZLX61c2m5LEXmQA0ApqOmUxk8noyiuv1JlnnqnVq1fX8lIAgAa3c6fkrPBTqZUCmcMhdXX15u6zFxkANL+aVshuvfVW7d69W1dccUXVXnPfvn0aHBys+NjAwEDVrgMAmFs7dkheb/GxVmp5b+nuzgcyKmQA0PxqFshGR0f1ve99T+eff766q7h5ym233abNmzdX7fUAAPVhbMysEBVKJqW+PnvGY5fe3vw3HI3ukyTFYlIqJXk8do0KAFArNQtk1157rTo7O3X22WdX9XU3bdqkDRs2VHxsYGBAl19+eVWvBwCYG6GQ9LvffVnPP/8rBQLzdcopX5XHs0Lz59s9srnV21teIUsmzcBa8BAAoEnUJJBt375dt99+uy655BLt27cvdzyZTCqdTmvnzp0KBAIKBoPTfu2+vj71tdrHpQDQAkIhaffuP2tg4B5J0hvf+G9yu6XOTpsHNsfmzy9fQ+Z2S3v2EMgAoBnVJJDt27dP2WxWV155ZcXOiueee67OOeccffzjH6/F5QEADSgUkqLRvbn7gcB8eTxSq21h2dnpldfboWQynKuQeb1m05P1620eHACg6moSyFauXKl//dd/LTt+7bXXKhqN6uMf/7gWL15ci0sDABpQJmM2rohEzEDmcnnl9XbK7y9fV9bs2tqk9vY+JZNhhcO7JZl/BzT2AIDmVJNA1t3drY0bN5Yd/8lPfiJJFR8DALSusTEpnc43sWhvny+Hw9FSLe8t3d1SV9cKjYy8qHh8WPH4iPz+boVCdo8MAFALNd8YGgCAyezcKTkcRi6QBQJmJ49WDGR9fdIxx3xBGzf+nXp61sjnM9dbRyI2DwwAUBNzGsi+8Y1vzOXlAAANYscOyTBGlc2mJJkVMvNPO0dlj64uadmyE8u+d6YsAkBzcto9AAAAxsbKG3pIrRnIAgGzq2IpAhkANCcCGQDAdqUdFtvb58swWjOQeb2VA1ksJiUScz8eAEBtsYYMAGC7UCjfYVEyA1kmYza4aDUOh+T3G3rmmXs0NPS8DCOr1772IqXT0uiotGCB3SMEAFQTgQwAYLtQSOrrW6eTTvqiIpG9Wrr0WCWTrRs+2tsd+vGPz1EsNqhgcIle+9qL5PGYzU9a9e8EAJoVgQwAYCtrD7K+vgN0/PGfzx2PxaR582wcmI3a2qSentV65ZVBjY29onQ6Lo/Hrz177B4ZAKDaWEMGALCVtQdZKbdb6uiY+/HUg7Y2ad681a/eMzQ8/AKbQwNAkyKQAQBstXOn5Kzw08jnq9zcohWYFbI1ufvDw89LIpABQDMikAEAbLVjh9lZcMeOPyoeH8kdb8UOixa/v7BCJg0NPSeJQAYAzahFP3sEANSLsTEpHh/Wd75zpCRp3bqzdN55P23pQNbeXhrIqJABQLOiQgYAsFUoJA0NPZu7Hwj0S2rtCllPjxQM5gOZNWUxEpEMw65RAQBqgUAGALBVKCQNDj6Tu9/bu7+k1g5kfX2Sx7NQHo/5l2AFskRCisftHBkAoNoIZAAAWxHIynV2Si6XIzdtcXj4BWWzGaXT0vCwzYMDAFQVa8gAALax9iArnLLY27tWhtG6Le8lKRCQXC5p/vz1Sqdj6ulZo2QyJK+3Wzt2SIsX2z1CAEC1EMgAALax9iCzKmQOh1Pz5q1SMinNn2/z4Gzk8Zht/88++0Y5HI7cccOQBgdtHBgAoOqYsggAsM3OnZLDYeQCWXf3SrlcXqXT5jqqVub3qyiMSWJzaABoQgQyAIBtduyQUqndSibNlGGtH3O7pWDQzpHZr62t8nECGQA0FwIZAMA2Y2PS0FC+oUdPz1pJZiDz++0aVX0gkAFAa2ANGQDANqGQNDr6Uu5+YYfFktl6LaetTTIMQ7fc8l7t2/e0vN5OXXDB3YpE7B4ZAKCaCGQAANuEQtKhh75XBxzwNg0NPaeODnNT6EDA5oHVgbY2cw3Zyy8/pOHh5+X1dsgwDIXDDhkGgRUAmgVTFgEAtgmFzD+93oAWLjxMHR0LJbX2HmQWa8piT88aSVIyGVY0ulfJpKiSAUATIZABAGyRyYwfLMZbP9VK2tvNNvfW5tCSNDT0vLJZaWjIxoEBAKqKQAYAsMXYmJRKVX6MCpnU02P+/fT05APZ8PDz8vnM7pQAgObAGjIAgC127pQikVf0619/Xj09+2vFihO1dOmxMgwCmWTuw5ZKlVfIXC4qZADQTAhkAABb7NghjYw8qcce2yxJOu64z2jp0mOVyUjz5tk7tnrQ0yN5POUVMok1ZADQTAhkAABblO5B1ttr7kGWTEoLFtg1qvrh90udnZLDsSp3zApk7EUGAM2DNWQAAFuEQtLg4LO5+9YeZA4HFTKLWSVrV0fHIknS0NBzkghkANBMCGQAAFuEQqUVMjOQuVzsQ2axgqnV+j4S2aNEIkQgA4AmwpRFAIAtzAqZGci83k4FAuam0H6/5OankySpt9dsff/a135IBxzwNvX0rJbL5VEkImWzkpOPVQGg4fEjDwAw5zIZaWwsqZGRFyWZ68ccDockqmOFVq2SfvUr6dBD31t0PBYzA21Xl00DAwBUDZ+tAQDm3OiotHfvNhlGVlJ+uqJEy/tCixebUzgr2bdvbscCAKgNAhkAYM7t3CmNjOTXj/X05ANZW5sdI6pPPl/lKpjPZ/4dAgAaH4EMADDnduyQxsbKOyxKUne3DQOqY1Zjj2h0UC+//JC2bbtTTqc0MmLrsAAAVcIaMgDAnAuFpPnzD9Thh1+gwcFnNH/+gZKkVErabz+bB1dnenrMath//ucaxeMj6u5eoUsvfYHNoQGgSRDIAABzLhSS1q49Q2vXnlF0PJ2W9t9/nJNalNVpcd681dq5848aHX1JmUxSe/d67R4aAKAKmLIIAJhzoVDl44GAFAzO7Vjq3apVZlfFnp7VkiTDyGpk5EXt2WN2qwQANDYCGQBgzo0XyObPl17tfo9XLVpk7ss2b97q3LGhoeeVSEgvv2zjwAAAVUEgAwDMqUxGGhmJK5WKlj3W22vDgOqcz2dWDQsD2fDw8/L7paeesnFgAICqIJABAObU6Ki0Zctt+tKXArriiqV6/PEfSZKyWWnBApsHV6d6eqSenjW5+0NDz8vhkHbtsnFQAICqIJABAObUX/4ijY2Ze5CNjb0st9svSUokpAMOsHNk9WvevPwaMkkaHn5OEoEMAJoBgQwAMKdeekkaGSncg2ytJHNq3vz5do2qvvX1SYHAYrlcPklmhUwyq41jY3aODAAwWwQyAMCc2rFDGhx8JnffmorX0yO5XHaNqr6tWiUlEk7Nm7dKkjQ8vE2GkZXbLT35pM2DAwDMCoEMADBnxsakoaF8IAsGl8rjaZdkVoFQmdVp0Zq22N7ep1hsSG63WXEEADQuNoYGAMyZxx6TUqlBxWJDkvLTFQ2DQDYRr1fq6pI2bfquvN5OeTxtucd277ZxYACAWSOQAQDmzEsvSaOj+fVjPT37S5LicWnNmvHOgmQ29ojFyttQ7t0rpVKSx2PDoAAAs8aURQDAnCldP9bbawYyl0tautSuUTWGnp7Kx5NJ6cUX53QoAIAqIpABAOZE6foxKR/IurvNLosYX2+vuVdbKb9fevrpuR8PAKA6mLIIAJgTjz1mTqsrDmTmGjLa3U9u1Srpl7+UHnnkSxoc3Cqn06NNm66Vw8E6MgBoZAQyAMCceOklc2riW97ybR133N9ocPAZdXevlGRWfzCxRYvMv78//ek7Ghl5UT5fl97ylu/I4XBo1y6zMYrDYfcoAQDTxZRFAMCc2LHD/NPv79Z++x2lQw99j1wuj5JJ1o9NhdVpcd48s/V9IjGa61YZCknDw3aODgAwUwQyAEDNjYyY68cqyWaltWvndDgNq6cnH8gkaXj4eUlmWHv8cbtGBQCYDQIZAKDmHn98/LbsnZ1SR8fcjqdRzZuXb4QiSTt2PCLJnMpoVSABAI2FQAYAqDlr/dhLL/1e99//dW3denvB5tA2D66B9PVJy5eflLv/3HN35G7T2AMAGhOBDABQc1b15umnb9VvfnOZbrxxk3bu/JMkOixOx6pVUnf34eroWChJ2rbtTqXTcUnmBtGJhJ2jAwDMBIEMAFBThevHhoaK9yDLZKT+fnvG1YgWLpQ8HqfWrDlDkpROx/Tii/dIMrssPvecnaMDAMwEgQwAUFPW+jHDMLRnz18kSW63X8HgEiUS0rp1Ng+wgXi95ibaa9e+KXfs2Wd/IcncWPvZZ20aGABgxghkAICastaP7d37pIaHt0mSFi8+Ug6HU+3trCGbrnnzpFWrTpHD4ZIkPffcL3KP7dpl16gAADPFxtAAgJqy1o89+eSPc8cOPPCdksww5uSjwWnp6ZFeeaVLxx77KXV27ldULdu9mw2iAaDREMgAADVjrR/z+YyCQObQgQeeI4nq2Ez09pp7t51yyv8reywalfbsYV0eADQSPpcEANSMtX5sz54nNDi4VZK0fPnx6uxcJMOgw+JMrF4txeOVH/P5pL/8ZW7HAwCYHQIZAKBmBgbM9WOF0xUPOsicrhiPS2vX2jWyxmV2Wqz8mNMp7dw5t+MBAMwOgQwAUDM7dpjdFa1A5nA4tX792yWZoWK//ewcXWPyeKSuLvN2NpvWSy/dpzvv/HsNDNwriUAGAI2GNWQAgJqw1o/5/dKmTdfqySd/rFhsMLep8bx541d6MLGeHnO92LPP3qEbb9wkSYrFhrR8+fEaGjIfa2+3eZAAgCkhkAEAauKxx8x9sxwOh5YvP17Llx9f9DgNPWZu3jzp5ZellStPksvlVSaT1HPP/UKGYcjhcGjrVumII+weJQBgKpiyCACoie3bzfVjldDQY3b6+sxOi15vh5YvP0GSNDr6kvbufUper7Rtm80DBABMGYEMAFAT1v5jlSST0ooVczaUplPYabFwH7JnnzU3iWaDaABoHAQyAEDVWevH/vSn7+qRR/5LkciesuesXDn342oW/f359Xdr156ZO/7cc2Yg273bDL0AgPpHIAMAVN1jj0kej6Hf/e5f9fOff1RXXLFUicRY7vFgkKYTs1HYabG3d616etZIkl566feKx0dlGNLtt9s4QADAlBHIAABVZRjSk09Ke/b8USMjL0iSli8/QT5fMPccGnrM3qJF+dtr1pjTFrPZtLZt+61cLunRR6VXXrFpcACAKSOQAQCq6s47zfVjlTaDthDIZu/oo6VEwrxdaR2Z2y397/+aARkAUL8IZACAqnnlFenuuyW3u3AzaJcOOOBtueek09KSJTYNsImsXWvuRyZJK1acILe7TZJy7e8ls7nH/ffbNUIAwFSwDxkAoCoyGemGG8zKzMsv/0GjowOSpFWrTlZ7e3FJ7KCD7Bhhc3E4pHXrpD/+UXK7/Tr00PdKMqtlhpGVw+GSxyP99rfSa19rbtANAKg/BDIAQFX89Kdmd0W3e/zpioYhHXCA1NEx9+NrRiecID34oLkB91ve8u2Kz8lkzKmL7373HA8OADAlTFkEAMzali1WpUYyjKyeeuonkiSn060DDnhr7nnJpHTyyTYNsgl1dUnLlk38HKfTbLLy/PNzMyYAwPQQyAAAsxKPSzffbFZpJOnllx/S2Nh2SdLq1aeqra0n99yVK6WFC+0YZfM6/HAplZr4OR6PdOutUjY7J0MCAEwDgQwAMCvXX1+8CXHhdMUDD8xPV0wkzCl2qK4jj8yHYUmKRgf1xBPXa/v24m4eg4PSXXfN8eAAAJNiDRkAYMYeesicCufx5I9t2PA3mjdvpbZsuVkHHHBW7vjChdL++9swyCbndpt/r08/Le3c+YiuvfZoGUZWy5efoPe////kcJifvXo80u9+J73udVJnp82DBgDkUCEDAMzI0JD0i18UhzFJ6uxcrKOP/rguuOAe+f3dkswK2jHHmJ0BUX0bNpgVyP7+Q9XRYc4JHRi4R7///b8VPc8wpP/5HztGCAAYD4EMADBt8bh03XVTf34wKB11VO3G0+qWLZMWLJBcLq/e+tYfSDKT7113/YNeeCE/T9HhkJ59VnrkEZsGCgAoQyADAEzZ6Kh0003Sl78s7d2br3i98ML/6e67/zm3IXGhTMbcB8vJT5yaOuggs2nHqlUn64QTviDJ7Hh5883vUii0M/c8r9dsg3/VVWZ3TACAvVhDNgf+8AfzlxjJ/IXE6ZRcLnPev3Xb4TC/nM78n4XPtf4s/Cp8rNJt6zVLvwBgunbskH7zG7O6Yv374nKZj+3a9ZhuvPGtSiZDCoVe0ZlnflNOZ/7Hi8tFM4+5sHGjdO+95s+A44//vLZvv0/btv1Gkchu3Xzzu3T++b/N/XfxeqV9+6Qf/lBavFh64xul9ett/gYAoEURyObA738vjY3l7xtG8Zd1rPDx0j9Lb1v3rYBlffJs/WkdrxTASgNa4bmFxwpfa7znlp5Tetv6xc16vdLbpSF0MpX+biop/b4Lv5/CaxeG1NLbpX8Wfk/W67nd5voZn8/8Bcf6sp4z3n+LqQbj8c6pNL7S25W+TwI5puvZZ83OfC++aL7X3SU/NYaHX9CPfnSGksmQJCkc3lX0uGFIhx5a3AUQtdHeLq1aJW3fLjmdLr397T/SNdccoVDoFQ0M3KO77vpHvfGNXyo6h2AGAPYjkNmg3n4xtkJNJmPvOOrdeEE5my3/c7xgZxgz+2/vcJSH8NLHJgpv1uMTBbjC508WTsd7TqXHJwrspeF8vA8IKoX6St/DRN9L6XMLqzwulxk2rMBh/WmFbuvLCtrjfY8TfRAy3t/7ZK8z1fdLpQ95Cr+s92fp7XTa/IV8924pFJLCYSkalSIR8/bYWP6DhlKRyF5dd91puRC2ZMmxOuecG4uqY5mMdOqpU/seMHuvfa3Z9dLrlQKB+TrnnJu0efMJMoyMfv/7L2vp0g3af/8zy84rDGaLFpkdMbu6zNtLlpi3mXIKALVBIAOmaLJftptF4S/1rWCi4FKpml0p9BWa7P0xUVgb7751zUr/XUqr64Xhv9LjpbcNw/xF2+ut/Av3eJWtZDKs668/U0NDz0qS+vrW693v/pk8nvaia+y/Py3W59Khh0o//3l+o+hlyzbo5JO/ot/85jJJ0jPP/KxiILN4veZ+ZYOD5n+/ZNL8f8LrNf87BoNmJc76gKLwwwrra7IPZSb7cKbS1H3r/Z/NFn+V/j87nok+8Jjog4ypnD/e91T4nNLXkSrPSrFuT/YBi2W6/147HOXLJUo/ZLKeV3hO6bGJnjPd25O9dqX7QLMhkAFoadOpQsGUTsf1k5+8Qzt2PCxJ6uzcT+997y/V1tZT9LxkUjr5ZDtG2LqcTmndOumJJ/Lv62OP/ZR27HhYy5Zt1FFH/fWUX8vhMKdjW6JR82u6pjI1v9KxSs8Z7xf5qfw/XBpcSu9PFAImO3e8Dz4mOlZ4fLzzK31fs/33qvCa44WqiWZzVPpwaLKwVun1So+PNwvEOjbRjIiJZipM9Hc4USCs9LOh0t9XpXFPtPSk0uyP8a5XarL/hya7P9n7cLJjpQo/0Jjsw4xK98f771VpycdU/o4yGemss6SlSycfe70hkNXYtm3b9NnPHiiHwyWn0/3qn67cffO2Uw6HU+eff6e6u1fkzn3yyR/rvvu+IqfTI5fLU+FPtxwOpzo6Fun00/+j6Lp/+MNV2r378aLrORzOotsOh1NLlhyjdeveUnTu7373ZRlGtmBsrqLb1rlr1pxWNN5weLdeeOHOku+x8DXM79fpdGvp0g1yOl25cyORPYpGB3OvbX45Su675Hb71dY2r2i82aw519I6B0Dt/O53X9J99/0/JRKjkiSfr0vvfe8v1dW1rOy5K1aY65Iwt44/XvrjH/NhyuFw6Oyzbyj79zGbTRdNL62V6YQmYDomW0+O1pJMmk30CGQok06nlU4npvRcK1hYIpE92rnzT5Oe19OzpiyQPf/8r/TMMz+b9NyjjvpYWSC7++4vKJtNTXrueefdWhTI9u59Sv/7v++Z9DxJ+vu/jxUFsgceuEL33fdvE5xhWr78eF1wwT1Fx77znSO1a9djRcccDqckR0Goc+mkk/5Fxx13We450eg+/dd/HVYS+oq/rNd4xzv+R/Pn51e6P/PMz3TXXf9Q9JzC60kOOZ0utbX16rzzflo0tgcfvFIvvfS7iiG3MDgvWXKMDj/8gqJz7733X5VOxwrCfT7kWvddLo9WrDhJvb1rc+fF46MaGLh33HBeOJaFCw+Xy5Xf6TcWG1IsNlz04UGlvyeXyyOfL1g0XvO9b7z6d1MctlH/rBb2hf+9XC5vLoy5XD696123acGCg8vOTSbNYIC5t2CBGYQHB/PHSv+fMwxD3/ve69XVtUxHHfXXWr78BP6/BACb1CyQbdmyRb/85S/16KOPateuXQoGgzrooIP0wQ9+UEsbMbrOkMfj0eLFhymdziibTSubzcgwMgV/pmUYhgwjW/RLsMkhp9OtbDY94TXMX4iLGUZ2iiMs/wE81XMdDlfRfcOYeleQ0k9lJ/sexzvPPLf8utb3UPipWenzstm0QqEdU7puJlMcqqPRwbIQWEkgsKDs2CuvPKQtW26e9NxUKloWyB588N8Viw1Neu7b3nZdUSAbGnpON964adLzJOlv/mav2tv7cvcffvhbuuuuz0963qJFr9WHPlS82+wPf3iyXnrp9+OckQ9pr3/93+qkk/4l90g6HdeVV64sC52FXw6HSy6XR2eccZUWLToid+4rrzysBx74WlnYlIqDp9vt12mnfb1oRM888zPt2PHIhJVlp9OlefNWac2a04vOfeqpm5VKRSqG3MLbCxYcrK6u/L+B6XRcu3c//ur35cl9f1YVPH/MJZ8vWPH/95nIZFLKZtOKx0cUiexWOLxL4fDu3O1IZLdefvkhveMdPyn6+z344PN0771f1AEHvFVHH/2Joscs2ay0337SAQdUZaiYgSOPlG6/ffw1gK+88ge98spDeuWVh/TUUz/R/PkH6sgj/1qHHfa+sg9WAAC1VbNAdv311+uJJ57QSSedpNWrV2twcFC33HKLPvjBD+pb3/qWVq1aVatL15WVK1fq059+rKjt/VS97nUf0+te9zEZhvFqmEu9+ktUKvfLlDW1sNSb3vRNJRKjueBnGNmSMJiVZKizc7+yc88779aSc7KvfmVeDTVmgOzvP7TovN7e/XX66VeWhU7rdczxmn+WhrnFi4/U4Ydf8Op1jIJrmuO0XmvBguJrStLChYfL5+vMnWeOr/C2ef3ycORQMLik4jWt79esEBhl43U4nHK5vGXXNKtBhc8r/28z9fBZ6dyphd6ZBl5p5kG70qfrlTYJLnj01b/jTNnzstl0Wfv08aRSkaL7Y2Pb9eSTP570PI+nvSyQbd16u/70p29Peu4BB7ytLJD9+tef0ujoS5Oee+aZ/6Ujj/xw7v7IyICuvfboSc+TpI9/fJvmzVuZu//QQ/+pX/3qEyWVWpXd7us7QB/+cHG1/frrz9S2bb+Z9Jp/+csNRaErGFyiv/mbvXK5Kv+mn05Ly5ZJF17IFDU7HXus9Mor0qOPml1DS4VCrygQ6FcksluSOcPhjjsu1m9/+1kddNA7tHDhEerrW68FCw5SZyfzTgGglmoWyN75znfqH//xH+Up+Enwhje8QRdeeKF+9KMf6R/+4R9qdemm43CY08FcLk/FH6yVdHcvn/H1JurANZGurmU6+uiPz+jcgw8+VwcffO6Mzn3b2/57Rud1dPTrk5/cPqNzDzvsfTrssPdVfMwKZlaILPXmN/+XTjvt3ysG3sLg7PfPKzv3Xe+6TZlMMhdwC0Nu4bH99juq6LxgcD+ddNLlZdcoHoMZot1uf9G5CxYcokMOeXeFwJrNnS8Z6ulZq1ILFx4hp9OV+zvJn2cUfd+lv/AZhqGuruUl31/x92hNqy0Nn5nM5NNtpcpheerhs1JVemqLGEqD9vQqy8XnWh/KTFbVTqdjZcemVmlzVAzG44WxVEo6+GDp3HNpkV4Pzj5biselp58u3z9u/fq3a//936wtW27RI498UwMD90oyP+B47LHNkjZLkpYu3aAPfKC4yv3oo9+Xw+GQ2+0v+WqTy+XNrXUOBveT19uROy+bTSuVipZMCS9eL1z8YQIAtIaaBbJDDjmk7NjSpUu1YsUKDQwM1OqygO2s9WQul1NSeYJua+sp60Y3VcuXz2xRTjC4RMcf//czOnf9+rdp/fq3zejcN73pP2d0ns/XqU984sVJn5fNZsp+eVu37i269NIXK4Tc0kpvuWOO+aQOPPCcClOLi0NrpQ883vCGf1UiMabCMF4p8C5a9Jqi8/z+br3udZcUBc1sNp2rguePZYpaykvmlNjFi4/MhVyTUXZ73rzyGQn9/Ycpk0nI6+1UR8dCBQL96ujoL7rd2bm46BfqiaRS0oYN0hlnUBmrFw6H9O53S9/9rvTSS2ab80Iulzf3Ydju3U/okUe+pccf/6GSyXDuOX195btE33HHxUqlJm+3+M533qz169+eu//SS7/XD35w0pTG/vd/Hyv6cOjuu/9JDzzw9bK1toW3nU63liw5Rm9/+4+KXuunP71Ag4PPVJhG7CqaDn3IIe8pGm8yGdZvf/u3FRpUFZ/rcLh0+OEXqLNzUe7cwcFn9eKLd5VNs87fd+WmTq9cWfx3Mjy8TbHYcFkTr+LbbrlcPrndPgFofHPa1MMwDA0PD2vFihUzfo19+/ZpsHClcoF6DXrJpLnJ6ngtTyu1P5X4pQaYTKVpnR5P+4wrxAsWHKQFCw6a0bnjVUwn09m5WGec8Y0ZnXvooe/RoYdOrZFOqVNO+cqMzqsknTaD2OtfX7WXRJU4neb00W99S9q7d/zKZX//ITrzzG/qlFO+qt27/6y9e7do374tWras+D+qYRhKpcorrpWvXfyB1FSryFJ5BTedjhcFxfFU6va5a9dj2r37z5Oeu3hx8cyCZDKihx++etLzJGnNmtOKAtnLLz+on/3swxOcYWpv79Pf/M3eomN33/0FPf74dZOee8gh79Hb3178vCuuWKZYbKhs7W2+07MZXk855ataty6/rnjv3i265Zb3jVOxdBaF3rPPvrGo2/HWrbfpqaf+p2wdbPGXS8HgEr32tR8qGu/TT/9UodDOks7MxX9a064L/23OZjN64YX/G6dBlXXbvHZ39wp5vYHcuel0QslkuGCtrtW1ml+6YJ85DWS/+c1vtHfvXn3gAx+Y8Wvcdttt2rx5c/UGNQc+9jEpkTAXuqfT5lcqlb9deCyTyf853saXlW6XHrPuSxPvEVH4vNINcce7fiZT/Gfh8wqPjXdt67hlvHBKSAXqn2FI73ynuSEx6pPbLX3oQ9JVV0ljYxP/O+r1BrR06XFauvS4cZ5h6Kyzvq90Ov7qVyx3O5WKvTql2lzrXBqO/P5urVp1isabvlx4vDSQBQILNH/+QWUV6+L10emKU72n2qiqdPrzdKYTl06Bnuq63UpTp6c67bpSk6tkMly2rraS0nCbTIa1c+cfp3Td0r/P3bsf1+OP/3DS8xYtem1ZIHvggX/XSy/9btJzX//6v9Mb3/ivufuZTELXXXfqlMb7/vffrRUrTsjdf+65O3TTTeWzPqxGUU6nRw6HUx5Puz796eLGX3fe+Xd64onrS7obl29rtHz5CTr55C8XnfvTn16gaHRfQdh0l9y2KrXvLpoNE40O6qGHvjHOecXnHnjgOUVNeUZGBjQ4uLViU6zCsOx2+4u6ZktSPD6iTCZVYZxW6OUXsmqas0A2MDCgK664QgcddJBOP/30yU8Yx6ZNm7Rhw4Zxr3H55ZfP+LVrpbPT/GoVhcHNCpaFtwtDnnU8kzFDqRVIS29b9ysFv0oB1RqHVHzMeg3reGngtMY0XtgtDbnWaxR+n9af1jVKr1VpI8hKVVOgnhmG+b694AJzvzHUN59P+shHpG98w1xXNtN/YxwOpw4//P0zOnfRoiP0vvf9ekbnHnvsp3TssZ+a0bkf/ejjRWtey6cjZ5TJpOTzFf+gbm/v00UXPTxBc6xMbl1rYbMdSVq27PXatOm7ZWtfrWtZ55ZOQ5ak1atPVVtbby7Y5qcvFzb0ylTcbmL+/PWKx0fHXXtrBVmXq3Sqo9W8ympUNb7yplFTbTY18yZXpQF96p2kp97kyjAySqczkuKvPq88GEciezU6OvlsrI6OhWXHXnzxrik1flq06DUlgWyv7r33XyY4I2/FipOKAtnWrbfql7+8dNLzenv318UXby06dvPN79Zzz90x7jnWFN7Xve6SsgZZ//7vZsO48bfoMauYp59+ZdGHP6+88rB+/etPVZyabJ1jBcm3v/1HRf9tt269TbFYTNLM+hHYbU4C2eDgoD772c8qEAjoi1/8olylE9mnoa+vT319fZM/EbYpDBlTbULSbAoDaWGgTKfNKazxeHngLPwaLyyOVw2V8rcrBeDCY4WvURqSK72+9drjhVPr+y2tro4XNAsDZ+lt1Lds1nz/LlokrVpl7jPW1WX3qDBVgYAZyq6+2vx3ppXkp91N/dcel8urxYuPnNH1envXFm09Mh1HHPEBHXHEzGYSfeAD983ovP32e53+8R/zb4riRkxGUfgs3Rbh6KMv0SGHvKsgABZ/WQHU6y3/ZPr44/9BkcieiiG5cO3vkiXHFJ3ndHq0cePnK1ZKzdv5IFoajgKBfq1Zc8Y4a3ZTr443K4+nrWy8Pl9QgUB/0d9HYWMtq6paKXzOtFI71cArqWz7pNlUaierEBd3wy48bkx5SyFz3XVeLDY0wVY5xc4++4ai+y++eI8SiagIZOMIh8P6zGc+o3A4rKuuuoowhZbgcJjThNxu85PpZlMYBgsDnxU8MxnzF3frq7DCWXi7MDiONzW2MNwWhsjx7lvjsX7hrFRRlYqvaT2v0vdVKWxalU4rdFrB07otNU/AzGbNDw72209avdpsp97dbfeoMFPz5kkf/KD0gx9IIyPN+e8TZs9qTpWvTI3/6epsGlWtXXvGjM5zu316wxu+OKNzly/fqOXLN87o3NNO+3pZNahUcZOlvI9+9C9FldLyQGeGumBwSdF5XV3L9J73/LIkrKbLbmezqbIpu0uWHKPjj/+Hoipp6ZdhZNTRsUil9tvvGLlc3pJxlofQwn01X/0bUFfX8nGfb903DKNCt9+prTPNr3HMy2ZT0/rApd44jOmssp2mRCKhT3/603rmmWf07//+7zr44PLyejVt3bpVF110kb7zne9o3bp1Nb0WgOY33rRaq7qZSBQHz0Qivwa0dBqrFRINY/xQWlrVLA284wXGSoG28HsoDYelVUmXy9xA2Os1q9o+X/7+4sXSMce01rTrVmAY0pNPSg8+KG3bZv53b5YPEQA0ptLOxJW26bECXeka1ZGRF5VMSn/91ytU47hREzWLkplMRv/0T/+kJ598Ul/60pdqHsYAoNqsilejTL0tnYZaWH0cb/qo02lWcvllvLU4HOaecQcfLA0PS3fdZQa0eLxx3u8AmovD4Xx1y6Dp6+5eoWSyygOaQzULZFdffbXuu+8+HXfccQqFQvr1r4sX8p566tS64wAApsaaKgtMx7x50tvfLp11lvTww9If/yjt2ydFo2Zg93oJ7ABQSzX70f3cc89Jku6//37df//9ZY8TyAAAqB8ulzk99ZhjzKpqOGxuKP3SS+Z6s+Fh88vaV9Oqwrpc+a/CbUoAAFNTs0D2jW/MbKNTAABgL4fDXDd40EHmVyGraU8iYX5FIlIoZP4ZjRavtSzsMFvYQXaitZKlazcrraOcbJ/NybYVabbmOwAaG5NbAADAlLlcUlub+WWHSsGt9La1pUgymQ+QlbYaqbRVSOnx0iY6lfbULL1deG5hQK3UuVUqvz9emCy9D6A5EMgAAEDDKNxeotGUbv0xXpUwnTbDoxUgC/+0bo/XnXW8+5WCa2lYtMJopS1JpMr7TU625yThEZgcgQwAAGAOWE1SGoUVvAqDW+FXKpXf9qN0imphcKwUBgvvl+4pOdFzJ9oKpHQbEOt7mGhqa2GYLNxTkiCJuUQgAwAAQBmHI9+wpdFYIW+8dYmFgdKqPBZ+JZPFlcjS6mGl15voeOlWJFagHG/6qvW88YIiobG5EMgAAADQVKxtQOp9K5DS6mBpUxyrgU6laaupVHG1sDDkla5rHK/yWBg0SwNoOl0cbAtfXyquQk40hZW1j5Or87cpAAAA0Jwaaf/IwnBWaTpq4RRWKzCWNtOpFCArTVst3FpjvOeUrpdMJOxrNjRbDfIWAAAAAGCXwqqjz2f3aJpLg/YpAgAAAIDGRyADAAAAAJsQyAAAAADAJgQyAAAAALAJgQwAAAAAbEIgAwAAAACbEMgAAAAAwCYEMgAAAACwCYEMAAAAAGxCIAMAAAAAmxDIAAAAAMAmBDIAAAAAsAmBDAAAAABsQiADAAAAAJsQyAAAAADAJgQyAAAAALAJgQwAAAAAbEIgAwAAAACbEMgAAAAAwCYEMgAAAACwCYEMAAAAAGxCIAMAAAAAmxDIAAAAAMAmBDIAAAAAsAmBDAAAAABsQiADAAAAAJsQyAAAAADAJgQyAAAAALAJgQwAAAAAbOK2ewDVlEgkJEkDAwM2jwQAAABAq1u+fLn8fv+Ez2mqQLZr1y5J0uWXX27zSAAAAAC0uu985ztat27dhM9xGIZhzNF4am5kZER/+MMftGjRInm9XruHI8ms1l1++eX6/Oc/r+XLl9s9HDQo3keoFt5LqAbeR6gW3kuolnp9L7Vchay7u1unnnqq3cOoaPny5ZOmY2AyvI9QLbyXUA28j1AtvJdQLY34XqKpBwAAAADYhEAGAAAAADYhkAEAAACATQhkAAAAAGATAhkAAAAA2IRAVmO9vb264IIL1Nvba/dQ0MB4H6FaeC+hGngfoVp4L6FaGvm91FT7kAEAAABAI6FCBgAAAAA2IZABAAAAgE0IZAAAAABgEwIZAAAAANiEQAYAAAAANiGQAQAAAIBNCGQAAAAAYBMCGQAAAADYhEAGAAAAADYhkAEAAACATQhkAAAAAGATAhkAAAAA2IRABgAAAAA2cds9gGaVTCb13e9+V7/+9a8VCoW0evVqffCDH9RRRx1l99BQp6LRqG688UY99dRT2rJli0KhkD73uc/pjDPOKHvuiy++qKuuukpPPPGE3G63jj32WF188cXq7u6e+4GjrmzZskW//OUv9eijj2rXrl0KBoM66KCD9MEPflBLly4tei7vI4znhRde0Pe//31t3bpVQ0ND8vv9Wr58ud71rndpw4YNRc/lfYTp+O///m9de+21WrlypX7wgx8UPfbEE0/ov/7rv/TMM88oEAjopJNO0kUXXaT29nabRot68eijj+rSSy+t+Ni3vvUtHXTQQbn7jfg+IpDVyJe//GXdfffdesc73qElS5bojjvu0Gc+8xldeeWVOvTQQ+0eHurQ6OioNm/erP7+fq1Zs0aPPvpoxeft2bNHl1xyiTo6OnTRRRcpFovpxhtv1LZt23TNNdfI4/HM8chRT66//no98cQTOumkk7R69WoNDg7qlltu0Qc/+EF961vf0qpVqyTxPsLEdu3apWg0qtNPP119fX2Kx+O655579LnPfU6XXXaZNm3aJIn3EaZnz549uu6669TW1lb22LPPPqtPfvKTWr58uS6++GLt2bNHN910k15++WV99atftWG0qEdnn3221q9fX3Rsv/32y91u2PeRgap78sknjY0bNxrXX3997lg8HjfOO+884yMf+YiNI0M9SyQSxr59+wzDMIwtW7YYGzduNH7xi1+UPe/rX/+6cfLJJxu7du3KHXv44YeNjRs3GrfeeuucjRf16fHHHzeSyWTRsZdeesl44xvfaPzLv/xL7hjvI0xXOp02LrzwQuM973lP7hjvI0zHF77wBePSSy81LrnkEuP8888veuyyyy4z3vrWtxrhcDh37Pbbbzc2btxoPPTQQ3M9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",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar, model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0463023",
   "metadata": {},
   "source": [
    "## Bayesian Analysis Results\n",
    "Analysis Results work exactly the same under Bayesian analysis.\n",
    "\n",
    "Let's run the analysis first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1dfe113e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:11:00.135469Z",
     "iopub.status.busy": "2023-11-06T18:11:00.135078Z",
     "iopub.status.idle": "2023-11-06T18:11:05.841333Z",
     "shell.execute_reply": "2023-11-06T18:11:05.840780Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c0a55a9594b74ff28ad5846c2a757ac7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0217db37f8684adcbf4bc448b83fe19f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Maximum a posteriori probability (MAP) point:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mMaximum a posteriori probability \u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mMAP\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m point:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.12 -0.11 +0.13</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-4 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(3.34 -0.6 +0.25) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.503 -0.011 +0.014) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.19 -0.09 +0.11</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                2.12 -0.11 +0.13   \n",
       "fake.spectrum.main.composite.b_1              (-4 +/- 4) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2          (3.34 -0.6 +0.25) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.503 -0.011 +0.014) x 10   \n",
       "fake.spectrum.main.composite.sigma_2            1.19 -0.09 +0.11   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(posterior) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mposterior\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(posterior)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>-16.861412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>-16.861412</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(posterior)\n",
       "sim_data       -16.861412\n",
       "total          -16.861412"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>45.086460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>53.282939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIC</th>\n",
       "      <td>-7.441732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PDIC</th>\n",
       "      <td>-55.652315</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      statistical measures\n",
       "AIC              45.086460\n",
       "BIC              53.282939\n",
       "DIC              -7.441732\n",
       "PDIC            -55.652315"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for parameter in ar.optimized_model:\n",
    "    model[parameter.path].value = parameter.value\n",
    "\n",
    "model.fake.spectrum.main.composite.a_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.b_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.F_2.set_uninformative_prior(Log_uniform_prior)\n",
    "model.fake.spectrum.main.composite.mu_2.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.sigma_2.set_uninformative_prior(Log_uniform_prior)\n",
    "\n",
    "bs = BayesianAnalysis(model, data)\n",
    "bs.set_sampler(\"emcee\")\n",
    "bs.sampler.setup(n_iterations=1000, n_burn_in=100, n_walkers=20)\n",
    "samples = bs.sample()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47588a21",
   "metadata": {},
   "source": [
    "Again, we grab the results from the BayesianAnalysis object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "62bb9637",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:11:05.843786Z",
     "iopub.status.busy": "2023-11-06T18:11:05.843576Z",
     "iopub.status.idle": "2023-11-06T18:11:05.846563Z",
     "shell.execute_reply": "2023-11-06T18:11:05.845972Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2 = bs.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e68cee40",
   "metadata": {},
   "source": [
    "We can write and read the results to/from a file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "843af78a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:11:05.848789Z",
     "iopub.status.busy": "2023-11-06T18:11:05.848558Z",
     "iopub.status.idle": "2023-11-06T18:11:05.903309Z",
     "shell.execute_reply": "2023-11-06T18:11:05.902732Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2.write_to(\"test_bayes.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8dbfe4a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:11:05.905915Z",
     "iopub.status.busy": "2023-11-06T18:11:05.905626Z",
     "iopub.status.idle": "2023-11-06T18:11:05.953939Z",
     "shell.execute_reply": "2023-11-06T18:11:05.953297Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2_reloaded = load_analysis_results(\"test_bayes.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fce7aa89",
   "metadata": {},
   "source": [
    "The AR holds the posterior samples from the analysis. We can see the saved and live reults are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "676e8d0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:11:05.956689Z",
     "iopub.status.busy": "2023-11-06T18:11:05.956482Z",
     "iopub.status.idle": "2023-11-06T18:11:05.974284Z",
     "shell.execute_reply": "2023-11-06T18:11:05.973712Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.allclose(ar2_reloaded.samples, ar2.samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1677238",
   "metadata": {},
   "source": [
    "**NOTE:** *MLE AR's store samples as well. These are the samples from the covariance matrix*\n",
    "\n",
    "We can examine the marginal distributions of the parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "147f51c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:11:05.976380Z",
     "iopub.status.busy": "2023-11-06T18:11:05.976191Z",
     "iopub.status.idle": "2023-11-06T18:11:07.401718Z",
     "shell.execute_reply": "2023-11-06T18:11:07.401063Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1180x1180 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = ar2.corner_plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61780880",
   "metadata": {},
   "source": [
    "We can return pandas DataFrames with equal tail or HPD results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "af1ec01f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:11:07.404774Z",
     "iopub.status.busy": "2023-11-06T18:11:07.404584Z",
     "iopub.status.idle": "2023-11-06T18:11:07.423666Z",
     "shell.execute_reply": "2023-11-06T18:11:07.422999Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.119304</td>\n",
       "      <td>-0.107030</td>\n",
       "      <td>0.132047</td>\n",
       "      <td>0.119539</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.003539</td>\n",
       "      <td>-0.003736</td>\n",
       "      <td>0.003772</td>\n",
       "      <td>0.003754</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>33.446190</td>\n",
       "      <td>-6.381942</td>\n",
       "      <td>2.495532</td>\n",
       "      <td>4.438737</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.034951</td>\n",
       "      <td>-0.108222</td>\n",
       "      <td>0.139726</td>\n",
       "      <td>0.123974</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.185283</td>\n",
       "      <td>-0.088867</td>\n",
       "      <td>0.114946</td>\n",
       "      <td>0.101906</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.119304       -0.107030   \n",
       "fake.spectrum.main.composite.b_1      -0.003539       -0.003736   \n",
       "fake.spectrum.main.composite.F_2      33.446190       -6.381942   \n",
       "fake.spectrum.main.composite.mu_2     25.034951       -0.108222   \n",
       "fake.spectrum.main.composite.sigma_2   1.185283       -0.088867   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.132047  0.119539   \n",
       "fake.spectrum.main.composite.b_1            0.003772  0.003754   \n",
       "fake.spectrum.main.composite.F_2            2.495532  4.438737   \n",
       "fake.spectrum.main.composite.mu_2           0.139726  0.123974   \n",
       "fake.spectrum.main.composite.sigma_2        0.114946  0.101906   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"equal tail\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ebc621d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:11:07.426198Z",
     "iopub.status.busy": "2023-11-06T18:11:07.425810Z",
     "iopub.status.idle": "2023-11-06T18:11:07.447957Z",
     "shell.execute_reply": "2023-11-06T18:11:07.447324Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.119304</td>\n",
       "      <td>-0.128860</td>\n",
       "      <td>0.107189</td>\n",
       "      <td>0.118025</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.003539</td>\n",
       "      <td>-0.003657</td>\n",
       "      <td>0.003831</td>\n",
       "      <td>0.003744</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>33.446190</td>\n",
       "      <td>-6.263540</td>\n",
       "      <td>2.595447</td>\n",
       "      <td>4.429494</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>25.034951</td>\n",
       "      <td>-0.112758</td>\n",
       "      <td>0.132874</td>\n",
       "      <td>0.122816</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.185283</td>\n",
       "      <td>-0.102048</td>\n",
       "      <td>0.098081</td>\n",
       "      <td>0.100065</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.119304       -0.128860   \n",
       "fake.spectrum.main.composite.b_1      -0.003539       -0.003657   \n",
       "fake.spectrum.main.composite.F_2      33.446190       -6.263540   \n",
       "fake.spectrum.main.composite.mu_2     25.034951       -0.112758   \n",
       "fake.spectrum.main.composite.sigma_2   1.185283       -0.102048   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.107189  0.118025   \n",
       "fake.spectrum.main.composite.b_1            0.003831  0.003744   \n",
       "fake.spectrum.main.composite.F_2            2.595447  4.429494   \n",
       "fake.spectrum.main.composite.mu_2           0.132874  0.122816   \n",
       "fake.spectrum.main.composite.sigma_2        0.098081  0.100065   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be09c3db",
   "metadata": {},
   "source": [
    "Error propagation operates the same way. Internally, the process is the same as the MLE results, however, the samples are those of the posterior rather than the (assumed) covariance matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "69d2ac6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:11:07.450422Z",
     "iopub.status.busy": "2023-11-06T18:11:07.450077Z",
     "iopub.status.idle": "2023-11-06T18:11:07.462323Z",
     "shell.execute_reply": "2023-11-06T18:11:07.461649Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: (-3.2 -4 +3.4) x 10^-3, hpd: (-3.2 -4 +3.5) x 10^-3\n",
      "equal-tail: 2.13 +/- 0.12, hpd: 2.13 -0.14 +0.10\n",
      "equal-tail: 2.12 -0.11 +0.12, hpd: 2.12 -0.13 +0.10\n"
     ]
    }
   ],
   "source": [
    "p1 = ar2.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar2.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "res = p1 + p2\n",
    "\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "646c14fd",
   "metadata": {},
   "source": [
    "To demonstrate how the two objects (MLE and Bayes) are the same, we see that our plotting function written for the MLE result works on our Bayesian results seamlessly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "6fd840aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-06T18:11:07.464536Z",
     "iopub.status.busy": "2023-11-06T18:11:07.464333Z",
     "iopub.status.idle": "2023-11-06T18:11:11.324924Z",
     "shell.execute_reply": "2023-11-06T18:11:11.324225Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 2.11 -0.12 +0.13, hpd: 2.11 -0.13 +0.11\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bbf29c4a52bb4dee8245f8ecfa2cd0a8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar2, model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4c71540",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0217db37f8684adcbf4bc448b83fe19f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_54476ab533da4c2eb89086400b3a330d",
        "IPY_MODEL_5ac34f69854d43c88714ae1fa612a7bf",
        "IPY_MODEL_8f67a598222549cba2311b7a1dc354de"
       ],
       "layout": "IPY_MODEL_1f0e391cb8eb440cbac613c6b7efa76c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "03f858fb7f664286a8820a8434015e61": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7e03c460a5b0406daa3c25c53882167b",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_575eb295de5841af85026398046d9e80",
       "tabbable": null,
       "tooltip": null,
       "value": 99.0
      }
     },
     "06871602522245ea89c153ebe8a8ce4d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0d4e81b220634875892f66b6bc2f5896": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1f0e391cb8eb440cbac613c6b7efa76c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2453cfbaeef04b8ba7be5ff0f5c29b79": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "25ea8a0b540e41799c0d8dbb8fbbc2a2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_33d5d065b50b4b8fada92bbd752b13f3",
        "IPY_MODEL_ea7acaa658b84ab1979aef1e8629057c",
        "IPY_MODEL_972e028d33ac47a98f24458ddffa6213"
       ],
       "layout": "IPY_MODEL_06871602522245ea89c153ebe8a8ce4d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2a16316bd9c84584b6d4121d8d469c89": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4e6fceb0e8c843c2a810a57ba8ba684d",
       "placeholder": "​",
       "style": "IPY_MODEL_42540405556a46cb913150e603aad977",
       "tabbable": null,
       "tooltip": null,
       "value": " 99/100 [00:03&lt;00:00, 27.34it/s]"
      }
     },
     "2a3dd5f691bc4f3e9986757f08740dd8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_826bc23d1ab54f3a884a94c634dc1aee",
       "placeholder": "​",
       "style": "IPY_MODEL_0d4e81b220634875892f66b6bc2f5896",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "3082b9c37b2449a6881368fe9de8ebaa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "33d5d065b50b4b8fada92bbd752b13f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c7e36e886a7f4775a481a84074720cb2",
       "placeholder": "​",
       "style": "IPY_MODEL_2453cfbaeef04b8ba7be5ff0f5c29b79",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "35fe6941406e4bc1a8ac95a7f78d16c8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3d4107e7f844423dbab38956feeb0529": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "40a57d7c1a5a4c41b1ccd3d3d14ed558": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "416596cb20294ce5b27c519b3c5ba96b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "42540405556a46cb913150e603aad977": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4a93acf793e349ed854636bffc01d055": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c8304cfa8d734ee386f09804a714c1e1",
       "placeholder": "​",
       "style": "IPY_MODEL_3082b9c37b2449a6881368fe9de8ebaa",
       "tabbable": null,
       "tooltip": null,
       "value": "processing MLE analyses: 100%"
      }
     },
     "4e6fceb0e8c843c2a810a57ba8ba684d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "54476ab533da4c2eb89086400b3a330d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6ca8b04e10af482d9f6064327e6b79df",
       "placeholder": "​",
       "style": "IPY_MODEL_35fe6941406e4bc1a8ac95a7f78d16c8",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "564d08b0b8494ed48385a609fd190f04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "575eb295de5841af85026398046d9e80": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5ac34f69854d43c88714ae1fa612a7bf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c2ac59e5fc03433eab41eab26dc714b8",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c50d75d4ae0c4cad97fdec2809c594ce",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "62d81c4207614d438f10586eee691f11": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c7adcb2c7e2f4105bc548efb6e322001",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d603c71eb3b245abab565c641aa55694",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "6526807b368048dfbc45718cf89c6a32": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "69f36832ef964b6284c173a71ad74606": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6ca8b04e10af482d9f6064327e6b79df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6e63078ae05549a9bbf393ac781a7b78": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6f2e6aa7ca9e4dbcb26ed800888d87a2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7e03c460a5b0406daa3c25c53882167b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "826bc23d1ab54f3a884a94c634dc1aee": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "85b31444f3d043ed81d9c72046d2ca75": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c7b761ddd0d041e49f4f1e9d9753a122",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9a3d5ef99f0f4698896b5f30482235a8",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "8f67a598222549cba2311b7a1dc354de": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f90aad16c1504ddabccd7ddd10ea31fd",
       "placeholder": "​",
       "style": "IPY_MODEL_6526807b368048dfbc45718cf89c6a32",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:03&lt;00:00, 279.29it/s]"
      }
     },
     "92c76796255548caa69c8bc7ea996f9d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "94df3039b7d647b79903a67bc6692470": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "96063047c328473aa284d9b1dabebf67": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "972e028d33ac47a98f24458ddffa6213": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6f2e6aa7ca9e4dbcb26ed800888d87a2",
       "placeholder": "​",
       "style": "IPY_MODEL_d7c2675a35254088a396b880447a1129",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:03&lt;00:00, 27.50it/s]"
      }
     },
     "9a3d5ef99f0f4698896b5f30482235a8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "affc0073d0a247509a46a4af79c5fb24": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c5b63fb49c664069af794d684ee3948d",
       "placeholder": "​",
       "style": "IPY_MODEL_92c76796255548caa69c8bc7ea996f9d",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors:  99%"
      }
     },
     "bbf29c4a52bb4dee8245f8ecfa2cd0a8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_affc0073d0a247509a46a4af79c5fb24",
        "IPY_MODEL_03f858fb7f664286a8820a8434015e61",
        "IPY_MODEL_2a16316bd9c84584b6d4121d8d469c89"
       ],
       "layout": "IPY_MODEL_69f36832ef964b6284c173a71ad74606",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c0a55a9594b74ff28ad5846c2a757ac7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2a3dd5f691bc4f3e9986757f08740dd8",
        "IPY_MODEL_85b31444f3d043ed81d9c72046d2ca75",
        "IPY_MODEL_c58ae83d89134adfa15ff5ee920af1ae"
       ],
       "layout": "IPY_MODEL_eb81f434e6764ea084f16afec2c94a1e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c2ac59e5fc03433eab41eab26dc714b8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c50d75d4ae0c4cad97fdec2809c594ce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c58ae83d89134adfa15ff5ee920af1ae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6e63078ae05549a9bbf393ac781a7b78",
       "placeholder": "​",
       "style": "IPY_MODEL_94df3039b7d647b79903a67bc6692470",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:00&lt;00:00, 271.26it/s]"
      }
     },
     "c5b63fb49c664069af794d684ee3948d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c7adcb2c7e2f4105bc548efb6e322001": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c7b761ddd0d041e49f4f1e9d9753a122": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c7e36e886a7f4775a481a84074720cb2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c8304cfa8d734ee386f09804a714c1e1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d603c71eb3b245abab565c641aa55694": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "d7c2675a35254088a396b880447a1129": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ea7acaa658b84ab1979aef1e8629057c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_96063047c328473aa284d9b1dabebf67",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_40a57d7c1a5a4c41b1ccd3d3d14ed558",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "eb81f434e6764ea084f16afec2c94a1e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f90aad16c1504ddabccd7ddd10ea31fd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fd6b564204564384bfa287173e4a8ed1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3d4107e7f844423dbab38956feeb0529",
       "placeholder": "​",
       "style": "IPY_MODEL_564d08b0b8494ed48385a609fd190f04",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/1 [00:04&lt;00:00,  4.55s/it]"
      }
     },
     "fd858736f74945dd8226b37fac55e561": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4a93acf793e349ed854636bffc01d055",
        "IPY_MODEL_62d81c4207614d438f10586eee691f11",
        "IPY_MODEL_fd6b564204564384bfa287173e4a8ed1"
       ],
       "layout": "IPY_MODEL_416596cb20294ce5b27c519b3c5ba96b",
       "tabbable": null,
       "tooltip": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
