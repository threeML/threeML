{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f92be1ad",
   "metadata": {},
   "source": [
    "# Analysis Results\n",
    "\n",
    "3ML stores the results of a fit in a container we call an \"Analysis Result\" (AR). The structure of this object is designed to be useable in a *live* sense within an *active* analysis (python script, ipython interactive shell, jupyter notebook) as well as storable as a FITS file for saving results for later.\n",
    "\n",
    "The structure is nearly the same between MLE and Bayesian analyses in order to make a seamless functionality between all analyses.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "35cb073a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:25.934008Z",
     "iopub.status.busy": "2023-11-03T05:18:25.933451Z",
     "iopub.status.idle": "2023-11-03T05:18:33.179174Z",
     "shell.execute_reply": "2023-11-03T05:18:33.178084Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")\n",
    "from threeML import *\n",
    "from threeML.analysis_results import *\n",
    "import astropy.units as u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "db3691a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:33.183807Z",
     "iopub.status.busy": "2023-11-03T05:18:33.182846Z",
     "iopub.status.idle": "2023-11-03T05:18:33.225872Z",
     "shell.execute_reply": "2023-11-03T05:18:33.224420Z"
    }
   },
   "outputs": [],
   "source": [
    "silence_logs()\n",
    "from tqdm.auto import tqdm\n",
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "set_threeML_style()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "062615a4",
   "metadata": {},
   "source": [
    "Let's take a look at what we can do with an AR. First, we will simulate some data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0f735f7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:33.228962Z",
     "iopub.status.busy": "2023-11-03T05:18:33.228589Z",
     "iopub.status.idle": "2023-11-03T05:18:34.728543Z",
     "shell.execute_reply": "2023-11-03T05:18:34.727298Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=2, b=0) + Gaussian(F=30.0, mu=25.0, sigma=1)\n",
    "\n",
    "# Generate a dataset using the line and a gaussian.\n",
    "# constant 20% error\n",
    "\n",
    "x = np.linspace(0, 50, 50)\n",
    "\n",
    "xy = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.2 * gen_function(x)\n",
    ")\n",
    "\n",
    "fig = xy.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5b1161b",
   "metadata": {},
   "source": [
    "## MLE Results\n",
    "\n",
    "\n",
    "First we will demonstrate how AR's work for an MLE analysis on our synthetic data. As we will see, most of the functionality exists in the Bayesian AR's as well.\n",
    "\n",
    "Let's do a simple likelihood maximization of our data and model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a02b5ea6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:34.732106Z",
     "iopub.status.busy": "2023-11-03T05:18:34.731503Z",
     "iopub.status.idle": "2023-11-03T05:18:35.803069Z",
     "shell.execute_reply": "2023-11-03T05:18:35.802065Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.05 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-2 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.8 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.500 +/- 0.015) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(10.0 +/- 1.4) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.05 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-2 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.8 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.500 +/- 0.015) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2  (10.0 +/- 1.4) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139705025570512\">\n",
       "<tr><td>1.00</td><td>-0.84</td><td>-0.03</td><td>-0.04</td><td>-0.10</td></tr>\n",
       "<tr><td>-0.84</td><td>1.00</td><td>0.00</td><td>-0.02</td><td>-0.01</td></tr>\n",
       "<tr><td>-0.03</td><td>0.00</td><td>1.00</td><td>-0.09</td><td>-0.18</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.02</td><td>-0.09</td><td>1.00</td><td>0.50</td></tr>\n",
       "<tr><td>-0.10</td><td>-0.01</td><td>-0.18</td><td>0.50</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.84 -0.03 -0.04 -0.10\n",
       "-0.84  1.00  0.00 -0.02 -0.01\n",
       "-0.03  0.00  1.00 -0.09 -0.18\n",
       "-0.04 -0.02 -0.09  1.00  0.50\n",
       "-0.10 -0.01 -0.18  0.50  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>19.225396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>19.225396</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         19.225396\n",
       "total            19.225396"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>49.814429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>58.010907</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             49.814429\n",
       "BIC             58.010907"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fitfun = Line() + Gaussian()\n",
    "\n",
    "fitfun.b_1.bounds = (-10, 10.0)\n",
    "fitfun.a_1.bounds = (-100, 100.0)\n",
    "fitfun.F_2 = 25.0\n",
    "fitfun.F_2.bounds = (1e-3, 200.0)\n",
    "fitfun.mu_2 = 25.0\n",
    "fitfun.mu_2.bounds = (0.0, 100.0)\n",
    "fitfun.sigma_2.bounds = (1e-3, 10.0)\n",
    "\n",
    "model = Model(PointSource(\"fake\", 0.0, 0.0, fitfun))\n",
    "\n",
    "data = DataList(xy)\n",
    "\n",
    "jl = JointLikelihood(model, DataList(xy))\n",
    "_ = jl.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "660b3c25",
   "metadata": {},
   "source": [
    "We can get our errors as always, but the results cannot be propagated (error propagation assumes Gaussian errors, i.e., symmetric errors)\n",
    "In this case though errors are pretty symmetric, so we are likely in the case\n",
    "where the MLE is actually normally distributed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "842092f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:35.807038Z",
     "iopub.status.busy": "2023-11-03T05:18:35.806152Z",
     "iopub.status.idle": "2023-11-03T05:18:35.918896Z",
     "shell.execute_reply": "2023-11-03T05:18:35.917904Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.05 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-2 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.8 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.500 +/- 0.015) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(10.0 -1.5 +1.4) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                        result  \\\n",
       "parameter                                                        \n",
       "fake.spectrum.main.composite.a_1                 2.05 +/- 0.11   \n",
       "fake.spectrum.main.composite.b_1            (-2 +/- 4) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2            (2.8 +/- 0.4) x 10   \n",
       "fake.spectrum.main.composite.mu_2       (2.500 +/- 0.015) x 10   \n",
       "fake.spectrum.main.composite.sigma_2  (10.0 -1.5 +1.4) x 10^-1   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.045003</td>\n",
       "      <td>-0.113689</td>\n",
       "      <td>0.113608</td>\n",
       "      <td>0.113648</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.001974</td>\n",
       "      <td>-0.003845</td>\n",
       "      <td>0.003844</td>\n",
       "      <td>0.003844</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>28.246621</td>\n",
       "      <td>-4.026997</td>\n",
       "      <td>4.017747</td>\n",
       "      <td>4.022372</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.995884</td>\n",
       "      <td>-0.151611</td>\n",
       "      <td>0.145748</td>\n",
       "      <td>0.148679</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.999312</td>\n",
       "      <td>-0.152895</td>\n",
       "      <td>0.139524</td>\n",
       "      <td>0.146210</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.045003       -0.113689   \n",
       "fake.spectrum.main.composite.b_1      -0.001974       -0.003845   \n",
       "fake.spectrum.main.composite.F_2      28.246621       -4.026997   \n",
       "fake.spectrum.main.composite.mu_2     24.995884       -0.151611   \n",
       "fake.spectrum.main.composite.sigma_2   0.999312       -0.152895   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.113608  0.113648   \n",
       "fake.spectrum.main.composite.b_1            0.003844  0.003844   \n",
       "fake.spectrum.main.composite.F_2            4.017747  4.022372   \n",
       "fake.spectrum.main.composite.mu_2           0.145748  0.148679   \n",
       "fake.spectrum.main.composite.sigma_2        0.139524  0.146210   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jl.get_errors()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31cde6f9",
   "metadata": {},
   "source": [
    "We need to get the AnalysisResults object that is created after a fit is performed. The AR object is a member of the JointLikelihood object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bc74de57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:35.922518Z",
     "iopub.status.busy": "2023-11-03T05:18:35.921856Z",
     "iopub.status.idle": "2023-11-03T05:18:35.928076Z",
     "shell.execute_reply": "2023-11-03T05:18:35.926795Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = jl.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b78e7b6",
   "metadata": {},
   "source": [
    "We can display the results of the analysis. Note, when a fit is performed, the post display is actaully from the internal AR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6cc32516",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:35.931613Z",
     "iopub.status.busy": "2023-11-03T05:18:35.931105Z",
     "iopub.status.idle": "2023-11-03T05:18:35.983224Z",
     "shell.execute_reply": "2023-11-03T05:18:35.982237Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.05 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-2 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.8 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.500 +/- 0.015) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(10.0 +/- 1.4) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.05 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-2 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.8 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.500 +/- 0.015) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2  (10.0 +/- 1.4) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139706230838656\">\n",
       "<tr><td>1.00</td><td>-0.84</td><td>-0.03</td><td>-0.04</td><td>-0.10</td></tr>\n",
       "<tr><td>-0.84</td><td>1.00</td><td>0.00</td><td>-0.02</td><td>-0.01</td></tr>\n",
       "<tr><td>-0.03</td><td>0.00</td><td>1.00</td><td>-0.09</td><td>-0.18</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.02</td><td>-0.09</td><td>1.00</td><td>0.50</td></tr>\n",
       "<tr><td>-0.10</td><td>-0.01</td><td>-0.18</td><td>0.50</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.84 -0.03 -0.04 -0.10\n",
       "-0.84  1.00  0.00 -0.02 -0.01\n",
       "-0.03  0.00  1.00 -0.09 -0.18\n",
       "-0.04 -0.02 -0.09  1.00  0.50\n",
       "-0.10 -0.01 -0.18  0.50  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>19.225396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>19.225396</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         19.225396\n",
       "total            19.225396"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>49.814429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>58.010907</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             49.814429\n",
       "BIC             58.010907"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1afccb2",
   "metadata": {},
   "source": [
    "By default, the equal tail intervals are displayed. We can instead display highest posterior densities (equal in the MLE case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cef10f93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:35.986404Z",
     "iopub.status.busy": "2023-11-03T05:18:35.985996Z",
     "iopub.status.idle": "2023-11-03T05:18:36.039995Z",
     "shell.execute_reply": "2023-11-03T05:18:36.038877Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.05 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-2 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.8 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.500 +/- 0.015) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(10.0 +/- 1.4) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.05 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-2 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.8 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.500 +/- 0.015) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2  (10.0 +/- 1.4) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139705028783456\">\n",
       "<tr><td>1.00</td><td>-0.84</td><td>-0.03</td><td>-0.04</td><td>-0.10</td></tr>\n",
       "<tr><td>-0.84</td><td>1.00</td><td>0.00</td><td>-0.02</td><td>-0.01</td></tr>\n",
       "<tr><td>-0.03</td><td>0.00</td><td>1.00</td><td>-0.09</td><td>-0.18</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.02</td><td>-0.09</td><td>1.00</td><td>0.50</td></tr>\n",
       "<tr><td>-0.10</td><td>-0.01</td><td>-0.18</td><td>0.50</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.84 -0.03 -0.04 -0.10\n",
       "-0.84  1.00  0.00 -0.02 -0.01\n",
       "-0.03  0.00  1.00 -0.09 -0.18\n",
       "-0.04 -0.02 -0.09  1.00  0.50\n",
       "-0.10 -0.01 -0.18  0.50  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>19.225396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>19.225396</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         19.225396\n",
       "total            19.225396"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>49.814429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>58.010907</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             49.814429\n",
       "BIC             58.010907"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9697d7ef",
   "metadata": {},
   "source": [
    "The AR stores several properties from the analysis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "736fe07f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:36.043489Z",
     "iopub.status.busy": "2023-11-03T05:18:36.042857Z",
     "iopub.status.idle": "2023-11-03T05:18:36.049802Z",
     "shell.execute_reply": "2023-11-03T05:18:36.048777Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'MLE'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.analysis_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6c4e1ac3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:36.053103Z",
     "iopub.status.busy": "2023-11-03T05:18:36.052832Z",
     "iopub.status.idle": "2023-11-03T05:18:36.061230Z",
     "shell.execute_reply": "2023-11-03T05:18:36.060407Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.29159736e-02, -3.68928724e-04, -1.55135145e-02,\n",
       "        -5.96257762e-04, -1.64662749e-03],\n",
       "       [-3.68928724e-04,  1.47779551e-05,  3.02515064e-05,\n",
       "        -1.24440674e-05, -5.93418238e-06],\n",
       "       [-1.55135145e-02,  3.02515064e-05,  1.61755667e+01,\n",
       "        -5.02877264e-02, -1.04354862e-01],\n",
       "       [-5.96257762e-04, -1.24440674e-05, -5.02877264e-02,\n",
       "         2.13040344e-02,  1.03105160e-02],\n",
       "       [-1.64662749e-03, -5.93418238e-06, -1.04354862e-01,\n",
       "         1.03105160e-02,  2.03444305e-02]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.covariance_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3eacafd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:36.064449Z",
     "iopub.status.busy": "2023-11-03T05:18:36.063869Z",
     "iopub.status.idle": "2023-11-03T05:18:39.768530Z",
     "shell.execute_reply": "2023-11-03T05:18:39.767606Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2da94c40ace54682bad7a73ac2763137",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "processing MLE analyses:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flux</th>\n",
       "      <th>low bound</th>\n",
       "      <th>hi bound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake: total</th>\n",
       "      <td>1.649116531837228e-05 erg / (s cm2)</td>\n",
       "      <td>1.5113516158520111e-05 erg / (s cm2)</td>\n",
       "      <td>1.782585008779556e-05 erg / (s cm2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            flux  \\\n",
       "fake: total  1.649116531837228e-05 erg / (s cm2)   \n",
       "\n",
       "                                        low bound  \\\n",
       "fake: total  1.5113516158520111e-05 erg / (s cm2)   \n",
       "\n",
       "                                        hi bound  \n",
       "fake: total  1.782585008779556e-05 erg / (s cm2)  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.get_point_source_flux(1 * u.keV, 0.1 * u.MeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "75f0dc95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:39.771866Z",
     "iopub.status.busy": "2023-11-03T05:18:39.771595Z",
     "iopub.status.idle": "2023-11-03T05:18:39.798135Z",
     "shell.execute_reply": "2023-11-03T05:18:39.797344Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (5):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.045003</td>\n",
       "      <td>-100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.001974</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>s-1 cm-2 keV-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>28.246621</td>\n",
       "      <td>0.001</td>\n",
       "      <td>200.0</td>\n",
       "      <td>s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.995884</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.999312</td>\n",
       "      <td>0.001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (2):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (0):<br><br>(none)<br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     1\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (5):\n",
       "--------------------\n",
       "\n",
       "                                          value min_value max_value  \\\n",
       "fake.spectrum.main.composite.a_1       2.045003    -100.0     100.0   \n",
       "fake.spectrum.main.composite.b_1      -0.001974     -10.0      10.0   \n",
       "fake.spectrum.main.composite.F_2      28.246621     0.001     200.0   \n",
       "fake.spectrum.main.composite.mu_2     24.995884       0.0     100.0   \n",
       "fake.spectrum.main.composite.sigma_2   0.999312     0.001      10.0   \n",
       "\n",
       "                                                unit  \n",
       "fake.spectrum.main.composite.a_1      keV-1 s-1 cm-2  \n",
       "fake.spectrum.main.composite.b_1      s-1 cm-2 keV-2  \n",
       "fake.spectrum.main.composite.F_2            s-1 cm-2  \n",
       "fake.spectrum.main.composite.mu_2                keV  \n",
       "fake.spectrum.main.composite.sigma_2             keV  \n",
       "\n",
       "Fixed parameters (2):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (0):\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.optimized_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ddcec6e",
   "metadata": {},
   "source": [
    "## Saving results to disk\n",
    "\n",
    "The beauty of the analysis result is that all of this information can be written to disk and restored at a later time. The statistical parameters, best-fit model, etc. can all be recovered.\n",
    "\n",
    "AR's are stored as a structured FITS file. We write the AR like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8378e1a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:39.801926Z",
     "iopub.status.busy": "2023-11-03T05:18:39.801660Z",
     "iopub.status.idle": "2023-11-03T05:18:39.864684Z",
     "shell.execute_reply": "2023-11-03T05:18:39.863909Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "ar.write_to(\"test_mle.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc421e68",
   "metadata": {},
   "source": [
    "The FITS file can be examines with any normal FITS reader."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "601a11e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:39.868140Z",
     "iopub.status.busy": "2023-11-03T05:18:39.867716Z",
     "iopub.status.idle": "2023-11-03T05:18:39.873252Z",
     "shell.execute_reply": "2023-11-03T05:18:39.872202Z"
    }
   },
   "outputs": [],
   "source": [
    "import astropy.io.fits as fits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a5d59595",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:39.876601Z",
     "iopub.status.busy": "2023-11-03T05:18:39.875924Z",
     "iopub.status.idle": "2023-11-03T05:18:39.883477Z",
     "shell.execute_reply": "2023-11-03T05:18:39.882491Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: test_mle.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       6   ()      \n",
      "  1  ANALYSIS_RESULTS    1 BinTableHDU     38   5R x 9C   [36A, D, D, D, D, 16A, 5D, D, D]   \n"
     ]
    }
   ],
   "source": [
    "ar_fits = fits.open(\"test_mle.fits\")\n",
    "ar_fits.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e557b80",
   "metadata": {},
   "source": [
    "However, to easily pull the results back into the 3ML framework, we use the ${\\tt load\\_analysis\\_results}$ function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d45b1c80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:39.887182Z",
     "iopub.status.busy": "2023-11-03T05:18:39.886484Z",
     "iopub.status.idle": "2023-11-03T05:18:39.980404Z",
     "shell.execute_reply": "2023-11-03T05:18:39.979495Z"
    }
   },
   "outputs": [],
   "source": [
    "ar_reloaded = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d8b73251",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:39.983810Z",
     "iopub.status.busy": "2023-11-03T05:18:39.983554Z",
     "iopub.status.idle": "2023-11-03T05:18:39.992133Z",
     "shell.execute_reply": "2023-11-03T05:18:39.991260Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>19.225396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>19.225396</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         19.225396\n",
       "total            19.225396"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_statistic_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2d8c029",
   "metadata": {},
   "source": [
    "You can get a DataFrame with the saved results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "aca93bef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:39.996368Z",
     "iopub.status.busy": "2023-11-03T05:18:39.996098Z",
     "iopub.status.idle": "2023-11-03T05:18:40.022676Z",
     "shell.execute_reply": "2023-11-03T05:18:40.021749Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.045003</td>\n",
       "      <td>-0.111258</td>\n",
       "      <td>0.113403</td>\n",
       "      <td>0.112330</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.001974</td>\n",
       "      <td>-0.003783</td>\n",
       "      <td>0.003767</td>\n",
       "      <td>0.003775</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>28.246621</td>\n",
       "      <td>-3.991530</td>\n",
       "      <td>3.959259</td>\n",
       "      <td>3.975394</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.995884</td>\n",
       "      <td>-0.145574</td>\n",
       "      <td>0.145549</td>\n",
       "      <td>0.145561</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.999312</td>\n",
       "      <td>-0.144576</td>\n",
       "      <td>0.142154</td>\n",
       "      <td>0.143365</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.045003       -0.111258   \n",
       "fake.spectrum.main.composite.b_1      -0.001974       -0.003783   \n",
       "fake.spectrum.main.composite.F_2      28.246621       -3.991530   \n",
       "fake.spectrum.main.composite.mu_2     24.995884       -0.145574   \n",
       "fake.spectrum.main.composite.sigma_2   0.999312       -0.144576   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.113403  0.112330   \n",
       "fake.spectrum.main.composite.b_1            0.003767  0.003775   \n",
       "fake.spectrum.main.composite.F_2            3.959259  3.975394   \n",
       "fake.spectrum.main.composite.mu_2           0.145549  0.145561   \n",
       "fake.spectrum.main.composite.sigma_2        0.142154  0.143365   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_data_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ab924c9",
   "metadata": {},
   "source": [
    "## Analysis Result Sets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3226444",
   "metadata": {},
   "source": [
    "When doing time-resolved analysis or analysing a several objects, we can save several AR's is a set. This is achieved with the analysis result set. We can pass an array of AR's to the set and even set up descriptions for the different entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3822d100",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:40.027087Z",
     "iopub.status.busy": "2023-11-03T05:18:40.026775Z",
     "iopub.status.idle": "2023-11-03T05:18:40.134128Z",
     "shell.execute_reply": "2023-11-03T05:18:40.133345Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "from threeML.analysis_results import AnalysisResultsSet\n",
    "\n",
    "analysis_set = AnalysisResultsSet([ar, ar_reloaded])\n",
    "\n",
    "# index as time bins\n",
    "analysis_set.set_bins(\"testing\", [-1, 1], [3, 5], unit=\"s\")\n",
    "\n",
    "# write to disk\n",
    "analysis_set.write_to(\"analysis_set_test.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f79258c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:40.137637Z",
     "iopub.status.busy": "2023-11-03T05:18:40.137133Z",
     "iopub.status.idle": "2023-11-03T05:18:40.328753Z",
     "shell.execute_reply": "2023-11-03T05:18:40.327660Z"
    }
   },
   "outputs": [],
   "source": [
    "analysis_set = load_analysis_results(\"analysis_set_test.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0cfc0aab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:40.332966Z",
     "iopub.status.busy": "2023-11-03T05:18:40.332258Z",
     "iopub.status.idle": "2023-11-03T05:18:40.384356Z",
     "shell.execute_reply": "2023-11-03T05:18:40.383252Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.05 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-2 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.8 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.500 +/- 0.015) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(10.0 +/- 1.4) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.05 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-2 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.8 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.500 +/- 0.015) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2  (10.0 +/- 1.4) x 10^-1               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table139705025087136\">\n",
       "<tr><td>1.00</td><td>-0.84</td><td>-0.03</td><td>-0.04</td><td>-0.10</td></tr>\n",
       "<tr><td>-0.84</td><td>1.00</td><td>0.00</td><td>-0.02</td><td>-0.01</td></tr>\n",
       "<tr><td>-0.03</td><td>0.00</td><td>1.00</td><td>-0.09</td><td>-0.18</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.02</td><td>-0.09</td><td>1.00</td><td>0.50</td></tr>\n",
       "<tr><td>-0.10</td><td>-0.01</td><td>-0.18</td><td>0.50</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.84 -0.03 -0.04 -0.10\n",
       "-0.84  1.00  0.00 -0.02 -0.01\n",
       "-0.03  0.00  1.00 -0.09 -0.18\n",
       "-0.04 -0.02 -0.09  1.00  0.50\n",
       "-0.10 -0.01 -0.18  0.50  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>19.225396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>19.225396</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         19.225396\n",
       "total            19.225396"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>49.814429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>58.010907</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             49.814429\n",
       "BIC             58.010907"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis_set[0].display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b481e8c4",
   "metadata": {},
   "source": [
    "## Error propagation\n",
    "In 3ML, we propagate errors for MLE reults via sampling of the covariance matrix *instead* of Taylor exanding around the maximum of the likelihood and computing a jacobain. Thus, we can achieve non-linear error propagation.\n",
    "\n",
    "You can use the results for propagating errors non-linearly for analytical functions:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a9ef94b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:40.387533Z",
     "iopub.status.busy": "2023-11-03T05:18:40.387273Z",
     "iopub.status.idle": "2023-11-03T05:18:40.398500Z",
     "shell.execute_reply": "2023-11-03T05:18:40.397362Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Propagating a+b, with a and b respectively:\n",
      "equal-tail: (-2 +/- 4) x 10^-3, hpd: (-2 +/- 4) x 10^-3\n",
      "equal-tail: 2.05 +/- 0.11, hpd: 2.05 +/- 0.11\n",
      "\n",
      "This is the result (with errors):\n",
      "equal-tail: 2.05 +/- 0.11, hpd: 2.05 -0.11 +0.10\n",
      "(1.9386882513610189, 2.1532110295235536)\n"
     ]
    }
   ],
   "source": [
    "p1 = ar.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(\"Propagating a+b, with a and b respectively:\")\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "print(\"\\nThis is the result (with errors):\")\n",
    "res = p1 + p2\n",
    "print(res)\n",
    "\n",
    "print(res.equal_tail_interval())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8a1b327",
   "metadata": {},
   "source": [
    "The propagation accounts for covariances. For example this\n",
    "has error of zero (of course) since there is perfect covariance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c7ec8e13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:40.401742Z",
     "iopub.status.busy": "2023-11-03T05:18:40.401448Z",
     "iopub.status.idle": "2023-11-03T05:18:40.408428Z",
     "shell.execute_reply": "2023-11-03T05:18:40.407230Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is 50 * a/a:\n",
      "equal-tail: (5.0 +/- 0) x 10, hpd: (5.0 +/- 0) x 10\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is 50 * a/a:\")\n",
    "print(50 * p1 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a301f53",
   "metadata": {},
   "source": [
    "You can use arbitrary (np) functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "721de0f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:40.412082Z",
     "iopub.status.busy": "2023-11-03T05:18:40.411457Z",
     "iopub.status.idle": "2023-11-03T05:18:40.419094Z",
     "shell.execute_reply": "2023-11-03T05:18:40.418261Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is arcsinh(b + 5*) / np.log10(b) (why not?)\n",
      "equal-tail: 9.7 -0.5 +0.6, hpd: 9.7 -0.6 +0.5\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is arcsinh(b + 5*) / np.log10(b) (why not?)\")\n",
    "print(np.arcsinh(p1 + 5 * p2) / np.log10(p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8556fd2d",
   "metadata": {},
   "source": [
    "Errors can become asymmetric. For example, the ratio of two gaussians is\n",
    "asymmetric notoriously:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "68d06e2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:40.422606Z",
     "iopub.status.busy": "2023-11-03T05:18:40.421993Z",
     "iopub.status.idle": "2023-11-03T05:18:40.429730Z",
     "shell.execute_reply": "2023-11-03T05:18:40.428878Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Ratio a/b:\n",
      "equal-tail: (-0.4 -0.9 +1.3) x 10^3, hpd: (-0.4 -0.9 +1.2) x 10^3\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nRatio a/b:\")\n",
    "print(p2 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f97254e",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "You can always use it with arbitrary functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1ed0c65e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:40.432653Z",
     "iopub.status.busy": "2023-11-03T05:18:40.432412Z",
     "iopub.status.idle": "2023-11-03T05:18:40.439364Z",
     "shell.execute_reply": "2023-11-03T05:18:40.438378Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Propagating using a custom function:\n",
      "equal-tail: 2.04 -0.10 +0.11, hpd: 2.04 -0.11 +0.10\n"
     ]
    }
   ],
   "source": [
    "def my_function(x, a, b):\n",
    "    return b * x**a\n",
    "\n",
    "\n",
    "print(\"\\nPropagating using a custom function:\")\n",
    "print(my_function(2.3, p1, p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b2b113f",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "This is an example of an error propagation to get the plot of the model with its errors\n",
    "(which are propagated without assuming linearity on parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6d77bf16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:40.442956Z",
     "iopub.status.busy": "2023-11-03T05:18:40.442467Z",
     "iopub.status.idle": "2023-11-03T05:18:40.451550Z",
     "shell.execute_reply": "2023-11-03T05:18:40.450669Z"
    }
   },
   "outputs": [],
   "source": [
    "def go(fitfun, ar, model):\n",
    "    fig, ax = plt.subplots()\n",
    "\n",
    "    # Gather the parameter variates\n",
    "\n",
    "    arguments = {}\n",
    "\n",
    "    for par in fitfun.parameters.values():\n",
    "        if par.free:\n",
    "            this_name = par.name\n",
    "\n",
    "            this_variate = ar.get_variates(par.path)\n",
    "\n",
    "            # Do not use more than 1000 values (would make computation too slow for nothing)\n",
    "\n",
    "            if len(this_variate) > 1000:\n",
    "                this_variate = np.random.choice(this_variate, size=1000)\n",
    "\n",
    "            arguments[this_name] = this_variate\n",
    "\n",
    "    # Prepare the error propagator function\n",
    "\n",
    "    pp = ar.propagate(\n",
    "        ar.optimized_model.fake.spectrum.main.shape.evaluate_at, **arguments\n",
    "    )\n",
    "\n",
    "    # You can just use it as:\n",
    "\n",
    "    print(pp(5.0))\n",
    "\n",
    "    # Make the plot\n",
    "\n",
    "    energies = np.linspace(0, 50, 100)\n",
    "\n",
    "    low_curve = np.zeros_like(energies)\n",
    "    middle_curve = np.zeros_like(energies)\n",
    "    hi_curve = np.zeros_like(energies)\n",
    "\n",
    "    free_parameters = model.free_parameters\n",
    "\n",
    "    p = tqdm(total=len(energies), desc=\"Propagating errors\")\n",
    "\n",
    "    with use_astromodels_memoization(False):\n",
    "        for i, e in enumerate(energies):\n",
    "            this_flux = pp(e)\n",
    "\n",
    "            low_bound, hi_bound = this_flux.equal_tail_interval()\n",
    "\n",
    "            low_curve[i], middle_curve[i], hi_curve[i] = (\n",
    "                low_bound,\n",
    "                this_flux.median,\n",
    "                hi_bound,\n",
    "            )\n",
    "\n",
    "            p.update(1)\n",
    "\n",
    "    ax.plot(energies, middle_curve, \"--\", color=\"black\")\n",
    "    ax.fill_between(energies, low_curve, hi_curve, alpha=0.5, color=\"blue\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "fb1e0332",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:40.455003Z",
     "iopub.status.busy": "2023-11-03T05:18:40.454377Z",
     "iopub.status.idle": "2023-11-03T05:18:46.835867Z",
     "shell.execute_reply": "2023-11-03T05:18:46.834913Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 2.03 +/- 0.11, hpd: 2.03 -0.10 +0.11\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "192041cd3f9b49aa995861c8df393a43",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar, model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f90eb2c",
   "metadata": {},
   "source": [
    "## Bayesian Analysis Results\n",
    "Analysis Results work exactly the same under Bayesian analysis.\n",
    "\n",
    "Let's run the analysis first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5ece6662",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:46.839744Z",
     "iopub.status.busy": "2023-11-03T05:18:46.839069Z",
     "iopub.status.idle": "2023-11-03T05:18:57.004146Z",
     "shell.execute_reply": "2023-11-03T05:18:57.003207Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cfe11bc7ae0e4c32b8a3b5809c22baa4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7a4141a3f1494e1c8b9f23cd4125b289",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Maximum a posteriori probability (MAP) point:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mMaximum a posteriori probability \u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mMAP\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m point:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.05 -0.11 +0.12</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-2.2 -3.3 +4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.81 -0.9 +0.19) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.499 -0.019 +0.022) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>(9.8 -2.6 +1.4) x 10^-1</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                2.05 -0.11 +0.12   \n",
       "fake.spectrum.main.composite.b_1          (-2.2 -3.3 +4) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2          (2.81 -0.9 +0.19) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.499 -0.019 +0.022) x 10   \n",
       "fake.spectrum.main.composite.sigma_2     (9.8 -2.6 +1.4) x 10^-1   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(posterior) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mposterior\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(posterior)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>-22.554604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>-22.554604</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(posterior)\n",
       "sim_data       -22.554604\n",
       "total          -22.554604"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>56.472843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>64.669322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIC</th>\n",
       "      <td>-50.454982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PDIC</th>\n",
       "      <td>-104.342174</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      statistical measures\n",
       "AIC              56.472843\n",
       "BIC              64.669322\n",
       "DIC             -50.454982\n",
       "PDIC           -104.342174"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for parameter in ar.optimized_model:\n",
    "    model[parameter.path].value = parameter.value\n",
    "\n",
    "model.fake.spectrum.main.composite.a_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.b_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.F_2.set_uninformative_prior(Log_uniform_prior)\n",
    "model.fake.spectrum.main.composite.mu_2.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.sigma_2.set_uninformative_prior(Log_uniform_prior)\n",
    "\n",
    "bs = BayesianAnalysis(model, data)\n",
    "bs.set_sampler(\"emcee\")\n",
    "bs.sampler.setup(n_iterations=1000, n_burn_in=100, n_walkers=20)\n",
    "samples = bs.sample()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9f79398",
   "metadata": {},
   "source": [
    "Again, we grab the results from the BayesianAnalysis object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "27724d4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:57.007758Z",
     "iopub.status.busy": "2023-11-03T05:18:57.007391Z",
     "iopub.status.idle": "2023-11-03T05:18:57.012063Z",
     "shell.execute_reply": "2023-11-03T05:18:57.011209Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2 = bs.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f58c2cfd",
   "metadata": {},
   "source": [
    "We can write and read the results to/from a file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "51b6ce04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:57.015732Z",
     "iopub.status.busy": "2023-11-03T05:18:57.015015Z",
     "iopub.status.idle": "2023-11-03T05:18:57.103781Z",
     "shell.execute_reply": "2023-11-03T05:18:57.102801Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "ar2.write_to(\"test_bayes.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4935e563",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:57.107389Z",
     "iopub.status.busy": "2023-11-03T05:18:57.106778Z",
     "iopub.status.idle": "2023-11-03T05:18:57.177799Z",
     "shell.execute_reply": "2023-11-03T05:18:57.176714Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2_reloaded = load_analysis_results(\"test_bayes.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1b25fbe",
   "metadata": {},
   "source": [
    "The AR holds the posterior samples from the analysis. We can see the saved and live reults are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "dbabdb82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:57.181132Z",
     "iopub.status.busy": "2023-11-03T05:18:57.180822Z",
     "iopub.status.idle": "2023-11-03T05:18:57.256225Z",
     "shell.execute_reply": "2023-11-03T05:18:57.255262Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.allclose(ar2_reloaded.samples, ar2.samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fd9226d",
   "metadata": {},
   "source": [
    "**NOTE:** *MLE AR's store samples as well. These are the samples from the covariance matrix*\n",
    "\n",
    "We can examine the marginal distributions of the parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1ab00e9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:57.259595Z",
     "iopub.status.busy": "2023-11-03T05:18:57.259294Z",
     "iopub.status.idle": "2023-11-03T05:18:59.370087Z",
     "shell.execute_reply": "2023-11-03T05:18:59.369200Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1180x1180 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = ar2.corner_plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dee64e7d",
   "metadata": {},
   "source": [
    "We can return pandas DataFrames with equal tail or HPD results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "14ee87c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:59.375630Z",
     "iopub.status.busy": "2023-11-03T05:18:59.374848Z",
     "iopub.status.idle": "2023-11-03T05:18:59.404054Z",
     "shell.execute_reply": "2023-11-03T05:18:59.403095Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.048826</td>\n",
       "      <td>-0.110587</td>\n",
       "      <td>0.124400</td>\n",
       "      <td>0.117494</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.002165</td>\n",
       "      <td>-0.003291</td>\n",
       "      <td>0.003751</td>\n",
       "      <td>0.003521</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>28.088147</td>\n",
       "      <td>-8.541423</td>\n",
       "      <td>1.902449</td>\n",
       "      <td>5.221936</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.990561</td>\n",
       "      <td>-0.188203</td>\n",
       "      <td>0.221878</td>\n",
       "      <td>0.205041</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.981897</td>\n",
       "      <td>-0.261386</td>\n",
       "      <td>0.138608</td>\n",
       "      <td>0.199997</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.048826       -0.110587   \n",
       "fake.spectrum.main.composite.b_1      -0.002165       -0.003291   \n",
       "fake.spectrum.main.composite.F_2      28.088147       -8.541423   \n",
       "fake.spectrum.main.composite.mu_2     24.990561       -0.188203   \n",
       "fake.spectrum.main.composite.sigma_2   0.981897       -0.261386   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.124400  0.117494   \n",
       "fake.spectrum.main.composite.b_1            0.003751  0.003521   \n",
       "fake.spectrum.main.composite.F_2            1.902449  5.221936   \n",
       "fake.spectrum.main.composite.mu_2           0.221878  0.205041   \n",
       "fake.spectrum.main.composite.sigma_2        0.138608  0.199997   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"equal tail\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "3c113295",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:59.407536Z",
     "iopub.status.busy": "2023-11-03T05:18:59.406986Z",
     "iopub.status.idle": "2023-11-03T05:18:59.440915Z",
     "shell.execute_reply": "2023-11-03T05:18:59.440091Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.048826</td>\n",
       "      <td>-0.093865</td>\n",
       "      <td>0.126736</td>\n",
       "      <td>0.110301</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.002165</td>\n",
       "      <td>-0.003437</td>\n",
       "      <td>0.003570</td>\n",
       "      <td>0.003504</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>28.088147</td>\n",
       "      <td>-6.772566</td>\n",
       "      <td>3.030360</td>\n",
       "      <td>4.901463</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.990561</td>\n",
       "      <td>-0.220856</td>\n",
       "      <td>0.177627</td>\n",
       "      <td>0.199241</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>0.981897</td>\n",
       "      <td>-0.297486</td>\n",
       "      <td>0.086337</td>\n",
       "      <td>0.191912</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.048826       -0.093865   \n",
       "fake.spectrum.main.composite.b_1      -0.002165       -0.003437   \n",
       "fake.spectrum.main.composite.F_2      28.088147       -6.772566   \n",
       "fake.spectrum.main.composite.mu_2     24.990561       -0.220856   \n",
       "fake.spectrum.main.composite.sigma_2   0.981897       -0.297486   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.126736  0.110301   \n",
       "fake.spectrum.main.composite.b_1            0.003570  0.003504   \n",
       "fake.spectrum.main.composite.F_2            3.030360  4.901463   \n",
       "fake.spectrum.main.composite.mu_2           0.177627  0.199241   \n",
       "fake.spectrum.main.composite.sigma_2        0.086337  0.191912   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb13ce1e",
   "metadata": {},
   "source": [
    "Error propagation operates the same way. Internally, the process is the same as the MLE results, however, the samples are those of the posterior rather than the (assumed) covariance matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4e7bc380",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:59.444781Z",
     "iopub.status.busy": "2023-11-03T05:18:59.444052Z",
     "iopub.status.idle": "2023-11-03T05:18:59.459007Z",
     "shell.execute_reply": "2023-11-03T05:18:59.458118Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: (-1.8 -4 +3.4) x 10^-3, hpd: (-1.8 -4 +3.2) x 10^-3\n",
      "equal-tail: 2.06 +/- 0.12, hpd: 2.06 -0.10 +0.12\n",
      "equal-tail: 2.05 -0.12 +0.11, hpd: 2.05 -0.10 +0.12\n"
     ]
    }
   ],
   "source": [
    "p1 = ar2.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar2.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "res = p1 + p2\n",
    "\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2cb37e8",
   "metadata": {},
   "source": [
    "To demonstrate how the two objects (MLE and Bayes) are the same, we see that our plotting function written for the MLE result works on our Bayesian results seamlessly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4f3c6876",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-03T05:18:59.463583Z",
     "iopub.status.busy": "2023-11-03T05:18:59.461775Z",
     "iopub.status.idle": "2023-11-03T05:19:06.304290Z",
     "shell.execute_reply": "2023-11-03T05:19:06.303255Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 2.04 -0.11 +0.12, hpd: 2.04 -0.09 +0.13\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "aef07d9f16824fd2b77ab94ce6ed891a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar2, model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13cb03da",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "01cf498cd4b04facbddc37cb66c9becb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7a180a67166644489817d19d03ea7468",
       "placeholder": "​",
       "style": "IPY_MODEL_17e8d2fcee1948449392bb8cfc7d3d61",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "0b92a32f7a49472b858bf2c59e938ec7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "11df08805cd64e18a35c23b936bdf2be": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "14d1c0be1e1a44588d415937c593ce53": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "17e8d2fcee1948449392bb8cfc7d3d61": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "192041cd3f9b49aa995861c8df393a43": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_01cf498cd4b04facbddc37cb66c9becb",
        "IPY_MODEL_46ca8e4c1d9043698aa695960913036e",
        "IPY_MODEL_b2c28d00bae844ebbea2e884b41580e5"
       ],
       "layout": "IPY_MODEL_312c2e1737ce43b186a2d42c8dabca28",
       "tabbable": null,
       "tooltip": null
      }
     },
     "19a9345b99ce4a4c80b554a11117db76": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "21b5f40d067b40568fbdf5ada37960b8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "23ea13a2763441219c01e96f1f50bd77": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4b4c5f55d2bb4670ab2a48da184e7588",
       "placeholder": "​",
       "style": "IPY_MODEL_523d1213b44f4ab5a1da86f4d733203a",
       "tabbable": null,
       "tooltip": null,
       "value": "processing MLE analyses: 100%"
      }
     },
     "292b7c261cb24421b5c36828f7a40a26": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f240beb1e20d4c13a2ea7e44871b8b66",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_bbfe9a98be2e4cb8bbd7eede556db62c",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "2da94c40ace54682bad7a73ac2763137": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_23ea13a2763441219c01e96f1f50bd77",
        "IPY_MODEL_92bd8afa951a4ecd9ed69e421dbcc736",
        "IPY_MODEL_7ed3725e219f4491a06d42d6ca76aede"
       ],
       "layout": "IPY_MODEL_e7278870fbc14bdbab688e760d72059c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "312c2e1737ce43b186a2d42c8dabca28": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3c549787e13c4e44be9379c083d9c937": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3c7f36e106dd451f9397d3efc3381d41": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3e32a8053683482998c213746d3bc11e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fea482d4118d4ccf9349201af82806f8",
       "placeholder": "​",
       "style": "IPY_MODEL_0b92a32f7a49472b858bf2c59e938ec7",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "4280aa3c2d1b4906a28578ecd1b6d64d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5c8a6456a4c3441f8c6009d80a32e882",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_fdba02dc3b904b729fcecf448892ec03",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "46ca8e4c1d9043698aa695960913036e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_71c96149aef24079896474bf18e39dc9",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a665cdb7c3484bb9a012a5651e83390d",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "47d942f49fd74aaf802964bdf1519f17": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "49719cd51aac4212bf2a8420d288fb3d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4b4c5f55d2bb4670ab2a48da184e7588": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "51bc0af39a28405ea4b7b06b63ea1831": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "523d1213b44f4ab5a1da86f4d733203a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "535cabcabdec4c85b445c20c4d7f3859": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5c8a6456a4c3441f8c6009d80a32e882": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6603152bcd6d4df78a0732a5aa1edce3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6f68891f614d4d448f9e1c69d4b1aab2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "71c96149aef24079896474bf18e39dc9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "73469ca63a3c4183aead16513442f86a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7a180a67166644489817d19d03ea7468": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7a4141a3f1494e1c8b9f23cd4125b289": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3e32a8053683482998c213746d3bc11e",
        "IPY_MODEL_4280aa3c2d1b4906a28578ecd1b6d64d",
        "IPY_MODEL_a179d3e498034d11a6b8b531ef98d1ba"
       ],
       "layout": "IPY_MODEL_51bc0af39a28405ea4b7b06b63ea1831",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7d4bc41e67ae427db02054df9f1631a8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7ed3725e219f4491a06d42d6ca76aede": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_11df08805cd64e18a35c23b936bdf2be",
       "placeholder": "​",
       "style": "IPY_MODEL_14d1c0be1e1a44588d415937c593ce53",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/1 [00:03&lt;00:00,  3.68s/it]"
      }
     },
     "8942a4c55ce34b2b9d4383b7c9f6d1fd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "92bd8afa951a4ecd9ed69e421dbcc736": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_535cabcabdec4c85b445c20c4d7f3859",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6f68891f614d4d448f9e1c69d4b1aab2",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "92dcbe5145f04469bca22c6740a895d6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9fce061a8303402a9a962e20a341cc4d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a179d3e498034d11a6b8b531ef98d1ba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_af6e70210d3e4ad0bd305ba6a522790e",
       "placeholder": "​",
       "style": "IPY_MODEL_47d942f49fd74aaf802964bdf1519f17",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:06&lt;00:00, 151.60it/s]"
      }
     },
     "a397d012caa04abf9453dbbea485a156": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a665cdb7c3484bb9a012a5651e83390d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "aef07d9f16824fd2b77ab94ce6ed891a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b21423f0b33c4c0399876b873c8d4346",
        "IPY_MODEL_f401bc68609747cf906dedb18ef7cc9a",
        "IPY_MODEL_f88a7ed5253c43aeae688ab02affe496"
       ],
       "layout": "IPY_MODEL_6603152bcd6d4df78a0732a5aa1edce3",
       "tabbable": null,
       "tooltip": null
      }
     },
     "af6e70210d3e4ad0bd305ba6a522790e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b21423f0b33c4c0399876b873c8d4346": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_21b5f40d067b40568fbdf5ada37960b8",
       "placeholder": "​",
       "style": "IPY_MODEL_9fce061a8303402a9a962e20a341cc4d",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "b2c28d00bae844ebbea2e884b41580e5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8942a4c55ce34b2b9d4383b7c9f6d1fd",
       "placeholder": "​",
       "style": "IPY_MODEL_db3ac4a211c24ed6bb484e556d7735b6",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:06&lt;00:00, 16.44it/s]"
      }
     },
     "b8f90f0697854327b44310cf2b6c2d19": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bbfe9a98be2e4cb8bbd7eede556db62c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "cfe11bc7ae0e4c32b8a3b5809c22baa4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_eb29d8fe9ad54f98a90ce492f0b4a7d4",
        "IPY_MODEL_292b7c261cb24421b5c36828f7a40a26",
        "IPY_MODEL_e9955cea2b2143d8bb994bc0b6b0b078"
       ],
       "layout": "IPY_MODEL_92dcbe5145f04469bca22c6740a895d6",
       "tabbable": null,
       "tooltip": null
      }
     },
     "db3ac4a211c24ed6bb484e556d7735b6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e7278870fbc14bdbab688e760d72059c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "e9955cea2b2143d8bb994bc0b6b0b078": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_19a9345b99ce4a4c80b554a11117db76",
       "placeholder": "​",
       "style": "IPY_MODEL_73469ca63a3c4183aead16513442f86a",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:00&lt;00:00, 159.48it/s]"
      }
     },
     "eb29d8fe9ad54f98a90ce492f0b4a7d4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3c549787e13c4e44be9379c083d9c937",
       "placeholder": "​",
       "style": "IPY_MODEL_a397d012caa04abf9453dbbea485a156",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "f240beb1e20d4c13a2ea7e44871b8b66": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f401bc68609747cf906dedb18ef7cc9a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b8f90f0697854327b44310cf2b6c2d19",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_49719cd51aac4212bf2a8420d288fb3d",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "f88a7ed5253c43aeae688ab02affe496": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7d4bc41e67ae427db02054df9f1631a8",
       "placeholder": "​",
       "style": "IPY_MODEL_3c7f36e106dd451f9397d3efc3381d41",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:06&lt;00:00, 14.96it/s]"
      }
     },
     "fdba02dc3b904b729fcecf448892ec03": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "fea482d4118d4ccf9349201af82806f8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
