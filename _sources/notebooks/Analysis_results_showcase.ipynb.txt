{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a8da7cea",
   "metadata": {},
   "source": [
    "# Analysis Results\n",
    "\n",
    "3ML stores the results of a fit in a container we call an \"Analysis Result\" (AR). The structure of this object is designed to be useable in a *live* sense within an *active* analysis (python script, ipython interactive shell, jupyter notebook) as well as storable as a FITS file for saving results for later.\n",
    "\n",
    "The structure is nearly the same between MLE and Bayesian analyses in order to make a seamless functionality between all analyses.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9699fc0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:36.429158Z",
     "iopub.status.busy": "2023-11-04T04:40:36.428948Z",
     "iopub.status.idle": "2023-11-04T04:40:39.827551Z",
     "shell.execute_reply": "2023-11-04T04:40:39.826898Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import numpy as np\n",
    "\n",
    "np.seterr(all=\"ignore\")\n",
    "from threeML import *\n",
    "from threeML.analysis_results import *\n",
    "import astropy.units as u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fb613bbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:39.830620Z",
     "iopub.status.busy": "2023-11-04T04:40:39.830243Z",
     "iopub.status.idle": "2023-11-04T04:40:39.859971Z",
     "shell.execute_reply": "2023-11-04T04:40:39.859322Z"
    }
   },
   "outputs": [],
   "source": [
    "silence_logs()\n",
    "from tqdm.auto import tqdm\n",
    "from jupyterthemes import jtplot\n",
    "\n",
    "%matplotlib inline\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "set_threeML_style()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea12a766",
   "metadata": {},
   "source": [
    "Let's take a look at what we can do with an AR. First, we will simulate some data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f58858a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:39.862464Z",
     "iopub.status.busy": "2023-11-04T04:40:39.862270Z",
     "iopub.status.idle": "2023-11-04T04:40:41.763523Z",
     "shell.execute_reply": "2023-11-04T04:40:41.762823Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen_function = Line(a=2, b=0) + Gaussian(F=30.0, mu=25.0, sigma=1)\n",
    "\n",
    "# Generate a dataset using the line and a gaussian.\n",
    "# constant 20% error\n",
    "\n",
    "x = np.linspace(0, 50, 50)\n",
    "\n",
    "xy = XYLike.from_function(\n",
    "    \"sim_data\", function=gen_function, x=x, yerr=0.2 * gen_function(x)\n",
    ")\n",
    "\n",
    "fig = xy.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d0c33c9",
   "metadata": {},
   "source": [
    "## MLE Results\n",
    "\n",
    "\n",
    "First we will demonstrate how AR's work for an MLE analysis on our synthetic data. As we will see, most of the functionality exists in the Bayesian AR's as well.\n",
    "\n",
    "Let's do a simple likelihood maximization of our data and model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "95a0f1ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:41.765988Z",
     "iopub.status.busy": "2023-11-04T04:40:41.765601Z",
     "iopub.status.idle": "2023-11-04T04:40:42.573213Z",
     "shell.execute_reply": "2023-11-04T04:40:42.572644Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.06 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-3 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.1 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.488 +/- 0.017) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.04 +/- 0.13</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.06 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-3 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.1 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.488 +/- 0.017) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.04 +/- 0.13               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140181181851344\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>0.02</td><td>-0.08</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.02</td><td>0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.15</td><td>-0.15</td></tr>\n",
       "<tr><td>0.02</td><td>-0.02</td><td>0.15</td><td>1.00</td><td>0.01</td></tr>\n",
       "<tr><td>-0.08</td><td>0.00</td><td>-0.15</td><td>0.01</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04  0.02 -0.08\n",
       "-0.85  1.00 -0.00 -0.02  0.00\n",
       "-0.04 -0.00  1.00  0.15 -0.15\n",
       " 0.02 -0.02  0.15  1.00  0.01\n",
       "-0.08  0.00 -0.15  0.01  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>19.649282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>19.649282</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         19.649282\n",
       "total            19.649282"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>50.662201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>58.858680</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             50.662201\n",
       "BIC             58.858680"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fitfun = Line() + Gaussian()\n",
    "\n",
    "fitfun.b_1.bounds = (-10, 10.0)\n",
    "fitfun.a_1.bounds = (-100, 100.0)\n",
    "fitfun.F_2 = 25.0\n",
    "fitfun.F_2.bounds = (1e-3, 200.0)\n",
    "fitfun.mu_2 = 25.0\n",
    "fitfun.mu_2.bounds = (0.0, 100.0)\n",
    "fitfun.sigma_2.bounds = (1e-3, 10.0)\n",
    "\n",
    "model = Model(PointSource(\"fake\", 0.0, 0.0, fitfun))\n",
    "\n",
    "data = DataList(xy)\n",
    "\n",
    "jl = JointLikelihood(model, DataList(xy))\n",
    "_ = jl.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bff4ca2d",
   "metadata": {},
   "source": [
    "We can get our errors as always, but the results cannot be propagated (error propagation assumes Gaussian errors, i.e., symmetric errors)\n",
    "In this case though errors are pretty symmetric, so we are likely in the case\n",
    "where the MLE is actually normally distributed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5710b92b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:42.575783Z",
     "iopub.status.busy": "2023-11-04T04:40:42.575411Z",
     "iopub.status.idle": "2023-11-04T04:40:42.650205Z",
     "shell.execute_reply": "2023-11-04T04:40:42.649565Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.06 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-3 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.1 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.488 -0.018 +0.017) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.04 -0.12 +0.14</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                   2.06 +/- 0.11   \n",
       "fake.spectrum.main.composite.b_1              (-3 +/- 4) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2              (2.1 +/- 0.4) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.488 -0.018 +0.017) x 10   \n",
       "fake.spectrum.main.composite.sigma_2            1.04 -0.12 +0.14   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.061695</td>\n",
       "      <td>-0.113494</td>\n",
       "      <td>0.113474</td>\n",
       "      <td>0.113484</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.002747</td>\n",
       "      <td>-0.003844</td>\n",
       "      <td>0.003844</td>\n",
       "      <td>0.003844</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>21.149072</td>\n",
       "      <td>-3.972054</td>\n",
       "      <td>3.976290</td>\n",
       "      <td>3.974172</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.878083</td>\n",
       "      <td>-0.178266</td>\n",
       "      <td>0.170392</td>\n",
       "      <td>0.174329</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.037166</td>\n",
       "      <td>-0.120132</td>\n",
       "      <td>0.137797</td>\n",
       "      <td>0.128965</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.061695       -0.113494   \n",
       "fake.spectrum.main.composite.b_1      -0.002747       -0.003844   \n",
       "fake.spectrum.main.composite.F_2      21.149072       -3.972054   \n",
       "fake.spectrum.main.composite.mu_2     24.878083       -0.178266   \n",
       "fake.spectrum.main.composite.sigma_2   1.037166       -0.120132   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.113474  0.113484   \n",
       "fake.spectrum.main.composite.b_1            0.003844  0.003844   \n",
       "fake.spectrum.main.composite.F_2            3.976290  3.974172   \n",
       "fake.spectrum.main.composite.mu_2           0.170392  0.174329   \n",
       "fake.spectrum.main.composite.sigma_2        0.137797  0.128965   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jl.get_errors()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f37470a",
   "metadata": {},
   "source": [
    "We need to get the AnalysisResults object that is created after a fit is performed. The AR object is a member of the JointLikelihood object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b15969ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:42.652638Z",
     "iopub.status.busy": "2023-11-04T04:40:42.652262Z",
     "iopub.status.idle": "2023-11-04T04:40:42.655304Z",
     "shell.execute_reply": "2023-11-04T04:40:42.654697Z"
    }
   },
   "outputs": [],
   "source": [
    "ar = jl.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b16e27de",
   "metadata": {},
   "source": [
    "We can display the results of the analysis. Note, when a fit is performed, the post display is actaully from the internal AR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "260ebdc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:42.657822Z",
     "iopub.status.busy": "2023-11-04T04:40:42.657327Z",
     "iopub.status.idle": "2023-11-04T04:40:42.687800Z",
     "shell.execute_reply": "2023-11-04T04:40:42.687170Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.06 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-3 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.1 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.488 +/- 0.017) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.04 +/- 0.13</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.06 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-3 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.1 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.488 +/- 0.017) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.04 +/- 0.13               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140181139915344\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>0.02</td><td>-0.08</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.02</td><td>0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.15</td><td>-0.15</td></tr>\n",
       "<tr><td>0.02</td><td>-0.02</td><td>0.15</td><td>1.00</td><td>0.01</td></tr>\n",
       "<tr><td>-0.08</td><td>0.00</td><td>-0.15</td><td>0.01</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04  0.02 -0.08\n",
       "-0.85  1.00 -0.00 -0.02  0.00\n",
       "-0.04 -0.00  1.00  0.15 -0.15\n",
       " 0.02 -0.02  0.15  1.00  0.01\n",
       "-0.08  0.00 -0.15  0.01  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>19.649282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>19.649282</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         19.649282\n",
       "total            19.649282"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>50.662201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>58.858680</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             50.662201\n",
       "BIC             58.858680"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4b1a816",
   "metadata": {},
   "source": [
    "By default, the equal tail intervals are displayed. We can instead display highest posterior densities (equal in the MLE case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f85ea9f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:42.690244Z",
     "iopub.status.busy": "2023-11-04T04:40:42.689891Z",
     "iopub.status.idle": "2023-11-04T04:40:42.719578Z",
     "shell.execute_reply": "2023-11-04T04:40:42.718946Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.06 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-3 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.1 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.488 +/- 0.017) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.04 +/- 0.13</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.06 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-3 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.1 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.488 +/- 0.017) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.04 +/- 0.13               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140182308471328\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>0.02</td><td>-0.08</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.02</td><td>0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.15</td><td>-0.15</td></tr>\n",
       "<tr><td>0.02</td><td>-0.02</td><td>0.15</td><td>1.00</td><td>0.01</td></tr>\n",
       "<tr><td>-0.08</td><td>0.00</td><td>-0.15</td><td>0.01</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04  0.02 -0.08\n",
       "-0.85  1.00 -0.00 -0.02  0.00\n",
       "-0.04 -0.00  1.00  0.15 -0.15\n",
       " 0.02 -0.02  0.15  1.00  0.01\n",
       "-0.08  0.00 -0.15  0.01  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>19.649282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>19.649282</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         19.649282\n",
       "total            19.649282"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>50.662201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>58.858680</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             50.662201\n",
       "BIC             58.858680"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ar.display(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d009f385",
   "metadata": {},
   "source": [
    "The AR stores several properties from the analysis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6a5ac407",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:42.722158Z",
     "iopub.status.busy": "2023-11-04T04:40:42.721768Z",
     "iopub.status.idle": "2023-11-04T04:40:42.726015Z",
     "shell.execute_reply": "2023-11-04T04:40:42.725451Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'MLE'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.analysis_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dd286d15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:42.728314Z",
     "iopub.status.busy": "2023-11-04T04:40:42.727929Z",
     "iopub.status.idle": "2023-11-04T04:40:42.732496Z",
     "shell.execute_reply": "2023-11-04T04:40:42.731952Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.28786305e-02, -3.69690015e-04, -1.96745798e-02,\n",
       "         4.20720524e-04, -1.15186771e-03],\n",
       "       [-3.69690015e-04,  1.47778063e-05, -1.64148895e-05,\n",
       "        -1.40625350e-05,  1.89795157e-06],\n",
       "       [-1.96745798e-02, -1.64148895e-05,  1.57968300e+01,\n",
       "         1.02307708e-01, -7.42687389e-02],\n",
       "       [ 4.20720524e-04, -1.40625350e-05,  1.02307708e-01,\n",
       "         2.93160320e-02,  2.81149827e-04],\n",
       "       [-1.15186771e-03,  1.89795157e-06, -7.42687389e-02,\n",
       "         2.81149827e-04,  1.60162447e-02]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.covariance_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d009a18e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:42.734799Z",
     "iopub.status.busy": "2023-11-04T04:40:42.734459Z",
     "iopub.status.idle": "2023-11-04T04:40:47.299345Z",
     "shell.execute_reply": "2023-11-04T04:40:47.298656Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cfdc418269da4888ae25a9d8c8f97cdb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "processing MLE analyses:   0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flux</th>\n",
       "      <th>low bound</th>\n",
       "      <th>hi bound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake: total</th>\n",
       "      <td>1.5927630170633366e-05 erg / (s cm2)</td>\n",
       "      <td>1.457608339320265e-05 erg / (s cm2)</td>\n",
       "      <td>1.7293354884440582e-05 erg / (s cm2)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             flux  \\\n",
       "fake: total  1.5927630170633366e-05 erg / (s cm2)   \n",
       "\n",
       "                                       low bound  \\\n",
       "fake: total  1.457608339320265e-05 erg / (s cm2)   \n",
       "\n",
       "                                         hi bound  \n",
       "fake: total  1.7293354884440582e-05 erg / (s cm2)  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.get_point_source_flux(1 * u.keV, 0.1 * u.MeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "824d5310",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.302444Z",
     "iopub.status.busy": "2023-11-04T04:40:47.302231Z",
     "iopub.status.idle": "2023-11-04T04:40:47.320157Z",
     "shell.execute_reply": "2023-11-04T04:40:47.319519Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Model summary:<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Point sources</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extended sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Particle sources</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Free parameters (5):<br><br><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>min_value</th>\n",
       "      <th>max_value</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.061695</td>\n",
       "      <td>-100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV-1 s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.002747</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>s-1 cm-2 keV-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>21.149072</td>\n",
       "      <td>0.001</td>\n",
       "      <td>200.0</td>\n",
       "      <td>s-1 cm-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.878083</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.037166</td>\n",
       "      <td>0.001</td>\n",
       "      <td>10.0</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div><br><br>Fixed parameters (2):<br>(abridged. Use complete=True to see all fixed parameters)<br><br><br>Properties (0):<br><br>(none)<br><br><br>Linked parameters (0):<br><br>(none)<br><br>Independent variables:<br><br>(none)<br><br>Linked functions (0):<br><br>(none)<br>"
      ],
      "text/plain": [
       "Model summary:\n",
       "==============\n",
       "\n",
       "                  N\n",
       "Point sources     1\n",
       "Extended sources  0\n",
       "Particle sources  0\n",
       "\n",
       "Free parameters (5):\n",
       "--------------------\n",
       "\n",
       "                                          value min_value max_value  \\\n",
       "fake.spectrum.main.composite.a_1       2.061695    -100.0     100.0   \n",
       "fake.spectrum.main.composite.b_1      -0.002747     -10.0      10.0   \n",
       "fake.spectrum.main.composite.F_2      21.149072     0.001     200.0   \n",
       "fake.spectrum.main.composite.mu_2     24.878083       0.0     100.0   \n",
       "fake.spectrum.main.composite.sigma_2   1.037166     0.001      10.0   \n",
       "\n",
       "                                                unit  \n",
       "fake.spectrum.main.composite.a_1      keV-1 s-1 cm-2  \n",
       "fake.spectrum.main.composite.b_1      s-1 cm-2 keV-2  \n",
       "fake.spectrum.main.composite.F_2            s-1 cm-2  \n",
       "fake.spectrum.main.composite.mu_2                keV  \n",
       "fake.spectrum.main.composite.sigma_2             keV  \n",
       "\n",
       "Fixed parameters (2):\n",
       "(abridged. Use complete=True to see all fixed parameters)\n",
       "\n",
       "\n",
       "Properties (0):\n",
       "--------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "\n",
       "Linked parameters (0):\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Independent variables:\n",
       "----------------------\n",
       "\n",
       "(none)\n",
       "\n",
       "Linked functions (0):\n",
       "----------------------\n",
       "\n",
       "(none)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar.optimized_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6d4dfdb",
   "metadata": {},
   "source": [
    "## Saving results to disk\n",
    "\n",
    "The beauty of the analysis result is that all of this information can be written to disk and restored at a later time. The statistical parameters, best-fit model, etc. can all be recovered.\n",
    "\n",
    "AR's are stored as a structured FITS file. We write the AR like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "23dc43b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.322351Z",
     "iopub.status.busy": "2023-11-04T04:40:47.322159Z",
     "iopub.status.idle": "2023-11-04T04:40:47.363511Z",
     "shell.execute_reply": "2023-11-04T04:40:47.362890Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "ar.write_to(\"test_mle.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afc39511",
   "metadata": {},
   "source": [
    "The FITS file can be examines with any normal FITS reader."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b996f85f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.365897Z",
     "iopub.status.busy": "2023-11-04T04:40:47.365528Z",
     "iopub.status.idle": "2023-11-04T04:40:47.368439Z",
     "shell.execute_reply": "2023-11-04T04:40:47.367894Z"
    }
   },
   "outputs": [],
   "source": [
    "import astropy.io.fits as fits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c921c05a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.370644Z",
     "iopub.status.busy": "2023-11-04T04:40:47.370277Z",
     "iopub.status.idle": "2023-11-04T04:40:47.375604Z",
     "shell.execute_reply": "2023-11-04T04:40:47.375088Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: test_mle.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       6   ()      \n",
      "  1  ANALYSIS_RESULTS    1 BinTableHDU     38   5R x 9C   [36A, D, D, D, D, 16A, 5D, D, D]   \n"
     ]
    }
   ],
   "source": [
    "ar_fits = fits.open(\"test_mle.fits\")\n",
    "ar_fits.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "673c6f98",
   "metadata": {},
   "source": [
    "However, to easily pull the results back into the 3ML framework, we use the ${\\tt load\\_analysis\\_results}$ function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "864dd32c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.377929Z",
     "iopub.status.busy": "2023-11-04T04:40:47.377585Z",
     "iopub.status.idle": "2023-11-04T04:40:47.437800Z",
     "shell.execute_reply": "2023-11-04T04:40:47.437284Z"
    }
   },
   "outputs": [],
   "source": [
    "ar_reloaded = load_analysis_results(\"test_mle.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3aab4e4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.440280Z",
     "iopub.status.busy": "2023-11-04T04:40:47.439931Z",
     "iopub.status.idle": "2023-11-04T04:40:47.446102Z",
     "shell.execute_reply": "2023-11-04T04:40:47.445498Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>19.649282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>19.649282</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         19.649282\n",
       "total            19.649282"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_statistic_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9f48597",
   "metadata": {},
   "source": [
    "You can get a DataFrame with the saved results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fae113ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.448350Z",
     "iopub.status.busy": "2023-11-04T04:40:47.447976Z",
     "iopub.status.idle": "2023-11-04T04:40:47.465935Z",
     "shell.execute_reply": "2023-11-04T04:40:47.465284Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.061695</td>\n",
       "      <td>-0.114954</td>\n",
       "      <td>0.114453</td>\n",
       "      <td>0.114704</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.002747</td>\n",
       "      <td>-0.003884</td>\n",
       "      <td>0.003848</td>\n",
       "      <td>0.003866</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>21.149072</td>\n",
       "      <td>-4.001890</td>\n",
       "      <td>4.118888</td>\n",
       "      <td>4.060389</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.878083</td>\n",
       "      <td>-0.168344</td>\n",
       "      <td>0.166646</td>\n",
       "      <td>0.167495</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.037166</td>\n",
       "      <td>-0.126102</td>\n",
       "      <td>0.120973</td>\n",
       "      <td>0.123538</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.061695       -0.114954   \n",
       "fake.spectrum.main.composite.b_1      -0.002747       -0.003884   \n",
       "fake.spectrum.main.composite.F_2      21.149072       -4.001890   \n",
       "fake.spectrum.main.composite.mu_2     24.878083       -0.168344   \n",
       "fake.spectrum.main.composite.sigma_2   1.037166       -0.126102   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.114453  0.114704   \n",
       "fake.spectrum.main.composite.b_1            0.003848  0.003866   \n",
       "fake.spectrum.main.composite.F_2            4.118888  4.060389   \n",
       "fake.spectrum.main.composite.mu_2           0.166646  0.167495   \n",
       "fake.spectrum.main.composite.sigma_2        0.120973  0.123538   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar_reloaded.get_data_frame()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d14145f7",
   "metadata": {},
   "source": [
    "## Analysis Result Sets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd8b91bf",
   "metadata": {},
   "source": [
    "When doing time-resolved analysis or analysing a several objects, we can save several AR's is a set. This is achieved with the analysis result set. We can pass an array of AR's to the set and even set up descriptions for the different entries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c1dbc4f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.468605Z",
     "iopub.status.busy": "2023-11-04T04:40:47.468207Z",
     "iopub.status.idle": "2023-11-04T04:40:47.545025Z",
     "shell.execute_reply": "2023-11-04T04:40:47.544162Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "from threeML.analysis_results import AnalysisResultsSet\n",
    "\n",
    "analysis_set = AnalysisResultsSet([ar, ar_reloaded])\n",
    "\n",
    "# index as time bins\n",
    "analysis_set.set_bins(\"testing\", [-1, 1], [3, 5], unit=\"s\")\n",
    "\n",
    "# write to disk\n",
    "analysis_set.write_to(\"analysis_set_test.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cf893d8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.547566Z",
     "iopub.status.busy": "2023-11-04T04:40:47.547180Z",
     "iopub.status.idle": "2023-11-04T04:40:47.671576Z",
     "shell.execute_reply": "2023-11-04T04:40:47.671039Z"
    }
   },
   "outputs": [],
   "source": [
    "analysis_set = load_analysis_results(\"analysis_set_test.fits\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d5e89e5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.674341Z",
     "iopub.status.busy": "2023-11-04T04:40:47.673840Z",
     "iopub.status.idle": "2023-11-04T04:40:47.704240Z",
     "shell.execute_reply": "2023-11-04T04:40:47.703722Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Best fit values:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mBest fit values:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.06 +/- 0.11</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-3 +/- 4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.1 +/- 0.4) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.488 +/- 0.017) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.04 +/- 0.13</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      result              unit\n",
       "parameter                                                                     \n",
       "fake.spectrum.main.composite.a_1               2.06 +/- 0.11   1 / (keV s cm2)\n",
       "fake.spectrum.main.composite.b_1          (-3 +/- 4) x 10^-3  1 / (s cm2 keV2)\n",
       "fake.spectrum.main.composite.F_2          (2.1 +/- 0.4) x 10       1 / (s cm2)\n",
       "fake.spectrum.main.composite.mu_2     (2.488 +/- 0.017) x 10               keV\n",
       "fake.spectrum.main.composite.sigma_2           1.04 +/- 0.13               keV"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Correlation matrix:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mCorrelation matrix:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div><table id=\"table140181138688656\">\n",
       "<tr><td>1.00</td><td>-0.85</td><td>-0.04</td><td>0.02</td><td>-0.08</td></tr>\n",
       "<tr><td>-0.85</td><td>1.00</td><td>-0.00</td><td>-0.02</td><td>0.00</td></tr>\n",
       "<tr><td>-0.04</td><td>-0.00</td><td>1.00</td><td>0.15</td><td>-0.15</td></tr>\n",
       "<tr><td>0.02</td><td>-0.02</td><td>0.15</td><td>1.00</td><td>0.01</td></tr>\n",
       "<tr><td>-0.08</td><td>0.00</td><td>-0.15</td><td>0.01</td><td>1.00</td></tr>\n",
       "</table></div>"
      ],
      "text/plain": [
       " 1.00 -0.85 -0.04  0.02 -0.08\n",
       "-0.85  1.00 -0.00 -0.02  0.00\n",
       "-0.04 -0.00  1.00  0.15 -0.15\n",
       " 0.02 -0.02  0.15  1.00  0.01\n",
       "-0.08  0.00 -0.15  0.01  1.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(likelihood) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mlikelihood\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(likelihood)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>19.649282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>19.649282</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(likelihood)\n",
       "sim_data         19.649282\n",
       "total            19.649282"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>50.662201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>58.858680</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     statistical measures\n",
       "AIC             50.662201\n",
       "BIC             58.858680"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis_set[0].display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f7a1e5a",
   "metadata": {},
   "source": [
    "## Error propagation\n",
    "In 3ML, we propagate errors for MLE reults via sampling of the covariance matrix *instead* of Taylor exanding around the maximum of the likelihood and computing a jacobain. Thus, we can achieve non-linear error propagation.\n",
    "\n",
    "You can use the results for propagating errors non-linearly for analytical functions:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a5624a01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.706580Z",
     "iopub.status.busy": "2023-11-04T04:40:47.706230Z",
     "iopub.status.idle": "2023-11-04T04:40:47.713501Z",
     "shell.execute_reply": "2023-11-04T04:40:47.712843Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Propagating a+b, with a and b respectively:\n",
      "equal-tail: (-3 +/- 4) x 10^-3, hpd: (-3 +/- 4) x 10^-3\n",
      "equal-tail: 2.06 -0.12 +0.11, hpd: 2.06 -0.13 +0.10\n",
      "\n",
      "This is the result (with errors):\n",
      "equal-tail: 2.06 -0.12 +0.11, hpd: 2.06 -0.12 +0.11\n",
      "(1.9447672800884697, 2.1668696948394626)\n"
     ]
    }
   ],
   "source": [
    "p1 = ar.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(\"Propagating a+b, with a and b respectively:\")\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "print(\"\\nThis is the result (with errors):\")\n",
    "res = p1 + p2\n",
    "print(res)\n",
    "\n",
    "print(res.equal_tail_interval())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19fbeded",
   "metadata": {},
   "source": [
    "The propagation accounts for covariances. For example this\n",
    "has error of zero (of course) since there is perfect covariance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c1853ca0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.715753Z",
     "iopub.status.busy": "2023-11-04T04:40:47.715381Z",
     "iopub.status.idle": "2023-11-04T04:40:47.719587Z",
     "shell.execute_reply": "2023-11-04T04:40:47.718963Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is 50 * a/a:\n",
      "equal-tail: (5.0 +/- 0) x 10, hpd: (5.0 +/- 0) x 10\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is 50 * a/a:\")\n",
    "print(50 * p1 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61794961",
   "metadata": {},
   "source": [
    "You can use arbitrary (np) functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6ba295b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.721962Z",
     "iopub.status.busy": "2023-11-04T04:40:47.721561Z",
     "iopub.status.idle": "2023-11-04T04:40:47.726837Z",
     "shell.execute_reply": "2023-11-04T04:40:47.726342Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This is arcsinh(b + 5*) / np.log10(b) (why not?)\n",
      "equal-tail: 9.6 -0.5 +0.7, hpd: 9.6 -0.6 +0.5\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nThis is arcsinh(b + 5*) / np.log10(b) (why not?)\")\n",
    "print(np.arcsinh(p1 + 5 * p2) / np.log10(p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f87b1af6",
   "metadata": {},
   "source": [
    "Errors can become asymmetric. For example, the ratio of two gaussians is\n",
    "asymmetric notoriously:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "221bbff7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.729071Z",
     "iopub.status.busy": "2023-11-04T04:40:47.728678Z",
     "iopub.status.idle": "2023-11-04T04:40:47.732937Z",
     "shell.execute_reply": "2023-11-04T04:40:47.732388Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Ratio a/b:\n",
      "equal-tail: (-0.4 -0.8 +1.1) x 10^3, hpd: (-0.4 -0.8 +1.1) x 10^3\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nRatio a/b:\")\n",
    "print(p2 / p1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20baaa4f",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "You can always use it with arbitrary functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e632c607",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.735218Z",
     "iopub.status.busy": "2023-11-04T04:40:47.734851Z",
     "iopub.status.idle": "2023-11-04T04:40:47.739648Z",
     "shell.execute_reply": "2023-11-04T04:40:47.739107Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Propagating using a custom function:\n",
      "equal-tail: 2.06 -0.11 +0.10, hpd: 2.06 -0.13 +0.09\n"
     ]
    }
   ],
   "source": [
    "def my_function(x, a, b):\n",
    "    return b * x**a\n",
    "\n",
    "\n",
    "print(\"\\nPropagating using a custom function:\")\n",
    "print(my_function(2.3, p1, p2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4cefd72",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "This is an example of an error propagation to get the plot of the model with its errors\n",
    "(which are propagated without assuming linearity on parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "87708e9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.741859Z",
     "iopub.status.busy": "2023-11-04T04:40:47.741514Z",
     "iopub.status.idle": "2023-11-04T04:40:47.748335Z",
     "shell.execute_reply": "2023-11-04T04:40:47.747701Z"
    }
   },
   "outputs": [],
   "source": [
    "def go(fitfun, ar, model):\n",
    "    fig, ax = plt.subplots()\n",
    "\n",
    "    # Gather the parameter variates\n",
    "\n",
    "    arguments = {}\n",
    "\n",
    "    for par in fitfun.parameters.values():\n",
    "        if par.free:\n",
    "            this_name = par.name\n",
    "\n",
    "            this_variate = ar.get_variates(par.path)\n",
    "\n",
    "            # Do not use more than 1000 values (would make computation too slow for nothing)\n",
    "\n",
    "            if len(this_variate) > 1000:\n",
    "                this_variate = np.random.choice(this_variate, size=1000)\n",
    "\n",
    "            arguments[this_name] = this_variate\n",
    "\n",
    "    # Prepare the error propagator function\n",
    "\n",
    "    pp = ar.propagate(\n",
    "        ar.optimized_model.fake.spectrum.main.shape.evaluate_at, **arguments\n",
    "    )\n",
    "\n",
    "    # You can just use it as:\n",
    "\n",
    "    print(pp(5.0))\n",
    "\n",
    "    # Make the plot\n",
    "\n",
    "    energies = np.linspace(0, 50, 100)\n",
    "\n",
    "    low_curve = np.zeros_like(energies)\n",
    "    middle_curve = np.zeros_like(energies)\n",
    "    hi_curve = np.zeros_like(energies)\n",
    "\n",
    "    free_parameters = model.free_parameters\n",
    "\n",
    "    p = tqdm(total=len(energies), desc=\"Propagating errors\")\n",
    "\n",
    "    with use_astromodels_memoization(False):\n",
    "        for i, e in enumerate(energies):\n",
    "            this_flux = pp(e)\n",
    "\n",
    "            low_bound, hi_bound = this_flux.equal_tail_interval()\n",
    "\n",
    "            low_curve[i], middle_curve[i], hi_curve[i] = (\n",
    "                low_bound,\n",
    "                this_flux.median,\n",
    "                hi_bound,\n",
    "            )\n",
    "\n",
    "            p.update(1)\n",
    "\n",
    "    ax.plot(energies, middle_curve, \"--\", color=\"black\")\n",
    "    ax.fill_between(energies, low_curve, hi_curve, alpha=0.5, color=\"blue\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c6f03379",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:47.750607Z",
     "iopub.status.busy": "2023-11-04T04:40:47.750241Z",
     "iopub.status.idle": "2023-11-04T04:40:51.513934Z",
     "shell.execute_reply": "2023-11-04T04:40:51.513229Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 2.05 -0.12 +0.11, hpd: 2.05 -0.12 +0.10\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fa9977dda2bb4265a22f0efa077739bc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar, model)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b789e61",
   "metadata": {},
   "source": [
    "## Bayesian Analysis Results\n",
    "Analysis Results work exactly the same under Bayesian analysis.\n",
    "\n",
    "Let's run the analysis first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "2e038f8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:51.516291Z",
     "iopub.status.busy": "2023-11-04T04:40:51.515926Z",
     "iopub.status.idle": "2023-11-04T04:40:57.191093Z",
     "shell.execute_reply": "2023-11-04T04:40:57.190580Z"
    }
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5f1bd3d192b448729dbd22ad18f70c8b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3a788689f1c8478fa6b934290ae604f4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Maximum a posteriori probability (MAP) point:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1;4;38;5;49mMaximum a posteriori probability \u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mMAP\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m point:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parameter</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.06 -0.12 +0.10</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>(-2.8 -3.2 +4) x 10^-3</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>(2.07 -0.8 +0.20) x 10</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>(2.489 -0.024 +0.023) x 10</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.01 -0.15 +0.17</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                          result  \\\n",
       "parameter                                                          \n",
       "fake.spectrum.main.composite.a_1                2.06 -0.12 +0.10   \n",
       "fake.spectrum.main.composite.b_1          (-2.8 -3.2 +4) x 10^-3   \n",
       "fake.spectrum.main.composite.F_2          (2.07 -0.8 +0.20) x 10   \n",
       "fake.spectrum.main.composite.mu_2     (2.489 -0.024 +0.023) x 10   \n",
       "fake.spectrum.main.composite.sigma_2            1.01 -0.15 +0.17   \n",
       "\n",
       "                                                  unit  \n",
       "parameter                                               \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of -log(posterior) at the minimum:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of -\u001b[0m\u001b[1;4;38;5;49mlog\u001b[0m\u001b[1;4;38;5;49m(\u001b[0m\u001b[1;4;38;5;49mposterior\u001b[0m\u001b[1;4;38;5;49m)\u001b[0m\u001b[1;4;38;5;49m at the minimum:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>-log(posterior)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sim_data</th>\n",
       "      <td>-22.740677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total</th>\n",
       "      <td>-22.740677</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          -log(posterior)\n",
       "sim_data       -22.740677\n",
       "total          -22.740677"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "<span style=\"color: #00ffaf; text-decoration-color: #00ffaf; font-weight: bold; text-decoration: underline\">Values of statistical measures:</span>\n",
       "\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n",
       "\u001b[1;4;38;5;49mValues of statistical measures:\u001b[0m\n",
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>statistical measures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AIC</th>\n",
       "      <td>56.844991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIC</th>\n",
       "      <td>65.041469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DIC</th>\n",
       "      <td>49.030971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PDIC</th>\n",
       "      <td>-3.319759</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      statistical measures\n",
       "AIC              56.844991\n",
       "BIC              65.041469\n",
       "DIC              49.030971\n",
       "PDIC             -3.319759"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for parameter in ar.optimized_model:\n",
    "    model[parameter.path].value = parameter.value\n",
    "\n",
    "model.fake.spectrum.main.composite.a_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.b_1.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.F_2.set_uninformative_prior(Log_uniform_prior)\n",
    "model.fake.spectrum.main.composite.mu_2.set_uninformative_prior(Uniform_prior)\n",
    "model.fake.spectrum.main.composite.sigma_2.set_uninformative_prior(Log_uniform_prior)\n",
    "\n",
    "bs = BayesianAnalysis(model, data)\n",
    "bs.set_sampler(\"emcee\")\n",
    "bs.sampler.setup(n_iterations=1000, n_burn_in=100, n_walkers=20)\n",
    "samples = bs.sample()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "147434f2",
   "metadata": {},
   "source": [
    "Again, we grab the results from the BayesianAnalysis object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "efb160d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:57.193336Z",
     "iopub.status.busy": "2023-11-04T04:40:57.193146Z",
     "iopub.status.idle": "2023-11-04T04:40:57.196021Z",
     "shell.execute_reply": "2023-11-04T04:40:57.195479Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2 = bs.results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4777ae09",
   "metadata": {},
   "source": [
    "We can write and read the results to/from a file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c9ab53da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:57.198188Z",
     "iopub.status.busy": "2023-11-04T04:40:57.197842Z",
     "iopub.status.idle": "2023-11-04T04:40:57.255415Z",
     "shell.execute_reply": "2023-11-04T04:40:57.254773Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: VerifyWarning: Card is too long, comment will be truncated. [astropy.io.fits.card]\n"
     ]
    }
   ],
   "source": [
    "ar2.write_to(\"test_bayes.fits\", overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8f937642",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:57.257798Z",
     "iopub.status.busy": "2023-11-04T04:40:57.257389Z",
     "iopub.status.idle": "2023-11-04T04:40:57.303357Z",
     "shell.execute_reply": "2023-11-04T04:40:57.302728Z"
    }
   },
   "outputs": [],
   "source": [
    "ar2_reloaded = load_analysis_results(\"test_bayes.fits\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfaeac3d",
   "metadata": {},
   "source": [
    "The AR holds the posterior samples from the analysis. We can see the saved and live reults are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "69e2af90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:57.305869Z",
     "iopub.status.busy": "2023-11-04T04:40:57.305540Z",
     "iopub.status.idle": "2023-11-04T04:40:57.312147Z",
     "shell.execute_reply": "2023-11-04T04:40:57.311521Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.allclose(ar2_reloaded.samples, ar2.samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e1c7091",
   "metadata": {},
   "source": [
    "**NOTE:** *MLE AR's store samples as well. These are the samples from the covariance matrix*\n",
    "\n",
    "We can examine the marginal distributions of the parameters:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4c0c1a8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:57.314379Z",
     "iopub.status.busy": "2023-11-04T04:40:57.314033Z",
     "iopub.status.idle": "2023-11-04T04:40:58.700644Z",
     "shell.execute_reply": "2023-11-04T04:40:58.699972Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1180x1180 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = ar2.corner_plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41e9c0bc",
   "metadata": {},
   "source": [
    "We can return pandas DataFrames with equal tail or HPD results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "f282da04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:58.703548Z",
     "iopub.status.busy": "2023-11-04T04:40:58.703132Z",
     "iopub.status.idle": "2023-11-04T04:40:58.722073Z",
     "shell.execute_reply": "2023-11-04T04:40:58.721450Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.058410</td>\n",
       "      <td>-0.121271</td>\n",
       "      <td>0.101216</td>\n",
       "      <td>0.111243</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.002768</td>\n",
       "      <td>-0.003232</td>\n",
       "      <td>0.003645</td>\n",
       "      <td>0.003438</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>20.688533</td>\n",
       "      <td>-8.101312</td>\n",
       "      <td>1.978393</td>\n",
       "      <td>5.039853</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.892693</td>\n",
       "      <td>-0.236104</td>\n",
       "      <td>0.229900</td>\n",
       "      <td>0.233002</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.005074</td>\n",
       "      <td>-0.147599</td>\n",
       "      <td>0.172796</td>\n",
       "      <td>0.160198</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.058410       -0.121271   \n",
       "fake.spectrum.main.composite.b_1      -0.002768       -0.003232   \n",
       "fake.spectrum.main.composite.F_2      20.688533       -8.101312   \n",
       "fake.spectrum.main.composite.mu_2     24.892693       -0.236104   \n",
       "fake.spectrum.main.composite.sigma_2   1.005074       -0.147599   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.101216  0.111243   \n",
       "fake.spectrum.main.composite.b_1            0.003645  0.003438   \n",
       "fake.spectrum.main.composite.F_2            1.978393  5.039853   \n",
       "fake.spectrum.main.composite.mu_2           0.229900  0.233002   \n",
       "fake.spectrum.main.composite.sigma_2        0.172796  0.160198   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"equal tail\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "fb9192a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:58.724277Z",
     "iopub.status.busy": "2023-11-04T04:40:58.723941Z",
     "iopub.status.idle": "2023-11-04T04:40:58.745623Z",
     "shell.execute_reply": "2023-11-04T04:40:58.744978Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>negative_error</th>\n",
       "      <th>positive_error</th>\n",
       "      <th>error</th>\n",
       "      <th>unit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.a_1</th>\n",
       "      <td>2.058410</td>\n",
       "      <td>-0.115902</td>\n",
       "      <td>0.104677</td>\n",
       "      <td>0.110289</td>\n",
       "      <td>1 / (keV s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.b_1</th>\n",
       "      <td>-0.002768</td>\n",
       "      <td>-0.003232</td>\n",
       "      <td>0.003645</td>\n",
       "      <td>0.003439</td>\n",
       "      <td>1 / (s cm2 keV2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.F_2</th>\n",
       "      <td>20.688533</td>\n",
       "      <td>-6.734740</td>\n",
       "      <td>3.065336</td>\n",
       "      <td>4.900038</td>\n",
       "      <td>1 / (s cm2)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.mu_2</th>\n",
       "      <td>24.892693</td>\n",
       "      <td>-0.241117</td>\n",
       "      <td>0.221859</td>\n",
       "      <td>0.231488</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fake.spectrum.main.composite.sigma_2</th>\n",
       "      <td>1.005074</td>\n",
       "      <td>-0.137036</td>\n",
       "      <td>0.182983</td>\n",
       "      <td>0.160009</td>\n",
       "      <td>keV</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          value  negative_error  \\\n",
       "fake.spectrum.main.composite.a_1       2.058410       -0.115902   \n",
       "fake.spectrum.main.composite.b_1      -0.002768       -0.003232   \n",
       "fake.spectrum.main.composite.F_2      20.688533       -6.734740   \n",
       "fake.spectrum.main.composite.mu_2     24.892693       -0.241117   \n",
       "fake.spectrum.main.composite.sigma_2   1.005074       -0.137036   \n",
       "\n",
       "                                      positive_error     error  \\\n",
       "fake.spectrum.main.composite.a_1            0.104677  0.110289   \n",
       "fake.spectrum.main.composite.b_1            0.003645  0.003439   \n",
       "fake.spectrum.main.composite.F_2            3.065336  4.900038   \n",
       "fake.spectrum.main.composite.mu_2           0.221859  0.231488   \n",
       "fake.spectrum.main.composite.sigma_2        0.182983  0.160009   \n",
       "\n",
       "                                                  unit  \n",
       "fake.spectrum.main.composite.a_1       1 / (keV s cm2)  \n",
       "fake.spectrum.main.composite.b_1      1 / (s cm2 keV2)  \n",
       "fake.spectrum.main.composite.F_2           1 / (s cm2)  \n",
       "fake.spectrum.main.composite.mu_2                  keV  \n",
       "fake.spectrum.main.composite.sigma_2               keV  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ar2.get_data_frame(\"hpd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83484b5f",
   "metadata": {},
   "source": [
    "Error propagation operates the same way. Internally, the process is the same as the MLE results, however, the samples are those of the posterior rather than the (assumed) covariance matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "afd05f28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:58.748022Z",
     "iopub.status.busy": "2023-11-04T04:40:58.747651Z",
     "iopub.status.idle": "2023-11-04T04:40:58.759639Z",
     "shell.execute_reply": "2023-11-04T04:40:58.759147Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: (-2.5 -3.5 +3.4) x 10^-3, hpd: (-2.5 -3.5 +3.4) x 10^-3\n",
      "equal-tail: 2.05 +/- 0.11, hpd: 2.05 +/- 0.11\n",
      "equal-tail: 2.05 +/- 0.11, hpd: 2.05 +/- 0.11\n"
     ]
    }
   ],
   "source": [
    "p1 = ar2.get_variates(\"fake.spectrum.main.composite.b_1\")\n",
    "p2 = ar2.get_variates(\"fake.spectrum.main.composite.a_1\")\n",
    "\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "res = p1 + p2\n",
    "\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccf92fa7",
   "metadata": {},
   "source": [
    "To demonstrate how the two objects (MLE and Bayes) are the same, we see that our plotting function written for the MLE result works on our Bayesian results seamlessly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ce486de5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-11-04T04:40:58.761978Z",
     "iopub.status.busy": "2023-11-04T04:40:58.761615Z",
     "iopub.status.idle": "2023-11-04T04:41:02.549206Z",
     "shell.execute_reply": "2023-11-04T04:41:02.548525Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "equal-tail: 2.04 -0.12 +0.11, hpd: 2.04 +/- 0.11\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f5dd1e08d7a94cb1bd7d5350272f70b2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Propagating errors:   0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "go(fitfun, ar2, model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ee42b81",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "03f02f6c3f884436a41b6a8131387fa4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "06c3e8f65c804c7383c72bdaf712aaf3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "07a0aa1fe3204af6abf8ea964ae3edfa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3f0dbebb38c747bc8720c3f841d0f708",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ac12c93baebe4afbabe6007a3e7066a3",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "0974e7d249eb431298708a5336295135": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_78cd0c9be5a5408eb119e1b887494d6d",
       "placeholder": "​",
       "style": "IPY_MODEL_13cbf9dd36df4416b54881ea5be55361",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:00&lt;00:00, 274.00it/s]"
      }
     },
     "0fc01f33f6d24e978e42b55e41c0b182": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0fc14796a7c645bcbb850264bc437311": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_42473cd9e29d4e36a10ee6ff68e7e37d",
       "placeholder": "​",
       "style": "IPY_MODEL_fe3f2313002f4e64b7631a096a097ad0",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors: 100%"
      }
     },
     "12e52556227d482c8a245f48e793ecf6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "13cbf9dd36df4416b54881ea5be55361": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1a209a5f0d8b4e859e097f66c40c5dc6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     },
     "1b706a03fcc3438d850ce28386f313bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "28e60d8a7ae14800af5aeb652f426ce4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "29771180707642dcbd56403509e13c0d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "29a10b12d9e04fc8a09118dcd281b390": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_03f02f6c3f884436a41b6a8131387fa4",
       "placeholder": "​",
       "style": "IPY_MODEL_349dd0029c854fdaaff2fc174c293d80",
       "tabbable": null,
       "tooltip": null,
       "value": " 99/100 [00:03&lt;00:00, 27.35it/s]"
      }
     },
     "2f1a4d691cc64e10a1fffb5141e5db1c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3041658161cc45e780ec9f59b7ecf3b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_eeae4f5eea2b46759112a6472d43a473",
       "placeholder": "​",
       "style": "IPY_MODEL_b08bdd1889b8468e80ce53bcbc17e6a4",
       "tabbable": null,
       "tooltip": null,
       "value": " 100/100 [00:03&lt;00:00, 27.99it/s]"
      }
     },
     "3069e9b5f1b044e586d2d4de89a4ba29": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5ab71d04d2c742d4ae581e957654fe36",
       "placeholder": "​",
       "style": "IPY_MODEL_f27e6473b66042319a8d45b7bf34ef92",
       "tabbable": null,
       "tooltip": null,
       "value": "processing MLE analyses: 100%"
      }
     },
     "349dd0029c854fdaaff2fc174c293d80": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3a788689f1c8478fa6b934290ae604f4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_41e7f343ec5d4db0b0e07179dd6cd141",
        "IPY_MODEL_96a6c47200564063af3f795062bb456a",
        "IPY_MODEL_743ecf3d595048708caac5eeab1ba842"
       ],
       "layout": "IPY_MODEL_b7eedaa9ee6e4e848a9eeb3f81177555",
       "tabbable": null,
       "tooltip": null
      }
     },
     "3f0dbebb38c747bc8720c3f841d0f708": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "41aafaf397b84bc382d0a7167fa69301": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "41e7f343ec5d4db0b0e07179dd6cd141": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_28e60d8a7ae14800af5aeb652f426ce4",
       "placeholder": "​",
       "style": "IPY_MODEL_82f19875801347d29fa66cdfad8765fc",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "42473cd9e29d4e36a10ee6ff68e7e37d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4db2cf56dec94ffc8c3d507928bb5e41": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_41aafaf397b84bc382d0a7167fa69301",
       "placeholder": "​",
       "style": "IPY_MODEL_60e8c87655f346c4bdd3e12b74af5faf",
       "tabbable": null,
       "tooltip": null,
       "value": " 1/1 [00:04&lt;00:00,  4.55s/it]"
      }
     },
     "4df98fe5707c4f94aa1669a86c77fd27": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4ef83581382346dea21b8c38938cd2a1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5ab71d04d2c742d4ae581e957654fe36": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5f1bd3d192b448729dbd22ad18f70c8b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_cb5c1ad5abdf42a98d28a3d2f53d70f1",
        "IPY_MODEL_07a0aa1fe3204af6abf8ea964ae3edfa",
        "IPY_MODEL_0974e7d249eb431298708a5336295135"
       ],
       "layout": "IPY_MODEL_7e460c3dd1d94a4f9511509b22c65d12",
       "tabbable": null,
       "tooltip": null
      }
     },
     "60e8c87655f346c4bdd3e12b74af5faf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "743ecf3d595048708caac5eeab1ba842": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4ef83581382346dea21b8c38938cd2a1",
       "placeholder": "​",
       "style": "IPY_MODEL_f5dae2d54998426485a94fcfdd770f5f",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:03&lt;00:00, 269.01it/s]"
      }
     },
     "78cd0c9be5a5408eb119e1b887494d6d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7e460c3dd1d94a4f9511509b22c65d12": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "82f19875801347d29fa66cdfad8765fc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "83de02683a5548e680350072e22d5f23": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "92f8753aefe6400c9088a11550d53966": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "96a6c47200564063af3f795062bb456a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2f1a4d691cc64e10a1fffb5141e5db1c",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1b706a03fcc3438d850ce28386f313bc",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "98eb5a9e02bf48dca985b621ee573601": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "99dee8158b854c558b3b6eaed38d710e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9a65c94ef6944e50b8d7629f5393a2c7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_06c3e8f65c804c7383c72bdaf712aaf3",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9c14e9e1b3764c49a8c50289905d2253",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "9c14e9e1b3764c49a8c50289905d2253": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "ac12c93baebe4afbabe6007a3e7066a3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "adbb93b82b644bdc9a8922bfdc56114e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b08bdd1889b8468e80ce53bcbc17e6a4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b7eedaa9ee6e4e848a9eeb3f81177555": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bfa06ec983014694aaa641629e152acd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d25b3c9ed3564d03a6a630d9c88fb416",
       "placeholder": "​",
       "style": "IPY_MODEL_83de02683a5548e680350072e22d5f23",
       "tabbable": null,
       "tooltip": null,
       "value": "Propagating errors:  99%"
      }
     },
     "cb5c1ad5abdf42a98d28a3d2f53d70f1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0fc01f33f6d24e978e42b55e41c0b182",
       "placeholder": "​",
       "style": "IPY_MODEL_29771180707642dcbd56403509e13c0d",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "cdf8c14d687946fdb80172c1147d9613": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_12e52556227d482c8a245f48e793ecf6",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_4df98fe5707c4f94aa1669a86c77fd27",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "ce0612680c3f45ca8e96283acaf6c450": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_92f8753aefe6400c9088a11550d53966",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_adbb93b82b644bdc9a8922bfdc56114e",
       "tabbable": null,
       "tooltip": null,
       "value": 99.0
      }
     },
     "cfdc418269da4888ae25a9d8c8f97cdb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3069e9b5f1b044e586d2d4de89a4ba29",
        "IPY_MODEL_9a65c94ef6944e50b8d7629f5393a2c7",
        "IPY_MODEL_4db2cf56dec94ffc8c3d507928bb5e41"
       ],
       "layout": "IPY_MODEL_1a209a5f0d8b4e859e097f66c40c5dc6",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d25b3c9ed3564d03a6a630d9c88fb416": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "eeae4f5eea2b46759112a6472d43a473": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f27e6473b66042319a8d45b7bf34ef92": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f5dae2d54998426485a94fcfdd770f5f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f5dd1e08d7a94cb1bd7d5350272f70b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_bfa06ec983014694aaa641629e152acd",
        "IPY_MODEL_ce0612680c3f45ca8e96283acaf6c450",
        "IPY_MODEL_29a10b12d9e04fc8a09118dcd281b390"
       ],
       "layout": "IPY_MODEL_98eb5a9e02bf48dca985b621ee573601",
       "tabbable": null,
       "tooltip": null
      }
     },
     "fa9977dda2bb4265a22f0efa077739bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_0fc14796a7c645bcbb850264bc437311",
        "IPY_MODEL_cdf8c14d687946fdb80172c1147d9613",
        "IPY_MODEL_3041658161cc45e780ec9f59b7ecf3b0"
       ],
       "layout": "IPY_MODEL_99dee8158b854c558b3b6eaed38d710e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "fe3f2313002f4e64b7631a096a097ad0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
